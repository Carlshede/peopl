no;methodName;statements;involvedModules;fragments;visibility;baseSplit;fineGrained;nested;
1;EnvironmentStats::reset():void;58;2;2;visible;
2;EnvironmentStats::getBufferBytes():long;2;1;1;visible;
3;EnvironmentStats::getCursorsBins():int;2;1;1;visible;
4;EnvironmentStats::getDbClosedBins():int;2;1;1;visible;
5;EnvironmentStats::getInCompQueueSize():int;2;1;1;visible;
6;EnvironmentStats::getLastCheckpointId():long;2;1;1;visible;
7;EnvironmentStats::getNCacheMiss():long;2;1;1;visible;
8;EnvironmentStats::getNCheckpoints():int;2;1;1;visible;
9;EnvironmentStats::getCleanerBacklog():int;2;1;1;visible;
10;EnvironmentStats::getNCleanerRuns():int;2;1;1;visible;
11;EnvironmentStats::getNCleanerDeletions():int;2;1;1;visible;
12;EnvironmentStats::getNDeltaINFlush():int;2;1;1;visible;
13;EnvironmentStats::getLastCheckpointEnd():long;2;1;1;visible;
14;EnvironmentStats::getLastCheckpointStart():long;2;1;1;visible;
15;EnvironmentStats::getNCleanerEntriesRead():int;2;1;1;visible;
16;EnvironmentStats::getNEvictPasses():int;2;1;1;visible;
17;EnvironmentStats::getNFSyncs():long;2;1;2;visible;
18;EnvironmentStats::getNFSyncRequests():long;2;1;2;visible;
19;EnvironmentStats::getNFSyncTimeouts():long;2;1;2;visible;
20;EnvironmentStats::getNFullINFlush():int;2;1;1;visible;
21;EnvironmentStats::getNFullBINFlush():int;2;1;1;visible;
22;EnvironmentStats::getNINsObsolete():int;2;1;1;visible;
23;EnvironmentStats::getNINsCleaned():int;2;1;1;visible;
24;EnvironmentStats::getNINsDead():int;2;1;1;visible;
25;EnvironmentStats::getNINsMigrated():int;2;1;1;visible;
26;EnvironmentStats::getNLNsObsolete():int;2;1;1;visible;
27;EnvironmentStats::getNLNsCleaned():int;2;1;1;visible;
28;EnvironmentStats::getNLNsDead():int;2;1;1;visible;
29;EnvironmentStats::getNLNsLocked():int;2;1;1;visible;
30;EnvironmentStats::getNLNsMigrated():int;2;1;1;visible;
31;EnvironmentStats::getNLNsMarked():int;2;1;1;visible;
32;EnvironmentStats::getNLNQueueHits():int;2;1;1;visible;
33;EnvironmentStats::getNPendingLNsProcessed():int;2;1;1;visible;
34;EnvironmentStats::getNMarkedLNsProcessed():int;2;1;1;visible;
35;EnvironmentStats::getNToBeCleanedLNsProcessed():int;2;1;1;visible;
36;EnvironmentStats::getNClusterLNsProcessed():int;2;1;1;visible;
37;EnvironmentStats::getNPendingLNsLocked():int;2;1;1;visible;
38;EnvironmentStats::getNLogBuffers():int;2;1;1;visible;
39;EnvironmentStats::getNNodesExplicitlyEvicted():long;2;1;1;visible;
40;EnvironmentStats::getNBINsStripped():long;2;1;1;visible;
41;EnvironmentStats::getRequiredEvictBytes():long;2;1;1;visible;
42;EnvironmentStats::getNNodesScanned():long;2;1;1;visible;
43;EnvironmentStats::getNNodesSelected():long;2;1;1;visible;
44;EnvironmentStats::getCacheTotalBytes():long;2;1;1;visible;
45;EnvironmentStats::getCacheDataBytes():long;2;1;1;visible;
46;EnvironmentStats::getNNotResident():long;2;1;1;visible;
47;EnvironmentStats::getNonEmptyBins():int;2;1;1;visible;
48;EnvironmentStats::getProcessedBins():int;2;1;1;visible;
49;EnvironmentStats::getNRepeatFaultReads():long;2;1;1;visible;
50;EnvironmentStats::getNTempBufferWrites():long;2;1;1;visible;
51;EnvironmentStats::getNRepeatIteratorReads():long;2;1;1;visible;
52;EnvironmentStats::getSplitBins():int;2;1;1;visible;
53;EnvironmentStats::setCacheDataBytes(long):void;2;1;1;visible;
54;EnvironmentStats::setNNotResident(long):void;2;1;1;visible;
55;EnvironmentStats::setNCacheMiss(long):void;2;1;1;visible;
56;EnvironmentStats::setNLogBuffers(int):void;2;1;1;visible;
57;EnvironmentStats::setBufferBytes(long):void;2;1;1;visible;
58;EnvironmentStats::setCursorsBins(int):void;2;1;1;visible;
59;EnvironmentStats::setDbClosedBins(int):void;2;1;1;visible;
60;EnvironmentStats::setInCompQueueSize(int):void;2;1;1;visible;
61;EnvironmentStats::setLastCheckpointId(long):void;2;1;1;visible;
62;EnvironmentStats::setNCheckpoints(int):void;2;1;1;visible;
63;EnvironmentStats::setCleanerBacklog(int):void;2;1;1;visible;
64;EnvironmentStats::setNCleanerRuns(int):void;2;1;1;visible;
65;EnvironmentStats::setNCleanerDeletions(int):void;2;1;1;visible;
66;EnvironmentStats::setNDeltaINFlush(int):void;2;1;1;visible;
67;EnvironmentStats::setLastCheckpointEnd(long):void;2;1;1;visible;
68;EnvironmentStats::setLastCheckpointStart(long):void;2;1;1;visible;
69;EnvironmentStats::setNCleanerEntriesRead(int):void;2;1;1;visible;
70;EnvironmentStats::setNEvictPasses(int):void;2;1;1;visible;
71;EnvironmentStats::setNFSyncs(long):void;2;1;2;visible;
72;EnvironmentStats::setNFSyncRequests(long):void;2;1;2;visible;
73;EnvironmentStats::setNFSyncTimeouts(long):void;2;1;2;visible;
74;EnvironmentStats::setNFullINFlush(int):void;2;1;1;visible;
75;EnvironmentStats::setNFullBINFlush(int):void;2;1;1;visible;
76;EnvironmentStats::setNINsObsolete(int):void;2;1;1;visible;
77;EnvironmentStats::setNINsCleaned(int):void;2;1;1;visible;
78;EnvironmentStats::setNINsDead(int):void;2;1;1;visible;
79;EnvironmentStats::setNINsMigrated(int):void;2;1;1;visible;
80;EnvironmentStats::setNLNsObsolete(int):void;2;1;1;visible;
81;EnvironmentStats::setNLNsCleaned(int):void;2;1;1;visible;
82;EnvironmentStats::setNLNsDead(int):void;2;1;1;visible;
83;EnvironmentStats::setNLNsLocked(int):void;2;1;1;visible;
84;EnvironmentStats::setNLNsMigrated(int):void;2;1;1;visible;
85;EnvironmentStats::setNLNsMarked(int):void;2;1;1;visible;
86;EnvironmentStats::setNLNQueueHits(int):void;2;1;1;visible;
87;EnvironmentStats::setNPendingLNsProcessed(int):void;2;1;1;visible;
88;EnvironmentStats::setNMarkedLNsProcessed(int):void;2;1;1;visible;
89;EnvironmentStats::setNToBeCleanedLNsProcessed(int):void;2;1;1;visible;
90;EnvironmentStats::setNClusterLNsProcessed(int):void;2;1;1;visible;
91;EnvironmentStats::setNPendingLNsLocked(int):void;2;1;1;visible;
92;EnvironmentStats::setNNodesExplicitlyEvicted(long):void;2;1;1;visible;
93;EnvironmentStats::setRequiredEvictBytes(long):void;2;1;1;visible;
94;EnvironmentStats::setNBINsStripped(long):void;2;1;1;visible;
95;EnvironmentStats::setNNodesScanned(long):void;2;1;1;visible;
96;EnvironmentStats::setNNodesSelected(long):void;2;1;1;visible;
97;EnvironmentStats::setNonEmptyBins(int):void;2;1;1;visible;
98;EnvironmentStats::setProcessedBins(int):void;2;1;1;visible;
99;EnvironmentStats::setNRepeatFaultReads(long):void;2;1;1;visible;
100;EnvironmentStats::setNTempBufferWrites(long):void;2;1;1;visible;
101;EnvironmentStats::setNRepeatIteratorReads(long):void;2;1;1;visible;
102;EnvironmentStats::setSplitBins(int):void;2;1;1;visible;
103;EnvironmentStats::toString():string;61;2;3;invisible;1;0;0;
104;BtreeStats::getBottomInternalNodeCount():long;2;1;1;visible;
105;BtreeStats::setBottomInternalNodeCount(long):void;2;1;1;visible;
106;BtreeStats::getDuplicateBottomInternalNodeCount():long;2;1;1;visible;
107;BtreeStats::setDuplicateBottomInternalNodeCount(long):void;2;1;1;visible;
108;BtreeStats::getDeletedLeafNodeCount():long;2;1;1;visible;
109;BtreeStats::setDeletedLeafNodeCount(long):void;2;1;1;visible;
110;BtreeStats::getDupCountLeafNodeCount():long;2;1;1;visible;
111;BtreeStats::setDupCountLeafNodeCount(long):void;2;1;1;visible;
112;BtreeStats::getInternalNodeCount():long;2;1;1;visible;
113;BtreeStats::setInternalNodeCount(long):void;2;1;1;visible;
114;BtreeStats::getDuplicateInternalNodeCount():long;2;1;1;visible;
115;BtreeStats::setDuplicateInternalNodeCount(long):void;2;1;1;visible;
116;BtreeStats::getLeafNodeCount():long;2;1;1;visible;
117;BtreeStats::setLeafNodeCount(long):void;2;1;1;visible;
118;BtreeStats::getMainTreeMaxDepth():int;2;1;1;visible;
119;BtreeStats::setMainTreeMaxDepth(int):void;2;1;1;visible;
120;BtreeStats::getDuplicateTreeMaxDepth():int;2;1;1;visible;
121;BtreeStats::setDuplicateTreeMaxDepth(int):void;2;1;1;visible;
122;BtreeStats::getINsByLevel():long[];2;1;1;visible;
123;BtreeStats::setINsByLevel(long[]):void;2;1;1;visible;
124;BtreeStats::getBINsByLevel():long[];2;1;1;visible;
125;BtreeStats::setBINsByLevel(long[]):void;2;1;1;visible;
126;BtreeStats::getDINsByLevel():long[];2;1;1;visible;
127;BtreeStats::setDINsByLevel(long[]):void;2;1;1;visible;
128;BtreeStats::getDBINsByLevel():long[];2;1;1;visible;
129;BtreeStats::setDBINsByLevel(long[]):void;2;1;1;visible;
130;BtreeStats::arrayToString(long[],StringBuffer):void;6;1;1;visible;
131;BtreeStats::toString():string;24;1;1;visible;
132;Sequence::close():void;2;1;1;visible;
133;Sequence::get(Transaction,int):long;90;4;8;invisible;1;0;0;
134;Sequence::getDatabase():Database;2;1;1;visible;
135;Sequence::getKey():DatabaseEntry;2;1;1;visible;
136;Sequence::getStats(StatsConfig):SequenceStats;16;1;2;visible;
137;Sequence::readDataRequired(Cursor,LockMode):void;3;1;1;visible;
138;Sequence::readData(Cursor,LockMode):boolean;17;1;1;visible;
139;Sequence::makeData():DatabaseEntry;16;1;1;visible;
140;Sequence::copyEntry(DatabaseEntry):DatabaseEntry;9;1;1;visible;
141;PreloadConfig::setMaxBytes(long):void;2;1;1;visible;
142;PreloadConfig::getMaxBytes():long;2;1;1;visible;
143;PreloadConfig::setMaxMillisecs(long):void;2;1;1;visible;
144;PreloadConfig::getMaxMillisecs():long;2;1;1;visible;
145;PreloadConfig::setLoadLNs(boolean):void;2;1;1;visible;
146;PreloadConfig::getLoadLNs():boolean;2;1;1;visible;
147;PreloadConfig::cloneConfig():DatabaseConfig;4;1;1;visible;
148;PreloadStatus::toString():string;2;1;1;visible;
149;DatabaseEntry::toString():string;9;1;1;visible;
150;DatabaseEntry::getData():byte[];2;1;1;visible;
151;DatabaseEntry::setData(byte[]):void;4;1;1;visible;
152;DatabaseEntry::setData(byte[],int,int):void;4;1;1;visible;
153;DatabaseEntry::setPartial(int,int,boolean):void;4;1;1;visible;
154;DatabaseEntry::getPartialLength():int;2;1;1;visible;
155;DatabaseEntry::setPartialLength(int):void;2;1;1;visible;
156;DatabaseEntry::getPartialOffset():int;2;1;1;visible;
157;DatabaseEntry::setPartialOffset(int):void;2;1;1;visible;
158;DatabaseEntry::getPartial():boolean;2;1;1;visible;
159;DatabaseEntry::setPartial(boolean):void;2;1;1;visible;
160;DatabaseEntry::getOffset():int;2;1;1;visible;
161;DatabaseEntry::setOffset(int):void;2;1;1;visible;
162;DatabaseEntry::getSize():int;2;1;1;visible;
163;DatabaseEntry::setSize(int):void;2;1;1;visible;
164;DatabaseEntry::dumpData():string;2;1;1;visible;
165;DatabaseEntry::equals(Object):boolean;17;1;1;visible;
166;DatabaseEntry::hashCode():int;6;1;1;visible;
167;EnvironmentMutableConfig::setTxnNoSync(boolean):void;2;1;1;visible;
168;EnvironmentMutableConfig::getTxnNoSync():boolean;2;1;1;visible;
169;EnvironmentMutableConfig::setTxnWriteNoSync(boolean):void;2;1;1;visible;
170;EnvironmentMutableConfig::getTxnWriteNoSync():boolean;2;1;1;visible;
171;EnvironmentMutableConfig::setCacheSize(long):void;2;1;1;visible;
172;EnvironmentMutableConfig::getCacheSize():long;4;1;1;visible;
173;EnvironmentMutableConfig::setCachePercent(int):void;2;1;1;visible;
174;EnvironmentMutableConfig::getCachePercent():int;5;1;1;visible;
175;EnvironmentMutableConfig::setConfigParam(string,string):void;9;1;1;visible;
176;EnvironmentMutableConfig::getConfigParam(string):string;6;1;1;visible;
177;EnvironmentMutableConfig::getVal(ConfigParam):string;5;1;1;visible;
178;EnvironmentMutableConfig::setVal(ConfigParam,string):void;4;1;1;visible;
179;EnvironmentMutableConfig::setValidateParams(boolean):void;2;1;1;visible;
180;EnvironmentMutableConfig::validateProperties(Properties):void;11;1;1;visible;
181;EnvironmentMutableConfig::checkImmutablePropsForEquality(EnvironmentMutableConfig):void;12;1;1;visible;
182;EnvironmentMutableConfig::clone():Object;4;1;1;visible;
183;EnvironmentMutableConfig::cloneMutableConfig():EnvironmentMutableConfig;7;1;1;visible;
184;EnvironmentMutableConfig::copyHandlePropsTo(EnvironmentMutableConfig):void;3;1;1;visible;
185;EnvironmentMutableConfig::copyMutablePropsTo(EnvironmentMutableConfig):void;10;1;1;visible;
186;EnvironmentMutableConfig::fillInEnvironmentGeneratedProps(EnvironmentImpl):void;2;1;1;visible;
187;EnvironmentMutableConfig::clearImmutableProps():void;8;1;1;visible;
188;EnvironmentMutableConfig::setLoadPropertyFile(boolean):void;2;1;1;visible;
189;EnvironmentMutableConfig::getLoadPropertyFile():boolean;2;1;1;visible;
190;EnvironmentMutableConfig::getNumExplicitlySetParams():int;2;1;1;visible;
191;EnvironmentMutableConfig::toString():string;2;1;1;visible;
192;EnvironmentConfig::setAllowCreate(boolean):void;2;1;1;visible;
193;EnvironmentConfig::getAllowCreate():boolean;2;1;1;visible;
194;EnvironmentConfig::setLockTimeout(long):void;2;1;1;visible;
195;EnvironmentConfig::getLockTimeout():long;7;1;1;visible;
196;EnvironmentConfig::setReadOnly(boolean):void;2;1;1;visible;
197;EnvironmentConfig::getReadOnly():boolean;3;1;1;visible;
198;EnvironmentConfig::setTransactional(boolean):void;2;1;2;visible;
199;EnvironmentConfig::getTransactional():boolean;3;1;2;visible;
200;EnvironmentConfig::setLocking(boolean):void;2;1;1;visible;
201;EnvironmentConfig::getLocking():boolean;3;1;1;visible;
202;EnvironmentConfig::setTxnTimeout(long):void;2;1;1;visible;
203;EnvironmentConfig::getTxnTimeout():long;7;1;1;visible;
204;EnvironmentConfig::setTxnSerializableIsolation(boolean):void;2;1;1;visible;
205;EnvironmentConfig::getTxnSerializableIsolation():boolean;3;1;1;visible;
206;EnvironmentConfig::setTxnReadCommitted(boolean):void;2;1;1;visible;
207;EnvironmentConfig::getTxnReadCommitted():boolean;2;1;1;visible;
208;EnvironmentConfig::setConfigParam(string,string):void;7;1;1;visible;
209;EnvironmentConfig::setCreateUP(boolean):void;2;1;1;visible;
210;EnvironmentConfig::getCreateUP():boolean;2;1;1;visible;
211;EnvironmentConfig::setCheckpointUP(boolean):void;2;1;1;visible;
212;EnvironmentConfig::getCheckpointUP():boolean;2;1;1;visible;
213;EnvironmentConfig::cloneConfig():EnvironmentConfig;4;1;1;visible;
214;EnvironmentConfig::toString():string;2;1;1;visible;
215;LockStats::getNOwners():int;2;1;1;visible;
216;LockStats::getNReadLocks():int;2;1;1;visible;
217;LockStats::getNTotalLocks():int;2;1;1;visible;
218;LockStats::getNWaiters():int;2;1;1;visible;
219;LockStats::getNWriteLocks():int;2;1;1;visible;
220;LockStats::getNRequests():long;2;1;1;visible;
221;LockStats::getNWaits():long;2;1;1;visible;
222;LockStats::setNOwners(int):void;2;1;1;visible;
223;LockStats::setNReadLocks(int):void;2;1;1;visible;
224;LockStats::accumulateNTotalLocks(int):void;2;1;1;visible;
225;LockStats::setNWaiters(int):void;2;1;1;visible;
226;LockStats::setNWriteLocks(int):void;2;1;1;visible;
227;LockStats::setNRequests(long):void;2;1;1;visible;
228;LockStats::setNWaits(long):void;2;1;1;visible;
229;LockStats::accumulateLockTableLatchStats(LatchStats):void;11;1;2;visible;
230;LockStats::toString():string;13;2;3;invisible;1;0;0;
231;CursorConfig::setReadUncommitted(boolean):void;2;1;1;visible;
232;CursorConfig::getReadUncommitted():boolean;2;1;1;visible;
233;CursorConfig::setDirtyRead(boolean):void;2;1;1;visible;
234;CursorConfig::getDirtyRead():boolean;2;1;1;visible;
235;CursorConfig::setReadCommitted(boolean):void;2;1;1;visible;
236;CursorConfig::getReadCommitted():boolean;2;1;1;visible;
237;CursorConfig::cloneConfig():CursorConfig;4;1;1;visible;
238;ForeignKeyDeleteAction::toString():string;2;1;1;visible;
239;TransactionConfig::setSync(boolean):void;2;1;1;visible;
240;TransactionConfig::getSync():boolean;2;1;1;visible;
241;TransactionConfig::setNoSync(boolean):void;2;1;1;visible;
242;TransactionConfig::getNoSync():boolean;2;1;1;visible;
243;TransactionConfig::setWriteNoSync(boolean):void;2;1;1;visible;
244;TransactionConfig::getWriteNoSync():boolean;2;1;1;visible;
245;TransactionConfig::setNoWait(boolean):void;2;1;1;visible;
246;TransactionConfig::getNoWait():boolean;2;1;1;visible;
247;TransactionConfig::setReadUncommitted(boolean):void;2;1;1;visible;
248;TransactionConfig::getReadUncommitted():boolean;2;1;1;visible;
249;TransactionConfig::setDirtyRead(boolean):void;2;1;1;visible;
250;TransactionConfig::getDirtyRead():boolean;2;1;1;visible;
251;TransactionConfig::setReadCommitted(boolean):void;2;1;1;visible;
252;TransactionConfig::getReadCommitted():boolean;2;1;1;visible;
253;TransactionConfig::setSerializableIsolation(boolean):void;2;1;1;visible;
254;TransactionConfig::getSerializableIsolation():boolean;2;1;1;visible;
255;TransactionConfig::cloneConfig():TransactionConfig;4;1;1;visible;
256;SecondaryCursor::getPrimaryDatabase():Database;2;1;1;visible;
257;SecondaryCursor::dup(boolean):Cursor;3;1;1;visible;
258;SecondaryCursor::dupSecondary(boolean):SecondaryCursor;2;1;1;visible;
259;SecondaryCursor::delete():OperationStatus;14;2;3;invisible;1;0;0;
260;SecondaryCursor::put(DatabaseEntry,DatabaseEntry):OperationStatus;2;1;1;visible;
261;SecondaryCursor::putNoOverwrite(DatabaseEntry,DatabaseEntry):OperationStatus;2;1;1;visible;
262;SecondaryCursor::putNoDupData(DatabaseEntry,DatabaseEntry):OperationStatus;2;1;1;visible;
263;SecondaryCursor::putCurrent(DatabaseEntry):OperationStatus;2;1;1;visible;
264;SecondaryCursor::getCurrent(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
265;SecondaryCursor::getCurrent(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
266;SecondaryCursor::getFirst(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
267;SecondaryCursor::getFirst(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
268;SecondaryCursor::getLast(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
269;SecondaryCursor::getLast(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
270;SecondaryCursor::getNext(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
271;SecondaryCursor::getNext(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;10;2;3;invisible;1;0;0;
272;SecondaryCursor::getNextDup(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
273;SecondaryCursor::getNextDup(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
274;SecondaryCursor::getNextNoDup(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
275;SecondaryCursor::getNextNoDup(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;10;2;3;invisible;1;0;0;
276;SecondaryCursor::getPrev(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
277;SecondaryCursor::getPrev(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;10;2;3;invisible;1;0;0;
278;SecondaryCursor::getPrevDup(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
279;SecondaryCursor::getPrevDup(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
280;SecondaryCursor::getPrevNoDup(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
281;SecondaryCursor::getPrevNoDup(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;10;2;3;invisible;1;0;0;
282;SecondaryCursor::getSearchKey(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
283;SecondaryCursor::getSearchKey(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;9;2;3;invisible;1;0;0;
284;SecondaryCursor::getSearchKeyRange(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
285;SecondaryCursor::getSearchKeyRange(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;9;2;3;invisible;1;0;0;
286;SecondaryCursor::getSearchBoth(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
287;SecondaryCursor::getSearchBoth(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;9;2;3;invisible;1;0;0;
288;SecondaryCursor::getSearchBothRange(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
289;SecondaryCursor::getSearchBothRange(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;9;2;3;invisible;1;0;0;
290;SecondaryCursor::getCurrentInternal(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;1;1;visible;
291;SecondaryCursor::search(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode,SearchMode):OperationStatus;9;1;1;visible;
292;SecondaryCursor::position(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode,boolean):OperationStatus;9;1;1;visible;
293;SecondaryCursor::retrieveNext(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode,GetMode):OperationStatus;9;1;1;visible;
294;SecondaryCursor::readPrimaryAfterGet(DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;44;1;1;visible;
295;SecondaryCursor::checkArgsNoValRequired(DatabaseEntry,DatabaseEntry,DatabaseEntry):void;4;1;1;visible;
296;Transaction::abort():void;7;1;1;visible;
297;Transaction::getId():long;2;1;1;visible;
298;Transaction::commit():void;6;1;1;visible;
299;Transaction::commitSync():void;2;1;1;visible;
300;Transaction::commitNoSync():void;2;1;1;visible;
301;Transaction::commitWriteNoSync():void;2;1;1;visible;
302;Transaction::doCommit(byte):void;6;1;1;visible;
303;Transaction::setTxnTimeout(long):void;3;1;1;visible;
304;Transaction::setLockTimeout(long):void;3;1;1;visible;
305;Transaction::setName(string):void;2;1;1;visible;
306;Transaction::getName():string;2;1;1;visible;
307;Transaction::hashCode():int;2;1;1;visible;
308;Transaction::equals(Object):boolean;8;1;1;visible;
309;Transaction::toString():string;9;1;1;visible;
310;Transaction::getLocker():Locker;5;1;1;visible;
311;Transaction::getTxn():Txn;2;1;1;visible;
312;Transaction::checkEnv():void;2;1;1;visible;
313;SequenceStats::getNGets():int;2;1;1;visible;
314;SequenceStats::getNCachedGets():int;2;1;1;visible;
315;SequenceStats::getCurrent():long;2;1;1;visible;
316;SequenceStats::getValue():long;2;1;1;visible;
317;SequenceStats::getLastValue():long;2;1;1;visible;
318;SequenceStats::getMin():long;2;1;1;visible;
319;SequenceStats::getMax():long;2;1;1;visible;
320;SequenceStats::getCacheSize():int;2;1;1;visible;
321;SequenceStats::toString():string;2;1;1;visible;
322;LockMode::toString():string;2;1;1;visible;
323;StatsConfig::setFast(boolean):void;2;1;1;visible;
324;StatsConfig::getFast():boolean;2;1;1;visible;
325;StatsConfig::setClear(boolean):void;2;1;1;visible;
326;StatsConfig::getClear():boolean;2;1;1;visible;
327;StatsConfig::setShowProgressStream(PrintStream):void;2;1;1;visible;
328;StatsConfig::getShowProgressStream():PrintStream;2;1;1;visible;
329;StatsConfig::setShowProgressInterval(int):void;2;1;1;visible;
330;StatsConfig::getShowProgressInterval():int;2;1;1;visible;
331;PreloadStats::reset():void;8;1;1;visible;
332;PreloadStats::getNINsLoaded():int;2;1;1;visible;
333;PreloadStats::getNBINsLoaded():int;2;1;1;visible;
334;PreloadStats::getNLNsLoaded():int;2;1;1;visible;
335;PreloadStats::getNDINsLoaded():int;2;1;1;visible;
336;PreloadStats::getNDBINsLoaded():int;2;1;1;visible;
337;PreloadStats::getNDupCountLNsLoaded():int;2;1;1;visible;
338;PreloadStats::getStatus():PreloadStatus;2;1;1;visible;
339;PreloadStats::setNINsLoaded(int):void;2;1;1;visible;
340;PreloadStats::setNBINsLoaded(int):void;2;1;1;visible;
341;PreloadStats::setNLNsLoaded(int):void;2;1;1;visible;
342;PreloadStats::setNDINsLoaded(int):void;2;1;1;visible;
343;PreloadStats::setNDBINsLoaded(int):void;2;1;1;visible;
344;PreloadStats::setNDupCountLNsLoaded(int):void;2;1;1;visible;
345;PreloadStats::setStatus(PreloadStatus):void;2;1;1;visible;
346;PreloadStats::toString():string;10;1;1;visible;
348;JoinCursor::close():void;4;1;1;visible;
349;JoinCursor::close(DatabaseException):void;16;1;1;visible;
350;JoinCursor::getSortedCursors():Cursor[];2;1;1;visible;
351;JoinCursor::getDatabase():Database;2;1;1;visible;
352;JoinCursor::getConfig():JoinConfig;2;1;1;visible;
353;JoinCursor::getNext(DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
354;JoinCursor::getNext(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;8;2;3;invisible;1;0;0;
355;JoinCursor::retrieveNext(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;38;1;1;visible;
356;SequenceConfig::setAllowCreate(boolean):void;2;1;1;visible;
357;SequenceConfig::getAllowCreate():boolean;2;1;1;visible;
358;SequenceConfig::setCacheSize(int):void;2;1;1;visible;
359;SequenceConfig::getCacheSize():int;2;1;1;visible;
360;SequenceConfig::setDecrement(boolean):void;2;1;1;visible;
361;SequenceConfig::getDecrement():boolean;2;1;1;visible;
362;SequenceConfig::setExclusiveCreate(boolean):void;2;1;1;visible;
363;SequenceConfig::getExclusiveCreate():boolean;2;1;1;visible;
364;SequenceConfig::setInitialValue(long):void;2;1;1;visible;
365;SequenceConfig::getInitialValue():long;2;1;1;visible;
366;SequenceConfig::setAutoCommitNoSync(boolean):void;2;1;2;visible;
367;SequenceConfig::getAutoCommitNoSync():boolean;2;1;2;visible;
368;SequenceConfig::setRange(long,long):void;3;1;1;visible;
369;SequenceConfig::getRangeMin():long;2;1;1;visible;
370;SequenceConfig::getRangeMax():long;2;1;1;visible;
371;SequenceConfig::setWrap(boolean):void;2;1;1;visible;
372;SequenceConfig::getWrap():boolean;2;1;1;visible;
373;XAEnvironment::getXATransaction(Xid):Transaction;6;1;1;visible;
374;XAEnvironment::setXATransaction(Xid,Transaction):void;2;1;1;visible;
375;XAEnvironment::commit(Xid,boolean):void;18;1;1;visible;
376;XAEnvironment::end(Xid,int):void;23;1;1;visible;
377;XAEnvironment::forget(Xid):void;4;1;1;visible;
378;XAEnvironment::isSameRM(XAResource):boolean;11;1;1;visible;
379;XAEnvironment::prepare(Xid):int;15;1;1;visible;
380;XAEnvironment::recover(int):Xid[];19;1;1;visible;
381;XAEnvironment::rollback(Xid):void;13;1;1;visible;
382;XAEnvironment::getTransactionTimeout():int;6;1;1;visible;
383;XAEnvironment::setTransactionTimeout(int):boolean;2;1;1;visible;
384;XAEnvironment::start(Xid,int):void;40;1;1;visible;
385;XAEnvironment::throwNewXAException(Exception):void;4;1;1;visible;
386;OperationStatus::toString():string;2;1;1;visible;
387;Cursor::init(Database,DatabaseImpl,Locker,boolean,CursorConfig):void;21;3;4;invisible;1;0;0;
388;Cursor::getCursorImpl():CursorImpl;2;1;1;visible;
389;Cursor::getDatabase():Database;2;1;1;visible;
390;Cursor::getDatabaseImpl():DatabaseImpl;2;1;1;visible;
391;Cursor::getConfig():CursorConfig;2;1;1;visible;
392;Cursor::setNonCloning(boolean):void;2;1;1;visible;
393;Cursor::close():void;5;1;1;visible;
394;Cursor::count():int;9;2;3;invisible;1;0;0;
395;Cursor::dup(boolean):Cursor;3;1;1;visible;
396;Cursor::delete():OperationStatus;7;2;3;invisible;1;0;0;
397;Cursor::put(DatabaseEntry,DatabaseEntry):OperationStatus;10;2;3;invisible;1;0;0;
398;Cursor::putNoOverwrite(DatabaseEntry,DatabaseEntry):OperationStatus;10;2;3;invisible;1;0;0;
399;Cursor::putNoDupData(DatabaseEntry,DatabaseEntry):OperationStatus;10;2;3;invisible;1;0;0;
400;Cursor::putCurrent(DatabaseEntry):OperationStatus;8;2;3;invisible;1;0;0;
401;Cursor::getCurrent(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
402;Cursor::getFirst(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
403;Cursor::getLast(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
404;Cursor::getNext(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;10;2;3;invisible;1;0;0;
405;Cursor::getNextDup(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
406;Cursor::getNextNoDup(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;10;2;3;invisible;1;0;0;
407;Cursor::getPrev(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;10;2;3;invisible;1;0;0;
408;Cursor::getPrevDup(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
409;Cursor::getPrevNoDup(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;10;2;3;invisible;1;0;0;
410;Cursor::getSearchKey(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;8;2;3;invisible;1;0;0;
411;Cursor::getSearchKeyRange(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;8;2;3;invisible;1;0;0;
412;Cursor::getSearchBoth(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
413;Cursor::getSearchBothRange(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;7;2;3;invisible;1;0;0;
414;Cursor::countInternal(LockMode):int;12;1;1;visible;
415;Cursor::deleteInternal():OperationStatus;19;1;1;visible;
416;Cursor::deleteNoNotify():OperationStatus;29;2;3;invisible;0;0;1;
417;Cursor::putInternal(DatabaseEntry,DatabaseEntry,PutMode):OperationStatus;17;1;1;visible;
418;Cursor::putNoNotify(DatabaseEntry,DatabaseEntry,PutMode,DatabaseEntry):OperationStatus;18;2;2;invisible;0;0;1;
419;Cursor::putAllowPhantoms(DatabaseEntry,DatabaseEntry,PutMode,DatabaseEntry,CursorImpl):OperationStatus;44;2;2;invisible;0;0;1;
420;Cursor::position(DatabaseEntry,DatabaseEntry,LockMode,boolean):OperationStatus;18;1;1;visible;
421;Cursor::positionAllowPhantoms(DatabaseEntry,DatabaseEntry,LockType,boolean):OperationStatus;33;2;4;invisible;0;0;1;
422;Cursor::search(DatabaseEntry,DatabaseEntry,LockMode,SearchMode):OperationStatus;31;1;1;visible;
423;Cursor::searchExactAndRangeLock(DatabaseEntry,DatabaseEntry,LockType,LockType,SearchMode):KeyChangeStatus;23;1;1;visible;
424;Cursor::searchAllowPhantoms(DatabaseEntry,DatabaseEntry,LockType,LockType,SearchMode):KeyChangeStatus;10;1;1;visible;
425;Cursor::searchInternal(CursorImpl,DatabaseEntry,DatabaseEntry,LockType,LockType,SearchMode,boolean):KeyChangeStatus;126;2;4;invisible;1;0;0;
426;Cursor::retrieveNext(DatabaseEntry,DatabaseEntry,LockMode,GetMode):OperationStatus;23;1;1;visible;
427;Cursor::getNextDupAndRangeLock(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;39;2;3;invisible;0;0;1;
428;Cursor::rangeLockCurrentPosition(GetMode):void;31;2;3;invisible;0;0;1;
429;Cursor::retrieveNextAllowPhantoms(DatabaseEntry,DatabaseEntry,LockType,GetMode):OperationStatus;28;2;3;invisible;0;0;1;
430;Cursor::getCurrentInternal(DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;4;1;1;visible;
431;Cursor::checkForInsertion(GetMode,CursorImpl,CursorImpl):boolean;79;2;5;invisible;0;0;1;
432;Cursor::beginRead(boolean):CursorImpl;7;1;1;visible;
433;Cursor::endRead(CursorImpl,boolean):void;10;1;1;visible;
434;Cursor::advanceCursor(DatabaseEntry,DatabaseEntry):boolean;2;1;1;visible;
435;Cursor::getLockType(LockMode,boolean):LockType;9;1;1;visible;
436;Cursor::isReadUncommittedMode(LockMode):boolean;2;1;1;visible;
437;Cursor::isSerializableIsolation(LockMode):boolean;2;1;1;visible;
438;Cursor::checkUpdatesAllowed(string):void;3;1;1;visible;
439;Cursor::checkArgsNoValRequired(DatabaseEntry,DatabaseEntry):void;3;1;1;visible;
440;Cursor::checkArgsValRequired(DatabaseEntry,DatabaseEntry):void;3;1;1;visible;
441;Cursor::checkState(boolean):void;3;1;1;visible;
442;Cursor::checkEnv():void;2;1;1;visible;
443;Cursor::trace(Level,string,DatabaseEntry,DatabaseEntry,LockMode):void;15;2;3;visible;
444;Cursor::trace(Level,string,LockMode):void;11;2;3;visible;
445;Cursor::traceCursorImpl(StringBuffer):void;8;1;1;visible;
446;SecondaryConfig::setKeyCreator(SecondaryKeyCreator):void;2;1;1;visible;
447;SecondaryConfig::getKeyCreator():SecondaryKeyCreator;2;1;1;visible;
448;SecondaryConfig::setMultiKeyCreator(SecondaryMultiKeyCreator):void;2;1;1;visible;
449;SecondaryConfig::getMultiKeyCreator():SecondaryMultiKeyCreator;2;1;1;visible;
450;SecondaryConfig::setAllowPopulate(boolean):void;2;1;1;visible;
451;SecondaryConfig::getAllowPopulate():boolean;2;1;1;visible;
452;SecondaryConfig::setForeignKeyDatabase(Database):void;2;1;1;visible;
453;SecondaryConfig::getForeignKeyDatabase():Database;2;1;1;visible;
454;SecondaryConfig::setForeignKeyDeleteAction(ForeignKeyDeleteAction):void;3;1;1;visible;
455;SecondaryConfig::getForeignKeyDeleteAction():ForeignKeyDeleteAction;2;1;1;visible;
456;SecondaryConfig::setForeignKeyNullifier(ForeignKeyNullifier):void;2;1;1;visible;
457;SecondaryConfig::getForeignKeyNullifier():ForeignKeyNullifier;2;1;1;visible;
458;SecondaryConfig::setForeignMultiKeyNullifier(ForeignMultiKeyNullifier):void;2;1;1;visible;
459;SecondaryConfig::getForeignMultiKeyNullifier():ForeignMultiKeyNullifier;2;1;1;visible;
460;SecondaryConfig::setImmutableSecondaryKey(boolean):void;2;1;1;visible;
461;SecondaryConfig::getImmutableSecondaryKey():boolean;2;1;1;visible;
462;SecondaryConfig::validate(DatabaseConfig):void;16;1;1;visible;
463;SecondaryConfig::equalOrBothNull(Object,Object):boolean;2;1;1;visible;
464;SecondaryConfig::genSecondaryConfigMismatchMessage(DatabaseConfig,boolean,boolean,boolean,boolean,boolean,boolean,boolean):string;17;1;1;visible;
465;CheckpointConfig::setKBytes(int):void;2;1;2;visible;
466;CheckpointConfig::getKBytes():int;2;1;2;visible;
467;CheckpointConfig::setMinutes(int):void;2;1;2;visible;
468;CheckpointConfig::getMinutes():int;2;1;2;visible;
469;CheckpointConfig::setForce(boolean):void;2;1;1;visible;
470;CheckpointConfig::getForce():boolean;2;1;1;visible;
471;CheckpointConfig::setMinimizeRecoveryTime(boolean):void;2;1;1;visible;
472;CheckpointConfig::getMinimizeRecoveryTime():boolean;2;1;1;visible;
473;SecondaryTrigger::getDb():SecondaryDatabase;2;1;1;visible;
474;SecondaryTrigger::triggerAdded(Database):void;1;1;1;visible;
475;SecondaryTrigger::triggerRemoved(Database):void;2;1;1;visible;
476;SecondaryTrigger::databaseUpdated(Database,Locker,DatabaseEntry,DatabaseEntry,DatabaseEntry):void;2;1;1;visible;
477;SecondaryDatabase::initNew(Environment,Locker,string,DatabaseConfig):void;3;1;1;visible;
478;SecondaryDatabase::initExisting(Environment,Locker,DatabaseImpl,DatabaseConfig):void;7;1;1;visible;
479;SecondaryDatabase::init(Locker):void;31;2;2;visible;
480;SecondaryDatabase::close():void;7;1;1;visible;
481;SecondaryDatabase::clearPrimary():void;3;1;1;visible;
482;SecondaryDatabase::clearForeignKeyTrigger():void;2;1;1;visible;
483;SecondaryDatabase::getPrimaryDatabase():Database;2;1;1;visible;
484;SecondaryDatabase::getSecondaryConfig():SecondaryConfig;2;1;1;visible;
485;SecondaryDatabase::getPrivateSecondaryConfig():SecondaryConfig;2;1;1;visible;
486;SecondaryDatabase::openSecondaryCursor(Transaction,CursorConfig):SecondaryCursor;2;2;3;invisible;0;1;0;
487;SecondaryDatabase::newDbcInstance(Transaction,CursorConfig):Cursor;2;2;3;invisible;0;1;0;
488;SecondaryDatabase::delete(Transaction,DatabaseEntry):OperationStatus;24;3;7;invisible;1;0;0;
489;SecondaryDatabase::get(Transaction,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;2;3;invisible;0;1;0;
490;SecondaryDatabase::get(Transaction,DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;19;3;6;invisible;1;0;0;
491;SecondaryDatabase::getSearchBoth(Transaction,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;2;2;visible;
492;SecondaryDatabase::getSearchBoth(Transaction,DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;19;3;6;invisible;1;0;0;
493;SecondaryDatabase::put(Transaction,DatabaseEntry,DatabaseEntry):OperationStatus;2;2;2;visible;
494;SecondaryDatabase::putNoOverwrite(Transaction,DatabaseEntry,DatabaseEntry):OperationStatus;2;2;2;visible;
495;SecondaryDatabase::putNoDupData(Transaction,DatabaseEntry,DatabaseEntry):OperationStatus;2;2;2;visible;
496;SecondaryDatabase::join(Cursor[],JoinConfig):JoinCursor;2;1;1;visible;
497;SecondaryDatabase::truncate(Transaction,boolean):int;2;2;2;visible;
498;SecondaryDatabase::updateSecondary(Locker,Cursor,DatabaseEntry,DatabaseEntry,DatabaseEntry):void;69;1;1;visible;
499;SecondaryDatabase::deleteKey(Cursor,DatabaseEntry,DatabaseEntry):void;6;1;1;visible;
500;SecondaryDatabase::insertKey(Locker,Cursor,DatabaseEntry,DatabaseEntry):void;21;1;1;visible;
501;SecondaryDatabase::onForeignKeyDelete(Locker,DatabaseEntry):void;57;1;1;visible;
502;SecondaryDatabase::secondaryCorruptException():DatabaseException;2;1;1;visible;
503;SecondaryDatabase::trace(Level,string):void;11;2;3;visible;
504;Database::toString():string;2;1;1;visible;
505;Database::initNew(Environment,Locker,string,DatabaseConfig):void;8;1;1;visible;
506;Database::initExisting(Environment,Locker,DatabaseImpl,DatabaseConfig):void;12;2;2;visible;
507;Database::init(Environment,DatabaseConfig):void;6;1;1;visible;
508;Database::validateConfigAgainstExistingDb(DatabaseConfig,DatabaseImpl):void;22;2;3;invisible;0;0;1;
509;Database::close():void;33;2;3;invisible;1;0;0;
510;Database::openSequence(Transaction,DatabaseEntry,SequenceConfig):Sequence;9;3;6;invisible;1;0;0;
511;Database::removeSequence(Transaction,DatabaseEntry):void;2;2;3;invisible;0;1;0;
512;Database::openCursor(Transaction,CursorConfig):Cursor;11;3;6;invisible;1;0;0;
513;Database::newDbcInstance(Transaction,CursorConfig):Cursor;2;2;3;invisible;0;1;0;
514;Database::delete(Transaction,DatabaseEntry):OperationStatus;16;3;7;invisible;1;0;0;
515;Database::deleteInternal(Locker,DatabaseEntry):OperationStatus;30;1;1;visible;
516;Database::get(Transaction,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;19;3;6;invisible;1;0;0;
517;Database::getSearchBoth(Transaction,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;19;3;6;invisible;1;0;0;
518;Database::put(Transaction,DatabaseEntry,DatabaseEntry):OperationStatus;11;3;6;invisible;1;0;0;
519;Database::putNoOverwrite(Transaction,DatabaseEntry,DatabaseEntry):OperationStatus;11;3;6;invisible;1;0;0;
520;Database::putNoDupData(Transaction,DatabaseEntry,DatabaseEntry):OperationStatus;11;3;6;invisible;1;0;0;
521;Database::putInternal(Transaction,DatabaseEntry,DatabaseEntry,PutMode):OperationStatus;14;2;4;invisible;0;1;0;
522;Database::join(Cursor[],JoinConfig):JoinCursor;31;2;5;invisible;1;0;0;
523;Database::truncate(Transaction,boolean):int;35;4;12;invisible;1;0;0;
524;Database::truncateInternal(Locker,boolean):int;24;2;4;invisible;1;0;0;
525;Database::preload(long):void;9;2;3;invisible;1;0;0;
526;Database::preload(long,long):void;10;2;3;invisible;1;0;0;
527;Database::preload(PreloadConfig):void;10;3;6;invisible;1;0;0;
528;Database::getStats(StatsConfig):DatabaseStats;9;2;3;invisible;0;0;1;
529;Database::verify(VerifyConfig):DatabaseStats;10;2;4;invisible;1;0;0;
530;Database::getDatabaseName():string;6;1;1;visible;
531;Database::getDebugName():string;5;1;1;visible;
532;Database::getConfig():DatabaseConfig;9;1;1;visible;
533;Database::isTransactional():boolean;2;1;2;visible;
534;Database::getEnvironment():Environment;2;1;1;visible;
535;Database::getSecondaryDatabases():List;13;2;2;invisible;0;0;1;
536;Database::isWritable():boolean;2;1;1;visible;
537;Database::getDatabaseImpl():DatabaseImpl;2;1;1;visible;
538;Database::setHandleLocker(Locker):void;2;1;1;visible;
539;Database::removeCursor(Cursor):void;2;1;1;visible;
540;Database::addCursor(Cursor):void;2;1;1;visible;
541;Database::checkRequiredDbState(DbState,string):void;3;1;1;visible;
542;Database::checkProhibitedDbState(DbState,string):void;3;1;1;visible;
543;Database::checkEnv():void;4;1;1;visible;
544;Database::invalidate():void;5;1;1;visible;
545;Database::checkWritable(string):void;3;1;1;visible;
546;Database::trace(Level,string,Transaction,DatabaseEntry,DatabaseEntry,LockMode):void;15;3;5;invisible;0;0;1;
547;Database::trace(Level,string,Transaction,CursorConfig):void;13;3;5;invisible;0;0;1;
548;Database::hasTriggers():boolean;2;1;1;visible;
549;Database::acquireTriggerListReadLock():void;6;2;2;visible;
550;Database::releaseTriggerListReadLock():void;3;1;2;visible;
551;Database::acquireTriggerListWriteLock():void;7;2;2;visible;
552;Database::releaseTriggerListWriteLock():void;6;2;2;visible;
553;Database::addTriger(DatabaseTrigger,boolean):void;9;1;1;visible;
554;Database::removeTrigger(DatabaseTrigger):void;6;1;1;visible;
555;Database::removeAllTriggers():void;8;1;1;visible;
556;Database::notifyTriggers(Locker,DatabaseEntry,DatabaseEntry,DatabaseEntry):void;9;2;3;invisible;1;0;0;
557;TransactionStats::getId():long;2;1;1;visible;
558;TransactionStats::getParentId():long;2;1;1;visible;
559;TransactionStats::getName():string;2;1;1;visible;
560;TransactionStats::toString():string;2;1;1;visible;
561;TransactionStats::getActiveTxns():Active[];2;1;1;visible;
562;TransactionStats::getLastCheckpointTime():long;2;1;1;visible;
563;TransactionStats::getLastTxnId():long;2;1;1;visible;
564;TransactionStats::getNAborts():int;2;1;1;visible;
565;TransactionStats::getNXAAborts():int;2;1;1;visible;
566;TransactionStats::getNXAPrepares():int;2;1;1;visible;
567;TransactionStats::getNActive():int;2;1;1;visible;
568;TransactionStats::getNBegins():int;2;1;1;visible;
569;TransactionStats::getNCommits():int;2;1;1;visible;
570;TransactionStats::getNXACommits():int;2;1;1;visible;
571;TransactionStats::setActiveTxns(Active[]):void;2;1;1;visible;
572;TransactionStats::setLastCheckpointTime(long):void;2;1;1;visible;
573;TransactionStats::setLastTxnId(long):void;2;1;1;visible;
574;TransactionStats::setNAborts(int):void;2;1;1;visible;
575;TransactionStats::setNXAAborts(int):void;2;1;1;visible;
576;TransactionStats::setNActive(int):void;2;1;1;visible;
577;TransactionStats::setNBegins(int):void;2;1;1;visible;
578;TransactionStats::setNCommits(int):void;2;1;1;visible;
579;TransactionStats::setNXACommits(int):void;2;1;1;visible;
580;TransactionStats::setNXAPrepares(int):void;2;1;1;visible;
581;TransactionStats::toString():string;17;1;1;visible;
582;VerifyConfig::setPropagateExceptions(boolean):void;2;1;1;visible;
583;VerifyConfig::getPropagateExceptions():boolean;2;1;1;visible;
584;VerifyConfig::setAggressive(boolean):void;2;1;1;visible;
585;VerifyConfig::getAggressive():boolean;2;1;1;visible;
586;VerifyConfig::setPrintInfo(boolean):void;2;1;1;visible;
587;VerifyConfig::getPrintInfo():boolean;2;1;1;visible;
588;VerifyConfig::setShowProgressStream(PrintStream):void;2;1;1;visible;
589;VerifyConfig::getShowProgressStream():PrintStream;2;1;1;visible;
590;VerifyConfig::setShowProgressInterval(int):void;2;1;1;visible;
591;VerifyConfig::getShowProgressInterval():int;2;1;1;visible;
592;VerifyConfig::toString():string;4;1;1;visible;
593;JoinConfig::setNoSort(boolean):void;2;1;1;visible;
594;JoinConfig::getNoSort():boolean;2;1;1;visible;
595;JoinConfig::cloneConfig():JoinConfig;4;1;1;visible;
596;RunRecoveryException::invalidate(EnvironmentImpl):void;3;1;1;visible;
597;RunRecoveryException::setAlreadyThrown():void;2;1;1;visible;
598;RunRecoveryException::toString():string;5;1;1;visible;
599;JEVersion::toString():string;2;1;1;visible;
600;JEVersion::getMajor():int;2;1;1;visible;
601;JEVersion::getMinor():int;2;1;1;visible;
602;JEVersion::getPatch():int;2;1;1;visible;
603;JEVersion::getNumericVersionString():string;6;1;1;visible;
604;JEVersion::getVersionString():string;9;1;1;visible;
605;Environment::applyFileConfig(File,EnvironmentMutableConfig):void;25;1;1;visible;
606;Environment::close():void;71;2;2;invisible;0;0;1;
607;Environment::openDatabase(Transaction,string,DatabaseConfig):Database;6;2;3;invisible;0;1;0;
608;Environment::openSecondaryDatabase(Transaction,string,Database,SecondaryConfig):SecondaryDatabase;6;2;3;invisible;0;1;0;
609;Environment::openDb(Transaction,Database,string,DatabaseConfig,boolean):void;65;4;12;invisible;1;0;0;
610;Environment::validateDbConfigAgainstEnv(DatabaseConfig,string):void;8;2;2;visible;
611;Environment::removeDatabase(Transaction,string):void;15;2;5;invisible;0;0;1;
612;Environment::renameDatabase(Transaction,string,string):void;16;2;5;invisible;0;0;1;
613;Environment::truncateDatabase(Transaction,string,boolean):long;18;2;5;invisible;0;0;1;
614;Environment::getMemoryUsage():long;4;1;2;visible;
615;Environment::getHome():File;3;1;1;visible;
616;Environment::getDefaultTxnConfig():TransactionConfig;2;1;2;visible;
617;Environment::copyToHandleConfig(EnvironmentMutableConfig,EnvironmentConfig):void;17;2;2;visible;
618;Environment::beginTransaction(Transaction,TransactionConfig):Transaction;40;1;2;visible;
619;Environment::checkpoint(CheckpointConfig):void;6;1;1;visible;
620;Environment::sync():void;7;1;1;visible;
621;Environment::cleanLog():int;4;1;2;visible;
622;Environment::evictMemory():void;4;1;2;visible;
623;Environment::compress():void;4;1;2;visible;
624;Environment::getConfig():EnvironmentConfig;6;1;1;visible;
625;Environment::setMutableConfig(EnvironmentMutableConfig):void;7;1;1;visible;
626;Environment::getMutableConfig():EnvironmentMutableConfig;5;1;1;visible;
627;Environment::upgrade():void;2;1;1;visible;
628;Environment::getStats(StatsConfig):EnvironmentStats;6;1;2;visible;
629;Environment::getLockStats(StatsConfig):LockStats;5;1;2;visible;
630;Environment::getTransactionStats(StatsConfig):TransactionStats;5;1;2;visible;
631;Environment::getDatabaseNames():List;4;1;1;visible;
632;Environment::verify(VerifyConfig,PrintStream):boolean;5;1;2;visible;
633;Environment::getThreadTransaction():Transaction;2;1;2;visible;
634;Environment::setThreadTransaction(Transaction):void;2;1;2;visible;
635;Environment::addReferringHandle(Database):void;2;1;1;visible;
636;Environment::addReferringHandle(Transaction):void;2;1;2;visible;
637;Environment::removeReferringHandle(Database):void;2;1;1;visible;
638;Environment::removeReferringHandle(Transaction):void;2;1;2;visible;
639;Environment::getEnvironmentImpl():EnvironmentImpl;2;1;1;visible;
640;Environment::checkHandleIsValid():void;3;1;1;visible;
641;Environment::checkEnv():void;5;1;1;visible;
642;DatabaseConfig::setAllowCreate(boolean):void;2;1;1;visible;
643;DatabaseConfig::getAllowCreate():boolean;2;1;1;visible;
644;DatabaseConfig::setExclusiveCreate(boolean):void;2;1;1;visible;
645;DatabaseConfig::getExclusiveCreate():boolean;2;1;1;visible;
646;DatabaseConfig::setSortedDuplicates(boolean):void;2;1;1;visible;
647;DatabaseConfig::getSortedDuplicates():boolean;2;1;1;visible;
648;DatabaseConfig::setTransactional(boolean):void;2;1;2;visible;
649;DatabaseConfig::getTransactional():boolean;2;1;2;visible;
650;DatabaseConfig::setReadOnly(boolean):void;2;1;1;visible;
651;DatabaseConfig::getReadOnly():boolean;2;1;1;visible;
652;DatabaseConfig::setNodeMaxEntries(int):void;2;1;1;visible;
653;DatabaseConfig::setNodeMaxDupTreeEntries(int):void;2;1;1;visible;
654;DatabaseConfig::getNodeMaxEntries():int;2;1;1;visible;
655;DatabaseConfig::getNodeMaxDupTreeEntries():int;2;1;1;visible;
656;DatabaseConfig::setBtreeComparator(Class):void;3;1;1;visible;
657;DatabaseConfig::getBtreeComparator():Comparator;2;1;1;visible;
658;DatabaseConfig::setOverrideBtreeComparator(boolean):void;2;1;1;visible;
659;DatabaseConfig::getOverrideBtreeComparator():boolean;2;1;1;visible;
660;DatabaseConfig::setDuplicateComparator(Class):void;3;1;1;visible;
661;DatabaseConfig::getDuplicateComparator():Comparator;2;1;1;visible;
662;DatabaseConfig::setOverrideDuplicateComparator(boolean):void;2;1;1;visible;
663;DatabaseConfig::getOverrideDuplicateComparator():boolean;2;1;1;visible;
664;DatabaseConfig::setUseExistingConfig(boolean):void;2;1;1;visible;
665;DatabaseConfig::getUseExistingConfig():boolean;2;1;1;visible;
666;DatabaseConfig::cloneConfig():DatabaseConfig;4;1;1;visible;
667;DatabaseConfig::validate(DatabaseConfig):void;17;2;3;invisible;1;0;0;
668;DatabaseConfig::genDatabaseConfigMismatchMessage(DatabaseConfig,boolean,boolean,boolean,boolean,boolean):string;15;2;4;invisible;1;0;0;
669;DatabaseConfig::validateComparator(Class,string):Comparator;10;1;1;visible;
670;ForeignKeyTrigger::triggerAdded(Database):void;1;1;1;visible;
671;ForeignKeyTrigger::triggerRemoved(Database):void;2;1;1;visible;
672;ForeignKeyTrigger::databaseUpdated(Database,Locker,DatabaseEntry,DatabaseEntry,DatabaseEntry):void;3;1;1;visible;
673;EnvironmentStats::EnvironmentStats();2;1;1;visible;
674;Sequence::Sequence(Database,Transaction,DatabaseEntry,SequenceConfig);61;3;9;invisible;1;0;0;
675;PreloadConfig::PreloadConfig();1;1;1;visible;
676;PreloadStatus::PreloadStatus(string);2;1;1;visible;
677;DatabaseEntry::DatabaseEntry();1;1;1;visible;
678;DatabaseEntry::DatabaseEntry(byte[]);4;1;1;visible;
679;DatabaseEntry::DatabaseEntry(byte[],int,int);4;1;1;visible;
680;EnvironmentMutableConfig::EnvironmentMutableConfig();2;1;1;visible;
681;EnvironmentMutableConfig::EnvironmentMutableConfig(Properties);5;1;1;visible;
682;EnvironmentConfig::EnvironmentConfig();2;1;1;visible;
683;EnvironmentConfig::EnvironmentConfig(Properties);2;1;1;visible;
684;LockNotGrantedException::LockNotGrantedException();2;1;1;visible;
685;LockNotGrantedException::LockNotGrantedException(Throwable);2;1;1;visible;
686;LockNotGrantedException::LockNotGrantedException(string);2;1;1;visible;
687;LockNotGrantedException::LockNotGrantedException(string,Throwable);2;1;1;visible;
688;DatabaseNotFoundException::DatabaseNotFoundException();2;1;1;visible;
689;DatabaseNotFoundException::DatabaseNotFoundException(Throwable);2;1;1;visible;
690;DatabaseNotFoundException::DatabaseNotFoundException(string);2;1;1;visible;
691;DatabaseNotFoundException::DatabaseNotFoundException(string,Throwable);2;1;1;visible;
692;CursorConfig::CursorConfig();1;1;1;visible;
693;ForeignKeyDeleteAction::ForeignKeyDeleteAction(string);2;1;1;visible;
694;TransactionConfig::TransactionConfig();1;1;1;visible;
695;SecondaryCursor::SecondaryCursor(SecondaryDatabase,Transaction,CursorConfig);4;2;3;invisible;0;1;0;
696;SecondaryCursor::SecondaryCursor(SecondaryCursor,boolean);4;1;1;visible;
697;Transaction::Transaction(Environment,Txn);6;1;1;visible;
698;SequenceStats::SequenceStats(int,int,long,long,long,long,long,int);9;1;1;visible;
699;LockMode::LockMode(string);2;1;1;visible;
700;StatsConfig::StatsConfig();1;1;1;visible;
701;PreloadStats::PreloadStats();2;1;1;visible;
702;JoinCursor::JoinCursor(Locker,Database,Cursor[],JoinConfig);37;1;1;visible;
703;SequenceConfig::SequenceConfig();1;1;1;visible;
704;XAEnvironment::XAEnvironment(File,EnvironmentConfig);2;1;1;visible;
705;OperationStatus::OperationStatus(string);2;1;1;visible;
706;Cursor::Cursor(Database,Transaction,CursorConfig);6;2;4;invisible;0;1;0;
707;Cursor::Cursor(Database,Locker,CursorConfig);6;1;1;visible;
708;Cursor::Cursor(DatabaseImpl,Locker,CursorConfig);4;1;1;visible;
709;Cursor::Cursor(Cursor,boolean);12;2;2;visible;
710;SecondaryConfig::SecondaryConfig();1;1;1;visible;
711;CheckpointConfig::CheckpointConfig();1;1;1;visible;
712;SecondaryTrigger::SecondaryTrigger(SecondaryDatabase);2;1;1;visible;
713;SecondaryDatabase::SecondaryDatabase(Environment,SecondaryConfig,Database);26;1;1;visible;
714;Database::Database.DbState(string);2;1;1;visible;
715;Database::Database(Environment);6;2;2;visible;
716;TransactionStats::TransactionStats();1;1;1;visible;
717;TransactionStats::TransactionStats.Active(string,long,long);4;1;1;visible;
718;DeadlockException::DeadlockException();2;1;1;visible;
719;DeadlockException::DeadlockException(Throwable);2;1;1;visible;
720;DeadlockException::DeadlockException(string);2;1;1;visible;
721;DeadlockException::DeadlockException(string,Throwable);2;1;1;visible;
722;VerifyConfig::VerifyConfig();1;1;1;visible;
723;JoinConfig::JoinConfig();1;1;1;visible;
724;RunRecoveryException::RunRecoveryException(EnvironmentImpl);3;1;1;visible;
725;RunRecoveryException::RunRecoveryException(EnvironmentImpl,Throwable);3;1;1;visible;
726;RunRecoveryException::RunRecoveryException(EnvironmentImpl,string);3;1;1;visible;
727;RunRecoveryException::RunRecoveryException(EnvironmentImpl,string,Throwable);3;1;1;visible;
728;JEVersion::JEVersion(int,int,int,string);5;1;1;visible;
729;Environment::Environment(File,EnvironmentConfig);38;2;2;visible;
730;Environment::Environment(File);21;1;1;visible;
731;DatabaseConfig::DatabaseConfig();1;1;1;visible;
732;DatabaseException::DatabaseException();2;1;1;visible;
733;DatabaseException::DatabaseException(Throwable);2;1;1;visible;
734;DatabaseException::DatabaseException(string);2;1;1;visible;
735;DatabaseException::DatabaseException(string,Throwable);2;1;1;visible;
736;ForeignKeyTrigger::ForeignKeyTrigger(SecondaryDatabase);2;1;1;visible;
737;DatabaseStats::DatabaseStats();1;1;1;visible;
738;DatabaseUtil::checkForNullParam(Object,string):void;3;1;1;visible;
739;DatabaseUtil::checkForNullDbt(DatabaseEntry,string,boolean):void;6;1;1;visible;
740;DatabaseUtil::checkForPartialKey(DatabaseEntry):void;3;1;1;visible;
741;SecondaryDatabase::notAllowedException():UnsupportedOperationException;2;1;1;visible;
742;DbInternal::dbInvalidate(Database):void;2;1;1;visible;
743;DbInternal::dbSetHandleLocker(Database,Locker):void;2;1;1;visible;
744;DbInternal::envGetEnvironmentImpl(Environment):EnvironmentImpl;2;1;1;visible;
745;DbInternal::newCursor(DatabaseImpl,Locker,CursorConfig):Cursor;2;1;1;visible;
746;DbInternal::position(Cursor,DatabaseEntry,DatabaseEntry,LockMode,boolean):OperationStatus;2;1;1;visible;
747;DbInternal::retrieveNext(Cursor,DatabaseEntry,DatabaseEntry,LockMode,GetMode):OperationStatus;2;1;1;visible;
748;DbInternal::advanceCursor(Cursor,DatabaseEntry,DatabaseEntry):boolean;2;1;1;visible;
749;DbInternal::getCursorImpl(Cursor):CursorImpl;2;1;1;visible;
750;DbInternal::dbGetDatabaseImpl(Database):DatabaseImpl;2;1;1;visible;
751;DbInternal::getSortedCursors(JoinCursor):Cursor[];2;1;1;visible;
752;DbInternal::setLoadPropertyFile(EnvironmentConfig,boolean):void;2;1;1;visible;
753;DbInternal::setCreateUP(EnvironmentConfig,boolean):void;2;1;1;visible;
754;DbInternal::getCreateUP(EnvironmentConfig):boolean;2;1;1;visible;
755;DbInternal::setCheckpointUP(EnvironmentConfig,boolean):void;2;1;1;visible;
756;DbInternal::getCheckpointUP(EnvironmentConfig):boolean;2;1;1;visible;
757;DbInternal::setTxnReadCommitted(EnvironmentConfig,boolean):void;2;1;1;visible;
758;DbInternal::getTxnReadCommitted(EnvironmentConfig):boolean;2;1;1;visible;
759;DbInternal::cloneConfig(EnvironmentConfig):EnvironmentConfig;2;1;1;visible;
760;DbInternal::cloneMutableConfig(EnvironmentMutableConfig):EnvironmentMutableConfig;2;1;1;visible;
761;DbInternal::checkImmutablePropsForEquality(EnvironmentMutableConfig,EnvironmentMutableConfig):void;2;1;1;visible;
762;DbInternal::copyMutablePropsTo(EnvironmentMutableConfig,EnvironmentMutableConfig):void;2;1;1;visible;
763;DbInternal::disableParameterValidation(EnvironmentMutableConfig):void;2;1;1;visible;
764;DbInternal::setUseExistingConfig(DatabaseConfig,boolean):void;2;1;1;visible;
765;DbInternal::databaseConfigValidate(DatabaseConfig,DatabaseConfig):void;2;1;1;visible;
766;DbInternal::getLocker(Transaction):Locker;2;1;2;visible;
767;DbInternal::getDefaultTxnConfig(Environment):TransactionConfig;2;1;2;visible;
768;DbInternal::getEnvironmentShell(File):Environment;10;1;1;visible;
769;RuntimeExceptionWrapper::getDetail():Throwable;2;1;1;visible;
770;RuntimeExceptionWrapper::getCause():Throwable;2;1;1;visible;
771;FastOutputStream::initBuffer(int,int):void;3;1;1;visible;
772;FastOutputStream::size():int;2;1;1;visible;
773;FastOutputStream::reset():void;2;1;1;visible;
774;FastOutputStream::write(int):void;2;1;1;visible;
775;FastOutputStream::write(byte[]):void;2;1;1;visible;
776;FastOutputStream::write(byte[],int,int):void;2;1;1;visible;
777;FastOutputStream::writeTo(OutputStream):void;2;1;1;visible;
778;FastOutputStream::toString():string;2;1;1;visible;
779;FastOutputStream::toString(string):string;2;1;1;visible;
780;FastOutputStream::toByteArray():byte[];7;1;1;visible;
781;FastOutputStream::writeFast(int):void;4;1;1;visible;
782;FastOutputStream::writeFast(byte[]):void;6;1;1;visible;
783;FastOutputStream::writeFast(byte[],int,int):void;6;1;1;visible;
784;FastOutputStream::getBufferBytes():byte[];2;1;1;visible;
785;FastOutputStream::getBufferOffset():int;2;1;1;visible;
786;FastOutputStream::getBufferLength():int;2;1;1;visible;
787;FastOutputStream::makeSpace(int):void;4;1;1;visible;
788;FastOutputStream::addSize(int):void;2;1;1;visible;
789;FastOutputStream::bump(int):void;6;1;1;visible;
790;FastInputStream::available():int;2;1;1;visible;
791;FastInputStream::markSupported():boolean;2;1;1;visible;
792;FastInputStream::mark(int):void;2;1;1;visible;
793;FastInputStream::reset():void;2;1;1;visible;
794;FastInputStream::skip(long):long;6;1;1;visible;
795;FastInputStream::read():int;2;1;1;visible;
796;FastInputStream::read(byte[]):int;2;1;1;visible;
797;FastInputStream::read(byte[],int,int):int;2;1;1;visible;
798;FastInputStream::readFast():int;2;1;1;visible;
799;FastInputStream::readFast(byte[]):int;2;1;1;visible;
800;FastInputStream::readFast(byte[],int,int):int;9;1;1;visible;
801;FastInputStream::getBufferBytes():byte[];2;1;1;visible;
802;FastInputStream::getBufferOffset():int;2;1;1;visible;
803;FastInputStream::getBufferLength():int;2;1;1;visible;
804;IOExceptionWrapper::getDetail():Throwable;2;1;1;visible;
805;IOExceptionWrapper::getCause():Throwable;2;1;1;visible;
806;RuntimeExceptionWrapper::RuntimeExceptionWrapper(Throwable);3;1;1;visible;
807;FastOutputStream::FastOutputStream();2;1;1;visible;
808;FastOutputStream::FastOutputStream(int);2;1;1;visible;
809;FastOutputStream::FastOutputStream(int,int);2;1;1;visible;
810;FastOutputStream::FastOutputStream(byte[]);3;1;1;visible;
811;FastOutputStream::FastOutputStream(byte[],int);3;1;1;visible;
812;FastInputStream::FastInputStream(byte[]);3;1;1;visible;
813;FastInputStream::FastInputStream(byte[],int,int);4;1;1;visible;
814;IOExceptionWrapper::IOExceptionWrapper(Throwable);3;1;1;visible;
815;UtfOps::getZeroTerminatedByteLength(byte[],int):int;5;1;1;visible;
816;UtfOps::getByteLength(char[]):int;2;1;1;visible;
817;UtfOps::getByteLength(char[],int,int):int;12;1;1;visible;
818;UtfOps::getCharLength(byte[]):int;2;1;1;visible;
819;UtfOps::getCharLength(byte[],int,int):int;14;1;1;visible;
820;UtfOps::bytesToChars(byte[],int,char[],int,int,boolean):int;23;1;1;visible;
821;UtfOps::charsToBytes(char[],int,byte[],int,int):void;13;1;1;visible;
822;UtfOps::bytesToString(byte[],int,int):string;7;1;1;visible;
823;UtfOps::stringToBytes(string):byte[];7;1;1;visible;
824;ExceptionUnwrapper::unwrap(Exception):Exception;8;1;1;visible;
825;ExceptionUnwrapper::unwrapAny(Throwable):Throwable;10;1;1;visible;
826;DbCompat::getInitializeLocking(EnvironmentConfig):boolean;2;1;1;visible;
827;DbCompat::getInitializeCDB(EnvironmentConfig):boolean;2;1;1;visible;
828;DbCompat::isTypeBtree(DatabaseConfig):boolean;2;1;1;visible;
829;DbCompat::isTypeHash(DatabaseConfig):boolean;2;1;1;visible;
830;DbCompat::isTypeQueue(DatabaseConfig):boolean;2;1;1;visible;
831;DbCompat::isTypeRecno(DatabaseConfig):boolean;2;1;1;visible;
832;DbCompat::getBtreeRecordNumbers(DatabaseConfig):boolean;2;1;1;visible;
833;DbCompat::getReadUncommitted(DatabaseConfig):boolean;2;1;1;visible;
834;DbCompat::getRenumbering(DatabaseConfig):boolean;2;1;1;visible;
835;DbCompat::getSortedDuplicates(DatabaseConfig):boolean;2;1;1;visible;
836;DbCompat::getUnsortedDuplicates(DatabaseConfig):boolean;2;1;1;visible;
837;DbCompat::cloneCursorConfig(CursorConfig):CursorConfig;5;1;1;visible;
838;DbCompat::getWriteCursor(CursorConfig):boolean;2;1;1;visible;
839;DbCompat::setWriteCursor(CursorConfig,boolean):void;3;1;1;visible;
840;DbCompat::setRecordNumber(DatabaseEntry,int):void;2;1;1;visible;
841;DbCompat::getRecordNumber(DatabaseEntry):int;2;1;1;visible;
842;DbCompat::getDatabaseFile(Database):string;2;1;1;visible;
843;DbCompat::getCurrentRecordNumber(Cursor,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
844;DbCompat::getSearchRecordNumber(Cursor,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
845;DbCompat::getSearchRecordNumber(SecondaryCursor,DatabaseEntry,DatabaseEntry,DatabaseEntry,LockMode):OperationStatus;2;1;1;visible;
846;DbCompat::putAfter(Cursor,DatabaseEntry,DatabaseEntry):OperationStatus;2;1;1;visible;
847;DbCompat::putBefore(Cursor,DatabaseEntry,DatabaseEntry):OperationStatus;2;1;1;visible;
848;DbCompat::append(Database,Transaction,DatabaseEntry,DatabaseEntry):OperationStatus;2;2;2;visible;
849;DbCompat::getThreadTransaction(Environment):Transaction;2;1;2;visible;
850;DbCompat::setInitializeCache(EnvironmentConfig,boolean):void;3;1;1;visible;
851;DbCompat::setInitializeLocking(EnvironmentConfig,boolean):void;3;1;1;visible;
852;DbCompat::setInitializeCDB(EnvironmentConfig,boolean):void;3;1;1;visible;
853;DbCompat::setLockDetectModeOldest(EnvironmentConfig):void;2;1;1;visible;
854;DbCompat::setSerializableIsolation(TransactionConfig,boolean):void;2;1;2;visible;
855;DbCompat::setBtreeComparator(DatabaseConfig,Comparator):void;2;1;1;visible;
856;DbCompat::setTypeBtree(DatabaseConfig):void;1;1;1;visible;
857;DbCompat::setTypeHash(DatabaseConfig):void;2;1;1;visible;
858;DbCompat::setTypeRecno(DatabaseConfig):void;2;1;1;visible;
859;DbCompat::setTypeQueue(DatabaseConfig):void;2;1;1;visible;
860;DbCompat::setBtreeRecordNumbers(DatabaseConfig,boolean):void;2;1;1;visible;
861;DbCompat::setReadUncommitted(DatabaseConfig,boolean):void;1;1;1;visible;
862;DbCompat::setRenumbering(DatabaseConfig,boolean):void;2;1;1;visible;
863;DbCompat::setSortedDuplicates(DatabaseConfig,boolean):void;2;1;1;visible;
864;DbCompat::setUnsortedDuplicates(DatabaseConfig,boolean):void;3;1;1;visible;
865;DbCompat::setRecordLength(DatabaseConfig,int):void;3;1;1;visible;
866;DbCompat::setRecordPad(DatabaseConfig,int):void;2;1;1;visible;
867;DbCompat::openDatabase(Environment,Transaction,string,string,DatabaseConfig):Database;2;2;3;invisible;0;1;0;
868;DbCompat::openSecondaryDatabase(Environment,Transaction,string,string,Database,SecondaryConfig):SecondaryDatabase;2;2;3;invisible;0;1;0;
869;DbCompat::makeDbName(string,string):string;8;1;1;visible;
870;DatabaseImpl::setDebugDatabaseName(string):void;2;1;1;visible;
871;DatabaseImpl::getDebugName():string;2;1;1;visible;
872;DatabaseImpl::setPendingDeletedHook(TestHook):void;2;1;1;visible;
873;DatabaseImpl::initDefaultSettings():void;8;1;1;visible;
874;DatabaseImpl::clone():Object;2;1;1;visible;
875;DatabaseImpl::getTree():Tree;2;1;1;visible;
876;DatabaseImpl::setTree(Tree):void;2;1;1;visible;
877;DatabaseImpl::getId():DatabaseId;2;1;1;visible;
878;DatabaseImpl::setId(DatabaseId):void;2;1;1;visible;
879;DatabaseImpl::getEofNodeId():long;2;1;1;visible;
880;DatabaseImpl::isTransactional():boolean;2;1;2;visible;
881;DatabaseImpl::setTransactional(boolean):void;2;1;2;visible;
882;DatabaseImpl::getSortedDuplicates():boolean;2;1;1;visible;
883;DatabaseImpl::getNodeMaxEntries():int;2;1;1;visible;
884;DatabaseImpl::getNodeMaxDupTreeEntries():int;2;1;1;visible;
885;DatabaseImpl::setDuplicateComparator(Comparator):void;2;1;1;visible;
886;DatabaseImpl::setBtreeComparator(Comparator):void;2;1;1;visible;
887;DatabaseImpl::getBtreeComparator():Comparator;2;1;1;visible;
888;DatabaseImpl::getDuplicateComparator():Comparator;2;1;1;visible;
889;DatabaseImpl::setEnvironmentImpl(EnvironmentImpl):void;4;1;1;visible;
890;DatabaseImpl::getDbEnvironment():EnvironmentImpl;2;1;1;visible;
891;DatabaseImpl::hasOpenHandles():boolean;2;1;1;visible;
892;DatabaseImpl::addReferringHandle(Database):void;2;1;1;visible;
893;DatabaseImpl::removeReferringHandle(Database):void;2;1;1;visible;
894;DatabaseImpl::getReferringHandleCount():int;2;1;1;visible;
895;DatabaseImpl::findPrimaryDatabase():Database;6;1;1;visible;
896;DatabaseImpl::getName():string;2;1;1;visible;
897;DatabaseImpl::isDeleted():boolean;2;1;2;visible;
898;DatabaseImpl::isDeleteFinished():boolean;2;1;2;visible;
899;DatabaseImpl::startDeleteProcessing():void;3;1;2;visible;
900;DatabaseImpl::finishedINListHarvest():void;3;1;2;visible;
901;DatabaseImpl::deleteAndReleaseINs():void;3;1;2;visible;
902;DatabaseImpl::releaseDeletedINs():void;39;2;4;invisible;0;0;1;
903;DatabaseImpl::checkIsDeleted(string):void;3;1;2;visible;
904;DatabaseImpl::processLSN(long,LogEntryType):void;3;1;1;visible;
905;DatabaseImpl::countRecords():long;8;1;1;visible;
906;DatabaseImpl::processLSN(long,LogEntryType):void;4;1;1;visible;
907;DatabaseImpl::getCount():long;2;1;1;visible;
908;DatabaseImpl::stat(StatsConfig):DatabaseStats;15;1;2;visible;
909;DatabaseImpl::verify(VerifyConfig,DatabaseStats):boolean;13;1;2;visible;
911;DatabaseImpl::getEmptyStats():DatabaseStats;2;1;2;visible;
912;DatabaseImpl::walkDatabaseTree(TreeWalkerStatsAccumulator,PrintStream,boolean):boolean;34;1;1;visible;
913;DatabaseImpl::printErrorRecord(PrintStream,DatabaseEntry,DatabaseEntry):void;19;1;1;visible;
914;DatabaseImpl::verifyNode(Node):void;1;1;2;visible;
915;DatabaseImpl::processIN(IN,Long,int):void;5;2;2;invisible;0;0;1;
916;DatabaseImpl::processBIN(BIN,Long,int):void;5;2;2;invisible;0;0;1;
917;DatabaseImpl::processDIN(DIN,Long,int):void;5;2;2;invisible;0;0;1;
918;DatabaseImpl::processDBIN(DBIN,Long,int):void;5;2;2;invisible;0;0;1;
919;DatabaseImpl::processDupCountLN(DupCountLN,Long):void;4;2;2;visible;
920;DatabaseImpl::tallyLevel(int,long[]):void;12;1;1;visible;
921;DatabaseImpl::incrementLNCount():void;6;1;1;visible;
922;DatabaseImpl::incrementDeletedLNCount():void;2;1;1;visible;
923;DatabaseImpl::getINNodeIdsSeen():Set;2;1;1;visible;
924;DatabaseImpl::getBINNodeIdsSeen():Set;2;1;1;visible;
925;DatabaseImpl::getDINNodeIdsSeen():Set;2;1;1;visible;
926;DatabaseImpl::getDBINNodeIdsSeen():Set;2;1;1;visible;
927;DatabaseImpl::getINsByLevel():long[];2;1;1;visible;
928;DatabaseImpl::getBINsByLevel():long[];2;1;1;visible;
929;DatabaseImpl::getDINsByLevel():long[];2;1;1;visible;
930;DatabaseImpl::getDBINsByLevel():long[];2;1;1;visible;
931;DatabaseImpl::getLNCount():long;2;1;1;visible;
932;DatabaseImpl::getDupCountLNCount():Set;2;1;1;visible;
933;DatabaseImpl::getDeletedLNCount():long;2;1;1;visible;
934;DatabaseImpl::getMainTreeMaxDepth():int;2;1;1;visible;
935;DatabaseImpl::getDuplicateTreeMaxDepth():int;2;1;1;visible;
936;DatabaseImpl::copyToStats(DatabaseStats):void;15;1;1;visible;
937;DatabaseImpl::getStatus():PreloadStatus;2;1;1;visible;
938;DatabaseImpl::processLSN(long,LogEntryType):void;18;3;3;visible;
939;DatabaseImpl::doWork(ChildReference):IN;3;1;1;visible;
940;DatabaseImpl::walk():void;3;1;1;visible;
941;DatabaseImpl::getRootIN(long):IN;2;1;1;visible;
942;DatabaseImpl::releaseRootIN(IN):void;2;1;2;visible;
943;DatabaseImpl::addToLsnINMap(Long,IN,int):void;3;1;1;visible;
944;DatabaseImpl::fetchLSN(long):Node;13;2;4;invisible;1;0;0;
945;DatabaseImpl::preload(PreloadConfig):void;28;4;12;invisible;1;0;0;
946;DatabaseImpl::dumpString(int):string;16;1;1;visible;
947;DatabaseImpl::getLogSize():int;2;1;1;visible;
948;DatabaseImpl::writeToLog(ByteBuffer):void;8;1;1;visible;
949;DatabaseImpl::readFromLog(ByteBuffer,byte):void;20;1;1;visible;
950;DatabaseImpl::dumpLog(StringBuffer,boolean):void;13;1;1;visible;
951;DatabaseImpl::logEntryIsTransactional():boolean;2;1;1;visible;
952;DatabaseImpl::getTransactionId():long;2;1;1;visible;
953;DatabaseImpl::getBinDeltaPercent():int;2;1;1;visible;
954;DatabaseImpl::getBinMaxDeltas():int;2;1;1;visible;
955;DbEnvPool::getEnvironment(File,EnvironmentConfig):EnvironmentImplInfo;2;1;1;visible;
956;DbEnvPool::getExistingEnvironment(File):EnvironmentImplInfo;2;1;1;visible;
957;DbEnvPool::getEnvironment(File,EnvironmentConfig,boolean):EnvironmentImplInfo;30;1;1;visible;
958;DbEnvPool::remove(File):void;2;1;1;visible;
959;DbEnvPool::clear():void;2;1;1;visible;
960;DbEnvPool::getEnvironmentMapKey(File):string;4;1;1;visible;
961;DbEnvState::toString():string;2;1;1;visible;
962;DbEnvState::checkState(DbEnvState[],DbEnvState):void;10;1;1;visible;
963;SortedLSNTreeWalker::extractINsForDb(INList):boolean;47;3;10;invisible;1;0;0;
964;SortedLSNTreeWalker::walk():void;2;1;1;visible;
965;SortedLSNTreeWalker::walkInternal():void;19;2;3;invisible;1;0;0;
966;SortedLSNTreeWalker::maybeGetMoreINs():void;17;1;1;visible;
967;SortedLSNTreeWalker::accumulateLSNs(IN):void;35;1;1;visible;
968;SortedLSNTreeWalker::fetchAndProcessLSN(long):void;6;1;1;visible;
969;SortedLSNTreeWalker::getRootIN(long):IN;2;1;1;visible;
970;SortedLSNTreeWalker::releaseRootIN(IN):void;3;1;1;visible;
971;SortedLSNTreeWalker::addToLsnINMap(Long,IN,int):void;1;1;1;visible;
972;SortedLSNTreeWalker::fetchLSN(long):Node;2;1;1;visible;
973;MemoryBudget::envConfigUpdate(DbConfigManager):void;8;1;1;visible;
974;MemoryBudget::reset(DbConfigManager):void;67;6;9;invisible;1;0;0;
975;MemoryBudget::initCacheMemoryUsage():void;5;2;3;visible;
976;MemoryBudget::calcTreeCacheUsage():long;15;2;6;invisible;1;0;0;
977;MemoryBudget::updateTreeMemoryUsage(long):void;6;2;3;visible;
978;MemoryBudget::updateMiscMemoryUsage(long):void;6;2;3;visible;
979;MemoryBudget::updateLockMemoryUsage(long,int):void;4;1;2;visible;
980;MemoryBudget::accumulateNewUsage(IN,long):long;2;1;2;visible;
981;MemoryBudget::refreshTreeMemoryUsage(long):void;3;1;2;visible;
982;MemoryBudget::getCacheMemoryUsage():long;8;1;2;visible;
983;MemoryBudget::getTreeMemoryUsage():long;2;1;2;visible;
984;MemoryBudget::getLogBufferBudget():long;2;1;1;visible;
985;MemoryBudget::getTrackerBudget():long;2;1;2;visible;
986;MemoryBudget::getMaxMemory():long;2;1;1;visible;
987;MemoryBudget::getCriticalThreshold():long;2;1;2;visible;
988;MemoryBudget::getCacheBudget():long;2;1;2;visible;
989;MemoryBudget::getINOverhead():long;2;1;2;visible;
990;MemoryBudget::getBINOverhead():long;2;1;2;visible;
991;MemoryBudget::getDINOverhead():long;2;1;2;visible;
992;MemoryBudget::getDBINOverhead():long;2;1;2;visible;
993;MemoryBudget::loadStats(StatsConfig,EnvironmentStats):void;2;1;2;visible;
994;TruncateResult::getDatabase():DatabaseImpl;2;1;1;visible;
995;TruncateResult::getRecordCount():int;2;1;1;visible;
996;EnvironmentImpl::envConfigUpdate(DbConfigManager):void;3;1;1;visible;
997;EnvironmentImpl::createDaemons():void;17;6;7;invisible;0;1;0;
998;EnvironmentImpl::runOrPauseDaemons(DbConfigManager):void;15;5;5;invisible;0;0;1;
999;EnvironmentImpl::getINCompressor():INCompressor;2;1;2;visible;
1000;EnvironmentImpl::getUtilizationTracker():UtilizationTracker;2;1;2;visible;
1001;EnvironmentImpl::getUtilizationProfile():UtilizationProfile;2;1;2;visible;
1002;EnvironmentImpl::logMapTreeRoot():void;6;2;3;invisible;0;0;1;
1003;EnvironmentImpl::rewriteMapTreeRoot(long):void;9;2;3;invisible;0;0;1;
1004;EnvironmentImpl::getRootLsn():long;2;1;1;visible;
1005;EnvironmentImpl::readMapTreeFromLog(long):void;10;2;4;invisible;1;0;0;
1006;EnvironmentImpl::addToCompressorQueue(BIN,Key,boolean):void;5;1;2;visible;
1007;EnvironmentImpl::addToCompressorQueue(BINReference,boolean):void;5;1;2;visible;
1008;EnvironmentImpl::addToCompressorQueue(Collection,boolean):void;5;1;2;visible;
1009;EnvironmentImpl::lazyCompress(IN):void;5;1;2;visible;
1010;EnvironmentImpl::initLogger(File):Logger;33;3;5;invisible;1;0;0;
1011;EnvironmentImpl::enableDebugLoggingToDbLog():void;6;1;2;visible;
1012;EnvironmentImpl::closeLogger():void;4;1;2;visible;
1013;EnvironmentImpl::open():void;2;1;1;visible;
1014;EnvironmentImpl::invalidate(RunRecoveryException):void;8;1;1;visible;
1015;EnvironmentImpl::isOpen():boolean;2;1;1;visible;
1016;EnvironmentImpl::isClosing():boolean;2;1;1;visible;
1017;EnvironmentImpl::isClosed():boolean;2;1;1;visible;
1018;EnvironmentImpl::mayNotWrite():boolean;2;1;1;visible;
1019;EnvironmentImpl::checkIfInvalid():void;4;1;1;visible;
1020;EnvironmentImpl::checkNotClosed():void;3;1;1;visible;
1021;EnvironmentImpl::close():void;3;1;1;visible;
1022;EnvironmentImpl::close(boolean):void;3;1;1;visible;
1023;EnvironmentImpl::doClose(boolean):void;68;5;6;invisible;0;0;1;
1024;EnvironmentImpl::closeAfterRunRecovery():void;11;1;1;visible;
1025;EnvironmentImpl::forceClose():void;3;1;1;visible;
1026;EnvironmentImpl::incReferenceCount():void;2;1;1;visible;
1027;EnvironmentImpl::checkLeaks():void;30;4;6;invisible;1;0;0;
1028;EnvironmentImpl::invokeCheckpoint(CheckpointConfig,boolean,string):boolean;6;1;1;visible;
1029;EnvironmentImpl::forceLogFileFlip():long;3;1;2;visible;
1030;EnvironmentImpl::invokeCompressor():boolean;6;1;2;visible;
1031;EnvironmentImpl::invokeEvictor():void;3;1;2;visible;
1032;EnvironmentImpl::invokeCleaner():int;7;1;2;visible;
1033;EnvironmentImpl::requestShutdownDaemons():void;11;4;4;visible;
1034;EnvironmentImpl::shutdownDaemons():void;31;4;5;visible;
1035;EnvironmentImpl::shutdownINCompressor():void;8;1;2;visible;
1036;EnvironmentImpl::shutdownEvictor():void;8;1;2;visible;
1037;EnvironmentImpl::shutdownCheckpointer():void;10;2;3;invisible;0;0;1;
1038;EnvironmentImpl::shutdownCleaner():void;7;1;2;visible;
1039;EnvironmentImpl::isNoLocking():boolean;2;1;1;visible;
1040;EnvironmentImpl::isTransactional():boolean;2;1;2;visible;
1041;EnvironmentImpl::isReadOnly():boolean;2;1;1;visible;
1042;EnvironmentImpl::createDb(Locker,string,DatabaseConfig,Database):DatabaseImpl;2;1;1;visible;
1043;EnvironmentImpl::getDb(Locker,string,Database):DatabaseImpl;2;1;1;visible;
1044;EnvironmentImpl::getDbNames():List;2;1;1;visible;
1045;EnvironmentImpl::dumpMapTree():void;2;1;1;visible;
1046;EnvironmentImpl::dbRename(Locker,string,string):void;2;1;2;visible;
1047;EnvironmentImpl::dbRemove(Locker,string):void;2;1;2;visible;
1048;EnvironmentImpl::truncate(Locker,DatabaseImpl):TruncateResult;2;1;2;visible;
1049;EnvironmentImpl::truncate(Locker,string,boolean):long;2;1;2;visible;
1050;EnvironmentImpl::txnBegin(Transaction,TransactionConfig):Txn;4;1;2;visible;
1051;EnvironmentImpl::getLogManager():LogManager;2;1;1;visible;
1052;EnvironmentImpl::getFileManager():FileManager;2;1;1;visible;
1053;EnvironmentImpl::getDbMapTree():DbTree;2;1;1;visible;
1054;EnvironmentImpl::getConfigManager():DbConfigManager;2;1;1;visible;
1055;EnvironmentImpl::cloneConfig():EnvironmentConfig;2;1;1;visible;
1056;EnvironmentImpl::cloneMutableConfig():EnvironmentMutableConfig;2;1;1;visible;
1057;EnvironmentImpl::checkImmutablePropsForEquality(EnvironmentConfig):void;2;1;1;visible;
1058;EnvironmentImpl::setMutableConfig(EnvironmentMutableConfig):void;17;1;1;visible;
1059;EnvironmentImpl::addConfigObserver(EnvConfigObserver):void;2;1;1;visible;
1060;EnvironmentImpl::removeConfigObserver(EnvConfigObserver):void;2;1;1;visible;
1061;EnvironmentImpl::getInMemoryINs():INList;2;1;1;visible;
1062;EnvironmentImpl::getTxnManager():TxnManager;2;1;1;visible;
1063;EnvironmentImpl::getCheckpointer():Checkpointer;2;1;1;visible;
1064;EnvironmentImpl::getCleaner():Cleaner;2;1;2;visible;
1065;EnvironmentImpl::getMemoryBudget():MemoryBudget;2;1;1;visible;
1066;EnvironmentImpl::getLogger():Logger;2;1;2;visible;
1067;EnvironmentImpl::verify(VerifyConfig,PrintStream):boolean;3;1;2;visible;
1068;EnvironmentImpl::verifyCursors():void;2;1;2;visible;
1069;EnvironmentImpl::loadStats(StatsConfig):EnvironmentStats;16;5;9;invisible;1;0;0;
1070;EnvironmentImpl::lockStat(StatsConfig):LockStats;2;1;2;visible;
1071;EnvironmentImpl::txnStat(StatsConfig):TransactionStats;2;1;2;visible;
1072;EnvironmentImpl::getINCompressorQueueSize():int;2;1;2;visible;
1073;EnvironmentImpl::getLastRecoveryInfo():RecoveryInfo;2;1;1;visible;
1074;EnvironmentImpl::getEnvironmentHome():File;2;1;1;visible;
1075;EnvironmentImpl::getTxnTimeout():long;2;1;1;visible;
1076;EnvironmentImpl::getLockTimeout():long;2;1;1;visible;
1077;EnvironmentImpl::getTriggerLatch():SharedLatch;2;1;2;visible;
1078;EnvironmentImpl::getEvictor():Evictor;2;1;2;visible;
1079;EnvironmentImpl::alertEvictor():void;3;1;2;visible;
1080;DbConfigManager::getEnvironmentConfig():EnvironmentConfig;2;1;1;visible;
1081;DbConfigManager::get(ConfigParam):string;2;1;1;visible;
1082;DbConfigManager::get(string):string;2;1;1;visible;
1083;DbConfigManager::getBoolean(BooleanConfigParam):boolean;4;1;1;visible;
1084;DbConfigManager::getShort(ShortConfigParam):short;9;1;1;visible;
1085;DbConfigManager::getInt(IntConfigParam):int;11;1;1;visible;
1086;DbConfigManager::getLong(LongConfigParam):long;11;1;1;visible;
1087;DbTree::getLastDbId():int;2;1;1;visible;
1088;DbTree::getNextDbId():int;2;1;1;visible;
1089;DbTree::setLastDbId(int):void;2;1;1;visible;
1090;DbTree::createLocker(EnvironmentImpl):Locker;5;2;2;invisible;0;0;1;
1091;DbTree::setEnvironmentImpl(EnvironmentImpl):void;4;1;1;visible;
1092;DbTree::createDb(Locker,string,DatabaseConfig,Database):DatabaseImpl;2;1;1;visible;
1093;DbTree::createDb(Locker,string,DatabaseConfig,Database,boolean):DatabaseImpl;33;2;4;invisible;0;0;1;
1094;DbTree::modifyDbRoot(DatabaseImpl):void;35;2;2;invisible;0;0;1;
1095;DbTree::doWork(ChildReference):IN;4;1;1;visible;
1096;DbTree::lockNameLN(Locker,string,string):NameLockResult;38;2;4;invisible;0;0;1;
1097;DbTree::dbRename(Locker,string,string):boolean;20;2;3;invisible;0;0;1;
1098;DbTree::dbRemove(Locker,string):void;21;2;3;invisible;0;0;1;
1099;DbTree::truncate(Locker,string,boolean):long;50;3;4;invisible;0;0;1;
1100;DbTree::deleteMapLN(DatabaseId):void;15;1;1;visible;
1101;DbTree::truncate(Locker,DatabaseImpl,boolean):TruncateResult;57;3;4;invisible;0;0;1;
1102;DbTree::getDb(Locker,string,Database):DatabaseImpl;2;1;1;visible;
1103;DbTree::getDb(Locker,string,Database,boolean):DatabaseImpl;31;3;5;invisible;0;1;0;
1104;DbTree::getDb(DatabaseId):DatabaseImpl;2;1;1;visible;
1105;DbTree::getDb(DatabaseId,long):DatabaseImpl;2;1;1;visible;
1106;DbTree::getDb(DatabaseId,long,Map):DatabaseImpl;7;1;1;visible;
1107;DbTree::getDb(DatabaseId,long,boolean,string):DatabaseImpl;47;3;5;invisible;0;0;1;
1108;DbTree::setDebugNameForDatabaseImpl(DatabaseImpl,string):void;9;1;1;visible;
1109;DbTree::rebuildINListMapDb():void;2;1;1;visible;
1110;DbTree::verify(VerifyConfig,PrintStream):boolean;53;3;6;invisible;1;0;0;
1111;DbTree::getDbName(DatabaseId):string;35;2;2;invisible;0;0;1;
1112;DbTree::getDbNames():List;26;1;1;visible;
1113;DbTree::isReservedDbName(string):boolean;5;1;1;visible;
1114;DbTree::getHighestLevel():int;10;1;1;visible;
1115;DbTree::doWork(ChildReference):IN;4;1;1;visible;
1116;DbTree::getRootLevel():int;2;1;1;visible;
1117;DbTree::getLogType():LogEntryType;2;1;1;visible;
1118;DbTree::marshallOutsideWriteLatch():boolean;2;1;1;visible;
1119;DbTree::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
1120;DbTree::getLogSize():int;5;1;1;visible;
1121;DbTree::writeToLog(ByteBuffer):void;7;1;1;visible;
1122;DbTree::postLogWork(long):void;1;1;1;visible;
1123;DbTree::readFromLog(ByteBuffer,byte):void;7;1;1;visible;
1124;DbTree::dumpLog(StringBuffer,boolean):void;10;1;1;visible;
1125;DbTree::logEntryIsTransactional():boolean;2;1;1;visible;
1126;DbTree::getTransactionId():long;2;1;1;visible;
1127;DbTree::dumpString(int):string;13;1;1;visible;
1128;DbTree::toString():string;2;1;1;visible;
1129;DbTree::dump():void;3;1;1;visible;
1130;INList::getINs():SortedSet;2;1;1;visible;
1131;INList::getSize():int;2;1;1;visible;
1132;INList::add(IN):void;34;2;6;invisible;1;0;0;
1133;INList::addAndSetMemory(Set,IN):void;8;2;2;visible;
1134;INList::removeLatchAlreadyHeld(IN):void;18;3;5;invisible;1;0;0;
1135;INList::remove(IN):void;7;2;3;invisible;0;0;1;
1136;INList::tailSet(IN):SortedSet;4;2;2;visible;
1137;INList::first():IN;4;2;2;visible;
1138;INList::iterator():Iterator;4;2;2;visible;
1139;INList::clear():void;13;3;4;visible;
1140;INList::dump():void;6;1;1;visible;
1141;INList::latchMajor():void;3;1;2;visible;
1142;INList::releaseMajorLatchIfHeld():void;3;1;2;visible;
1143;INList::releaseMajorLatch():void;6;1;2;visible;
1144;INList::dumpAddedINsIntoMajorSet():void;4;1;2;visible;
1145;INList::latchMinorAndDumpAddedINs():void;5;1;2;visible;
1146;INList::latchMinor():void;2;1;2;visible;
1147;INList::releaseMinorLatch():void;2;1;2;visible;
1148;GetMode::isForward():boolean;2;1;1;visible;
1149;GetMode::toString():string;2;1;1;visible;
1150;CursorImpl::hashCode():int;2;1;1;visible;
1151;CursorImpl::getTreeStatsAccumulator():TreeWalkerStatsAccumulator;5;1;1;visible;
1152;CursorImpl::incrementLNCount():void;4;1;1;visible;
1153;CursorImpl::setNonCloning(boolean):void;2;1;1;visible;
1154;CursorImpl::isExactSearch():boolean;2;1;1;visible;
1155;CursorImpl::isDataSearch():boolean;2;1;1;visible;
1156;CursorImpl::toString():string;2;1;1;visible;
1157;CursorImpl::setAllowEviction(boolean):void;2;1;2;visible;
1158;CursorImpl::cloneCursor(boolean):CursorImpl;2;1;1;visible;
1159;CursorImpl::cloneCursor(boolean,CursorImpl):CursorImpl;29;4;6;invisible;1;0;0;
1160;CursorImpl::getIndex():int;2;1;1;visible;
1161;CursorImpl::setIndex(int):void;2;1;1;visible;
1162;CursorImpl::getBIN():BIN;2;1;1;visible;
1163;CursorImpl::setBIN(BIN):void;2;1;1;visible;
1164;CursorImpl::getBINToBeRemoved():BIN;2;1;1;visible;
1165;CursorImpl::getDupIndex():int;2;1;1;visible;
1166;CursorImpl::setDupIndex(int):void;2;1;1;visible;
1167;CursorImpl::getDupBIN():DBIN;2;1;1;visible;
1168;CursorImpl::setDupBIN(DBIN):void;2;1;1;visible;
1169;CursorImpl::getDupBINToBeRemoved():DBIN;2;1;1;visible;
1170;CursorImpl::setTreeStatsAccumulator(TreeWalkerStatsAccumulator):void;2;1;1;visible;
1171;CursorImpl::setTargetBin():boolean;13;1;1;visible;
1172;CursorImpl::advanceCursor(DatabaseEntry,DatabaseEntry):boolean;24;1;1;visible;
1173;CursorImpl::latchBIN():BIN;11;2;6;invisible;0;0;1;
1174;CursorImpl::releaseBIN():void;3;1;2;visible;
1175;CursorImpl::latchBINs():void;3;1;2;visible;
1176;CursorImpl::releaseBINs():void;3;1;2;visible;
1177;CursorImpl::latchDBIN():DBIN;11;2;6;invisible;0;0;1;
1178;CursorImpl::releaseDBIN():void;3;1;2;visible;
1179;CursorImpl::getLocker():Locker;2;1;1;visible;
1180;CursorImpl::addCursor(BIN):void;5;2;2;invisible;0;0;1;
1181;CursorImpl::addCursor():void;5;1;1;visible;
1182;CursorImpl::updateBin(BIN,int):void;7;1;1;visible;
1183;CursorImpl::updateDBin(DBIN,int):void;4;1;1;visible;
1184;CursorImpl::removeCursor():void;3;1;1;visible;
1185;CursorImpl::removeCursorBIN():void;6;2;2;invisible;0;0;1;
1186;CursorImpl::removeCursorDBIN():void;6;2;2;invisible;0;0;1;
1187;CursorImpl::clearDupBIN(boolean):void;10;2;2;invisible;0;0;1;
1188;CursorImpl::dumpTree():void;2;1;1;visible;
1189;CursorImpl::isClosed():boolean;2;1;1;visible;
1190;CursorImpl::isNotInitialized():boolean;2;1;1;visible;
1191;CursorImpl::reset():void;13;2;2;visible;
1192;CursorImpl::close():void;11;2;2;visible;
1193;CursorImpl::count(LockType):int;35;2;6;invisible;1;0;0;
1194;CursorImpl::delete():OperationStatus;86;5;20;invisible;1;0;0;
1195;CursorImpl::dup(boolean):CursorImpl;10;1;1;visible;
1196;CursorImpl::evict():void;7;2;4;invisible;0;0;1;
1197;CursorImpl::lockNextKeyForInsert(DatabaseEntry,DatabaseEntry):void;39;2;6;invisible;1;0;0;
1198;CursorImpl::putLN(byte[],LN,boolean):OperationStatus;14;2;2;visible;
1199;CursorImpl::put(DatabaseEntry,DatabaseEntry,DatabaseEntry):OperationStatus;11;1;1;visible;
1200;CursorImpl::putNoOverwrite(DatabaseEntry,DatabaseEntry):OperationStatus;3;1;1;visible;
1201;CursorImpl::putNoDupData(DatabaseEntry,DatabaseEntry):OperationStatus;5;1;1;visible;
1202;CursorImpl::putCurrent(DatabaseEntry,DatabaseEntry,DatabaseEntry):OperationStatus;119;4;16;invisible;1;0;0;
1203;CursorImpl::getCurrent(DatabaseEntry,DatabaseEntry,LockType):OperationStatus;12;2;3;invisible;1;0;0;
1204;CursorImpl::getCurrentAlreadyLatched(DatabaseEntry,DatabaseEntry,LockType,boolean):OperationStatus;7;2;3;invisible;0;0;1;
1205;CursorImpl::getCurrentLN(LockType):LN;8;2;2;invisible;0;0;1;
1206;CursorImpl::getCurrentLNAlreadyLatched(LockType):LN;25;2;5;invisible;1;0;0;
1207;CursorImpl::getNext(DatabaseEntry,DatabaseEntry,LockType,boolean,boolean):OperationStatus;2;1;1;visible;
1208;CursorImpl::getNextWithKeyChangeStatus(DatabaseEntry,DatabaseEntry,LockType,boolean,boolean):KeyChangeStatus;102;3;14;invisible;1;0;0;
1209;CursorImpl::flushBINToBeRemoved():void;8;2;4;invisible;1;0;0;
1210;CursorImpl::getNextNoDup(DatabaseEntry,DatabaseEntry,LockType,boolean,boolean):OperationStatus;6;1;1;visible;
1211;CursorImpl::getFirstDuplicate(DatabaseEntry,DatabaseEntry,LockType):OperationStatus;9;1;1;visible;
1212;CursorImpl::getNextDuplicate(DatabaseEntry,DatabaseEntry,LockType,boolean,boolean):OperationStatus;89;5;17;invisible;1;0;0;
1213;CursorImpl::flushDBINToBeRemoved():void;8;2;4;invisible;1;0;0;
1214;CursorImpl::positionFirstOrLast(boolean,DIN):boolean;66;2;4;invisible;1;0;0;
1215;CursorImpl::searchAndPosition(DatabaseEntry,DatabaseEntry,SearchMode,LockType):int;78;2;3;invisible;1;0;0;
1216;CursorImpl::searchAndPositionBoth(boolean,Node,DatabaseEntry,boolean,LockType,long):int;55;2;2;invisible;0;0;1;
1217;CursorImpl::fetchCurrent(DatabaseEntry,DatabaseEntry,LockType,boolean):OperationStatus;85;3;11;invisible;1;0;0;
1218;CursorImpl::lockLN(LN,LockType):LockResult;9;1;1;visible;
1219;CursorImpl::lockLNDeletedAllowed(LN,LockType):LockResult;41;2;3;invisible;0;0;1;
1220;CursorImpl::lockDupCountLN(DIN,LockType):LockResult;29;2;4;invisible;0;0;1;
1221;CursorImpl::getLatchedDupRoot(boolean):DIN;23;2;6;invisible;1;0;0;
1222;CursorImpl::setDbt(DatabaseEntry,byte[]):void;20;1;1;visible;
1223;CursorImpl::verifyCursor(BIN):void;3;1;2;visible;
1224;CursorImpl::assertCursorState(boolean):boolean;5;1;1;visible;
1225;CursorImpl::checkCursorState(boolean):void;16;2;2;invisible;0;0;1;
1226;CursorImpl::revertLock(LN,LockResult):void;2;1;1;visible;
1227;CursorImpl::revertLock(long,LockGrantType):void;5;1;1;visible;
1228;CursorImpl::lockEofNode(LockType):void;3;1;1;visible;
1229;CursorImpl::checkEnv():void;2;1;1;visible;
1230;CursorImpl::getLockerPrev():CursorImpl;2;1;1;visible;
1231;CursorImpl::getLockerNext():CursorImpl;2;1;1;visible;
1232;CursorImpl::setLockerPrev(CursorImpl):void;2;1;1;visible;
1233;CursorImpl::setLockerNext(CursorImpl):void;2;1;1;visible;
1234;CursorImpl::dump(boolean):void;2;1;1;visible;
1235;CursorImpl::dump():void;2;1;1;visible;
1236;CursorImpl::statusToString(byte):string;6;1;1;visible;
1237;CursorImpl::dumpToString(boolean):string;12;1;1;visible;
1238;CursorImpl::getLockStats():LockStats;2;1;2;visible;
1239;CursorImpl::trace(Level,string,BIN,LN,int,long,long):void;18;2;3;visible;
1240;CursorImpl::setTestHook(TestHook):void;2;1;1;visible;
1241;CursorImpl::checkAlreadyLatched(boolean):boolean;7;1;2;visible;
1242;DatabaseId::getId():int;2;1;1;visible;
1243;DatabaseId::getBytes():byte[];4;1;1;visible;
1244;DatabaseId::equals(Object):boolean;6;1;1;visible;
1245;DatabaseId::hashCode():int;2;1;1;visible;
1246;DatabaseId::toString():string;2;1;1;visible;
1247;DatabaseId::compareTo(Object):int;10;1;1;visible;
1248;DatabaseId::getLogSize():int;2;1;1;visible;
1249;DatabaseId::writeToLog(ByteBuffer):void;2;1;1;visible;
1250;DatabaseId::readFromLog(ByteBuffer,byte):void;2;1;1;visible;
1251;DatabaseId::dumpLog(StringBuffer,boolean):void;4;1;1;visible;
1252;DatabaseId::logEntryIsTransactional():boolean;2;1;1;visible;
1253;DatabaseId::getTransactionId():long;2;1;1;visible;
1254;DatabaseImpl::DatabaseImpl(string,DatabaseId,EnvironmentImpl,DatabaseConfig);20;3;3;visible;
1255;DatabaseImpl::DatabaseImpl();10;2;2;visible;
1256;DatabaseImpl::DatabaseImpl.ObsoleteProcessor(UtilizationTracker);2;1;1;visible;
1257;DatabaseImpl::DatabaseImpl.StatsAccumulator(PrintStream,int,DatabaseStats);8;1;1;visible;
1258;DatabaseImpl::DatabaseImpl.HaltPreloadException(PreloadStatus);3;1;1;visible;
1259;DatabaseImpl::DatabaseImpl.PreloadProcessor(EnvironmentImpl,long,long,PreloadStats);6;2;3;visible;
1260;DatabaseImpl::DatabaseImpl.PreloadLSNTreeWalker.INEntry(IN,int);3;1;1;visible;
1261;DatabaseImpl::DatabaseImpl.PreloadLSNTreeWalker(DatabaseImpl,TreeNodeProcessor,PreloadConfig);3;1;1;visible;
1262;DbEnvPool::DbEnvPool();2;1;1;visible;
1263;DbEnvPool::DbEnvPool.EnvironmentImplInfo(EnvironmentImpl,boolean);3;1;1;visible;
1264;DbEnvState::DbEnvState(string);2;1;1;visible;
1265;SortedLSNTreeWalker::SortedLSNTreeWalker(DatabaseImpl,boolean,boolean,long,TreeNodeProcessor);13;1;1;visible;
1266;MemoryBudget::MemoryBudget(EnvironmentImpl,DbConfigManager);16;2;2;visible;
1267;TruncateResult::TruncateResult(DatabaseImpl,int);3;1;1;visible;
1268;EnvironmentImpl::EnvironmentImpl(File,EnvironmentConfig);84;5;9;invisible;0;0;1;
1269;DbConfigManager::DbConfigManager(EnvironmentConfig);2;1;1;visible;
1270;DbTree::DbTree();6;1;1;visible;
1271;DbTree::DbTree(EnvironmentImpl);5;1;1;visible;
1272;DbTree::DbTree.RewriteMapLN(CursorImpl);2;1;1;visible;
1273;DbTree::DbTree.RootLevel(DatabaseImpl);3;1;1;visible;
1274;DbConfigException::DbConfigException(Throwable);2;1;1;visible;
1275;DbConfigException::DbConfigException(string);2;1;1;visible;
1276;DbConfigException::DbConfigException(string,Throwable);2;1;1;visible;
1277;INList::INList(EnvironmentImpl);9;3;3;visible;
1278;INList::INList(INList,EnvironmentImpl);9;3;3;visible;
1279;GetMode::GetMode(string,boolean);3;1;1;visible;
1280;RangeRestartException::RangeRestartException();2;1;1;visible;
1281;CursorImpl::CursorImpl.SearchMode(boolean,boolean,string);4;1;1;visible;
1282;CursorImpl::CursorImpl.KeyChangeStatus(OperationStatus,boolean);3;1;1;visible;
1283;CursorImpl::CursorImpl(DatabaseImpl,Locker);2;1;1;visible;
1284;CursorImpl::CursorImpl(DatabaseImpl,Locker,boolean);20;1;1;visible;
1285;DatabaseId::DatabaseId(int);2;1;1;visible;
1286;DatabaseId::DatabaseId();1;1;1;visible;
1287;DatabaseImpl::serializeComparator(Comparator):string;5;1;1;visible;
1288;DatabaseImpl::instantiateComparator(Class,string):Comparator;7;1;1;visible;
1289;DbEnvPool::getInstance():DbEnvPool;2;1;1;visible;
1290;MemoryBudget::getRuntimeMaxMemory():long;8;1;1;visible;
1291;MemoryBudget::byteArraySize(int):int;7;1;2;visible;
1292;EnvironmentImpl::getThreadLocalReferenceCount():int;2;1;1;visible;
1293;EnvironmentImpl::incThreadLocalReferenceCount():void;2;1;1;visible;
1294;EnvironmentImpl::decThreadLocalReferenceCount():void;2;1;1;visible;
1295;EnvironmentImpl::getNoComparators():boolean;2;1;1;visible;
1296;EnvironmentImpl::getFairLatches():boolean;2;1;2;visible;
1297;EnvironmentImpl::maybeForceYield():boolean;5;1;1;visible;
1298;CursorImpl::getNextCursorId():long;2;1;1;visible;
1299;LastFileReader::initStartingPosition(long,Long):void;32;2;3;invisible;0;0;1;
1300;LastFileReader::attemptToMoveBadFile(DatabaseException):Long;14;1;1;visible;
1301;LastFileReader::setEndOfFile():void;2;1;1;visible;
1302;LastFileReader::getEndOfLog():long;2;1;1;visible;
1303;LastFileReader::getLastValidLsn():long;2;1;1;visible;
1304;LastFileReader::getPrevOffset():long;2;1;1;visible;
1305;LastFileReader::getEntryType():LogEntryType;2;1;1;visible;
1306;LastFileReader::setTargetType(LogEntryType):void;2;1;1;visible;
1307;LastFileReader::getLastSeen(LogEntryType):long;6;1;1;visible;
1308;LastFileReader::processEntry(ByteBuffer):boolean;8;1;1;visible;
1309;LastFileReader::readNextEntry():boolean;16;1;1;visible;
1310;StatsFileReader::processEntry(ByteBuffer):boolean;34;1;1;visible;
1311;StatsFileReader::summarize():void;64;1;1;visible;
1312;StatsFileReader::pad(string):string;7;1;1;visible;
1313;StatsFileReader::summarizeCheckpointInfo():void;75;1;1;visible;
1314;StatsFileReader::compare(Object,Object):int;11;1;1;visible;
1315;StatsFileReader::increment(FileReader,byte):void;23;1;1;visible;
1316;LogBufferPool::reset(DbConfigManager):void;37;2;4;invisible;1;0;0;
1317;LogBufferPool::getWriteBuffer(int,boolean):LogBuffer;15;1;1;visible;
1318;LogBufferPool::writeBufferToFile(int):void;58;2;11;invisible;1;0;0;
1319;LogBufferPool::writeCompleted(long,boolean):void;4;1;1;visible;
1320;LogBufferPool::getReadBuffer(long):LogBuffer;27;3;7;invisible;1;0;0;
1321;LogBufferPool::loadStats(StatsConfig,EnvironmentStats):void;23;2;7;invisible;1;0;0;
1322;ScavengerFileReader::setDumpCorruptedBounds(boolean):void;2;1;1;visible;
1323;ScavengerFileReader::setTargetType(LogEntryType):void;2;1;1;visible;
1324;ScavengerFileReader::processEntry(ByteBuffer):boolean;6;1;1;visible;
1325;ScavengerFileReader::processEntryCallback(LogEntry,LogEntryType):void;1;1;1;visible;
1326;ScavengerFileReader::readNextEntry():boolean;6;1;1;visible;
1327;ScavengerFileReader::resyncReader(long,boolean):boolean;29;1;1;visible;
1328;ScavengerFileReader::isTargetEntry(byte,byte):boolean;6;1;1;visible;
1329;SearchFileReader::isTargetEntry(byte,byte):boolean;2;1;1;visible;
1330;SearchFileReader::processEntry(ByteBuffer):boolean;3;1;1;visible;
1331;SearchFileReader::getLastObject():Object;2;1;1;visible;
1332;FileHandleSource::release():void;2;1;2;visible;
1333;JEFileFilter::matches(string):boolean;5;1;1;visible;
1334;JEFileFilter::accept(File,string):boolean;24;1;1;visible;
1335;FileReader::initStartingPosition(long,Long):void;33;1;1;visible;
1336;FileReader::setAlwaysValidateChecksum(boolean):void;2;1;2;visible;
1337;FileReader::getNumRead():int;2;1;1;visible;
1338;FileReader::getNRepeatIteratorReads():long;2;1;1;visible;
1339;FileReader::getLastLsn():long;2;1;1;visible;
1340;FileReader::readNextEntry():boolean;50;3;7;invisible;0;1;0;
1341;FileReader::resyncReader(long,boolean):boolean;3;1;1;visible;
1342;FileReader::getLogEntryInReadBuffer():void;70;2;2;invisible;0;0;1;
1343;FileReader::readHeader(ByteBuffer):void;14;1;1;visible;
1344;FileReader::startChecksum(ByteBuffer):void;8;1;2;visible;
1345;FileReader::validateChecksum(ByteBuffer):void;3;1;2;visible;
1346;FileReader::readData(int,boolean):ByteBuffer;31;1;1;visible;
1347;FileReader::adjustReadBufferSize(int):void;19;1;1;visible;
1348;FileReader::copyToSaveBuffer(int):void;23;1;1;visible;
1349;FileReader::fillReadBuffer(int):void;37;2;4;invisible;1;0;0;
1350;FileReader::isTargetEntry(byte,byte):boolean;2;1;1;visible;
1351;FileReader::processEntry(ByteBuffer):boolean;1;1;1;visible;
1352;FileReader::threadSafeBufferFlip(ByteBuffer):Buffer;5;1;1;visible;
1353;FileReader::threadSafeBufferPosition(ByteBuffer):int;5;1;1;visible;
1354;FileReader::threadSafeBufferPosition(ByteBuffer,int):Buffer;5;1;1;visible;
1355;FSyncManager::fsync():void;76;3;10;invisible;1;0;0;
1356;FSyncManager::getNFSyncRequests():long;2;1;2;visible;
1357;FSyncManager::getNFSyncs():long;2;1;2;visible;
1358;FSyncManager::getNTimeouts():long;2;1;2;visible;
1359;FSyncManager::loadStats(StatsConfig,EnvironmentStats):void;8;1;2;visible;
1360;FSyncManager::executeFSync():void;2;1;1;visible;
1361;FSyncManager::getLeader():boolean;9;1;1;visible;
1362;FSyncManager::waitForFsync():int;30;1;1;visible;
1363;FSyncManager::wakeupAll():void;3;1;1;visible;
1364;FSyncManager::wakeupOne():void;3;1;1;visible;
1365;INFileReader::addTargetType(LogEntryType):void;2;1;1;visible;
1366;INFileReader::isTargetEntry(byte,byte):boolean;59;2;5;invisible;1;0;0;
1367;INFileReader::processEntry(ByteBuffer):boolean;100;3;4;invisible;0;0;1;
1368;INFileReader::isObsoleteLsnAlreadyCounted(long,long):boolean;6;1;2;visible;
1369;INFileReader::getIN():IN;2;1;1;visible;
1370;INFileReader::getDatabaseId():DatabaseId;7;1;1;visible;
1371;INFileReader::getMaxNodeId():long;2;1;1;visible;
1372;INFileReader::getMaxDbId():int;2;1;1;visible;
1373;INFileReader::getMaxTxnId():long;2;1;2;visible;
1374;INFileReader::isDeleteInfo():boolean;2;1;1;visible;
1375;INFileReader::isDupDeleteInfo():boolean;2;1;1;visible;
1376;INFileReader::getDeletedNodeId():long;2;1;1;visible;
1377;INFileReader::getDeletedIdKey():byte[];2;1;1;visible;
1378;INFileReader::getDupDeletedNodeId():long;2;1;1;visible;
1379;INFileReader::getDupDeletedMainKey():byte[];2;1;1;visible;
1380;INFileReader::getDupDeletedDupKey():byte[];2;1;1;visible;
1381;INFileReader::getLsnOfIN():long;2;1;1;visible;
1382;INFileReader::getLogEntryType():LogEntryType;2;1;1;visible;
1383;LogEntryType::isNodeType():boolean;2;1;1;visible;
1384;LogEntryType::getSharedLogEntry():LogEntry;2;1;1;visible;
1385;LogEntryType::getNewLogEntry():LogEntry;4;1;1;visible;
1386;LogEntryType::getTypeNum():byte;2;1;1;visible;
1387;LogEntryType::getVersion():byte;2;1;1;visible;
1388;LogEntryType::toString():string;2;1;1;visible;
1389;LogEntryType::equalsType(byte,byte):boolean;2;1;1;visible;
1390;LogEntryType::equalsType(byte):boolean;2;1;1;visible;
1391;LogEntryType::equals(Object):boolean;8;1;1;visible;
1392;LogEntryType::hashCode():int;2;1;1;visible;
1393;TraceLogHandler::close():void;1;1;1;visible;
1394;TraceLogHandler::flush():void;1;1;1;visible;
1395;TraceLogHandler::publish(LogRecord):void;8;1;1;visible;
1396;FileHandle::getFile():RandomAccessFile;2;1;1;visible;
1397;FileHandle::isOldHeaderVersion():boolean;2;1;1;visible;
1398;FileHandle::latch():void;2;1;2;visible;
1399;FileHandle::latchNoWait():boolean;2;1;2;visible;
1400;FileHandle::release():void;2;1;2;visible;
1401;FileHandle::close():void;4;1;1;visible;
1402;LNFileReader::addTargetType(LogEntryType):void;2;1;1;visible;
1403;LNFileReader::isTargetEntry(byte,byte):boolean;9;1;1;visible;
1404;LNFileReader::processEntry(ByteBuffer):boolean;3;1;1;visible;
1405;LNFileReader::isLN():boolean;2;1;1;visible;
1406;LNFileReader::getLN():LN;2;1;1;visible;
1407;LNFileReader::getDatabaseId():DatabaseId;2;1;1;visible;
1408;LNFileReader::getKey():byte[];2;1;1;visible;
1409;LNFileReader::getDupTreeKey():byte[];2;1;1;visible;
1410;LNFileReader::getTxnId():Long;2;1;2;visible;
1411;LNFileReader::isPrepare():boolean;2;1;2;visible;
1412;LNFileReader::getTxnPrepareId():long;2;1;1;visible;
1413;LNFileReader::getTxnPrepareXid():Xid;2;1;1;visible;
1414;LNFileReader::isAbort():boolean;2;1;1;visible;
1415;LNFileReader::getTxnAbortId():long;2;1;1;visible;
1416;LNFileReader::getTxnCommitId():long;2;1;1;visible;
1417;LNFileReader::getNodeId():long;2;1;1;visible;
1418;LNFileReader::getAbortLsn():long;2;1;1;visible;
1419;LNFileReader::getAbortKnownDeleted():boolean;2;1;1;visible;
1420;FileManager::getModeValue():string;2;1;1;visible;
1421;FileManager::setLastPosition(long,long,long):void;7;1;1;visible;
1422;FileManager::saveLastPosition():void;6;1;1;visible;
1423;FileManager::restoreLastPosition():void;6;1;1;visible;
1424;FileManager::setSyncAtFileEnd(boolean):void;2;1;1;visible;
1425;FileManager::getFirstFileNum():Long;2;1;1;visible;
1426;FileManager::getReadOnly():boolean;2;1;1;visible;
1427;FileManager::getLastFileNum():Long;2;1;1;visible;
1428;FileManager::getCurrentFileNum():long;2;1;1;visible;
1429;FileManager::setIncludeDeletedFiles(boolean):void;2;1;1;visible;
1430;FileManager::getAllFileNumbers():Long[];7;1;1;visible;
1431;FileManager::getFollowingFileNum(long,boolean):Long;27;1;1;visible;
1432;FileManager::filesExist():boolean;3;1;1;visible;
1433;FileManager::getFileNum(boolean):Long;9;1;1;visible;
1434;FileManager::getNumFromName(string):Long;3;1;1;visible;
1435;FileManager::listFiles(string[]):string[];4;1;1;visible;
1436;FileManager::getFullFileNames(long):string[];9;1;1;visible;
1437;FileManager::getFullFileName(long,string):string;2;1;1;visible;
1438;FileManager::getFullFileName(string):string;2;1;1;visible;
1439;FileManager::renameFile(long,string):void;20;2;2;invisible;0;0;1;
1440;FileManager::deleteFile(long):void;9;2;3;invisible;1;0;0;
1441;FileManager::getFileHandle(long):FileHandle;39;4;14;invisible;1;0;0;
1442;FileManager::makeFileHandle(long,FileMode):FileHandle;48;1;1;visible;
1443;FileManager::closeFileInErrorCase(RandomAccessFile):void;5;1;1;visible;
1444;FileManager::readAndValidateFileHeader(RandomAccessFile,string,long):boolean;6;1;1;visible;
1445;FileManager::writeFileHeader(RandomAccessFile,string,FileHeader):void;26;1;1;visible;
1446;FileManager::getFileHeaderPrevOffset(long):long;4;1;1;visible;
1447;FileManager::getPrevEntryOffset():long;2;1;1;visible;
1448;FileManager::bumpLsn(long):boolean;22;1;1;visible;
1449;FileManager::writeLogBuffer(LogBuffer):void;49;2;4;invisible;0;0;1;
1450;FileManager::writeToFile(RandomAccessFile,ByteBuffer,long):int;50;5;6;invisible;1;0;0;
1451;FileManager::readFromFile(RandomAccessFile,ByteBuffer,long):void;34;5;5;invisible;0;0;1;
1452;FileManager::abortCommittedTxns(ByteBuffer):void;33;2;3;invisible;1;0;0;
1453;FileManager::syncLogEnd():void;4;1;1;visible;
1454;FileManager::syncLogEndAndFinishFile():void;4;1;1;visible;
1455;FileManager::groupSync():void;2;1;2;visible;
1456;FileManager::clear():void;8;3;4;invisible;0;0;1;
1457;FileManager::close():void;10;2;2;visible;
1458;FileManager::lockEnvironment(boolean,boolean):boolean;28;1;2;visible;
1459;FileManager::releaseExclusiveLock():void;5;1;2;visible;
1460;FileManager::checkEnvHomePermissions(boolean):boolean;5;1;1;visible;
1461;FileManager::truncateLog(long,long):void;8;1;1;visible;
1462;FileManager::forceNewLogFile():void;2;1;1;visible;
1463;FileManager::getNextLsn():long;2;1;1;visible;
1464;FileManager::getLastUsedLsn():long;2;1;1;visible;
1465;FileManager::getNFSyncs():long;2;1;2;visible;
1466;FileManager::getNFSyncRequests():long;2;1;2;visible;
1467;FileManager::getNFSyncTimeouts():long;2;1;2;visible;
1468;FileManager::loadStats(StatsConfig,EnvironmentStats):void;2;1;2;visible;
1469;FileManager::getCacheKeys():Set;2;1;2;visible;
1470;FileManager::clearFileCache(long):void;6;2;4;invisible;0;0;1;
1471;FileManager::get(Long):FileHandle;2;1;1;visible;
1472;FileManager::add(Long,FileHandle):void;30;2;3;invisible;0;0;1;
1473;FileManager::remove(long):void;13;2;3;invisible;0;0;1;
1474;FileManager::clear():void;12;2;3;invisible;0;0;1;
1475;FileManager::getCacheKeys():Set;2;1;1;visible;
1476;FileManager::getWritableFile(long):RandomAccessFile;12;1;1;visible;
1477;FileManager::force():void;18;1;1;visible;
1478;FileManager::close():void;19;1;1;visible;
1479;FileManager::generateRunRecoveryException(RandomAccessFile,ByteBuffer,long):void;19;1;1;visible;
1480;ChecksumValidator::reset():void;2;1;1;visible;
1481;ChecksumValidator::update(EnvironmentImpl,ByteBuffer,int,boolean):void;11;1;1;visible;
1482;ChecksumValidator::validate(EnvironmentImpl,long,long):void;3;1;1;visible;
1483;ChecksumValidator::validate(EnvironmentImpl,long,long,long,boolean):void;6;1;1;visible;
1484;LogUtils::getFormatId():int;2;1;1;visible;
1485;LogUtils::getGlobalTransactionId():byte[];2;1;1;visible;
1486;LogUtils::getBranchQualifier():byte[];2;1;1;visible;
1487;LogUtils::equals(Object):boolean;9;1;1;visible;
1488;LogUtils::hashCode():int;9;1;1;visible;
1489;LogUtils::compareByteArrays(byte[],byte[]):boolean;9;1;1;visible;
1490;LogUtils::toString():string;15;1;1;visible;
1491;SyncedLogManager::logItem(LoggableObject,boolean,boolean,boolean,long,boolean,ByteBuffer,UtilizationTracker):LogResult;3;3;4;invisible;0;1;0;
1492;SyncedLogManager::flushInternal():void;5;2;2;invisible;0;0;1;
1493;SyncedLogManager::getUnflushableTrackedSummary(long):TrackedFileSummary;3;2;3;invisible;0;0;1;
1494;SyncedLogManager::countObsoleteNode(long,LogEntryType):void;5;2;4;invisible;1;0;0;
1495;SyncedLogManager::countObsoleteNodes(TrackedFileSummary[]):void;5;2;4;invisible;1;0;0;
1496;SyncedLogManager::countObsoleteINs(List):void;3;2;3;invisible;0;0;1;
1497;FileSource::release():void;1;1;1;visible;
1498;FileSource::getBytes(long):ByteBuffer;7;1;1;visible;
1499;FileSource::getBytes(long,int):ByteBuffer;8;1;1;visible;
1500;CheckpointFileReader::isTargetEntry(byte,byte):boolean;15;1;1;visible;
1501;CheckpointFileReader::processEntry(ByteBuffer):boolean;3;1;1;visible;
1502;CheckpointFileReader::isRoot():boolean;2;1;1;visible;
1503;CheckpointFileReader::isCheckpointEnd():boolean;2;1;1;visible;
1504;CheckpointFileReader::isCheckpointStart():boolean;2;1;1;visible;
1505;DumpFileReader::isTargetEntry(byte,byte):boolean;6;1;1;visible;
1506;DumpFileReader::summarize():void;1;1;1;visible;
1507;CheckpointMonitor::recordLogWrite(int,LoggableObject):boolean;3;1;1;visible;
1508;CheckpointMonitor::activate():void;3;1;1;visible;
1509;LogManager::getChecksumOnRead():boolean;2;1;2;visible;
1510;LogManager::getLastLsnAtRecovery():long;2;1;1;visible;
1511;LogManager::setLastLsnAtRecovery(long):void;2;1;1;visible;
1512;LogManager::resetPool(DbConfigManager):void;2;1;1;visible;
1513;LogManager::logForceFlush(LoggableObject,boolean):long;6;2;3;invisible;0;1;0;
1514;LogManager::logForceFlip(LoggableObject):long;7;1;1;visible;
1515;LogManager::log(LoggableObject):long;7;1;1;visible;
1516;LogManager::log(LoggableObject,boolean,long):long;5;1;1;visible;
1517;LogManager::log(LoggableObject,boolean,boolean,boolean,boolean,long):long;48;4;9;invisible;1;0;0;
1518;LogManager::logItem(LoggableObject,boolean,boolean,boolean,long,boolean,ByteBuffer,UtilizationTracker):LogResult;1;2;2;visible;
1519;LogManager::logInternal(LoggableObject,boolean,boolean,boolean,long,boolean,ByteBuffer,UtilizationTracker):LogResult;107;5;15;invisible;1;0;0;
1520;LogManager::marshallIntoBuffer(LoggableObject,int,boolean,int):ByteBuffer;11;1;1;visible;
1521;LogManager::addPrevOffsetAndChecksum(ByteBuffer,long,int):ByteBuffer;12;1;1;visible;
1522;LogManager::putIntoBuffer(LoggableObject,int,long,boolean,int):ByteBuffer;3;1;1;visible;
1523;LogManager::writeHeader(ByteBuffer,LogEntryType,int,boolean):void;12;1;1;visible;
1524;LogManager::getLogEntry(long):LogEntry;11;1;1;visible;
1525;LogManager::getLogEntry(long,RandomAccessFile):LogEntry;2;1;1;visible;
1526;LogManager::getLogEntryFromLogSource(long,LogSource):LogEntry;61;3;4;invisible;0;0;1;
1527;LogManager::get(long):Object;3;1;1;visible;
1528;LogManager::getLogSource(long):LogSource;11;1;1;visible;
1529;LogManager::flush():void;5;1;1;visible;
1530;LogManager::flushInternal():void;1;1;1;visible;
1531;LogManager::loadStats(StatsConfig,EnvironmentStats):void;9;2;3;visible;
1532;LogManager::getUnflushableTrackedSummary(long):TrackedFileSummary;1;1;2;visible;
1533;LogManager::getUnflushableTrackedSummaryInternal(long):TrackedFileSummary;2;1;2;visible;
1534;LogManager::countObsoleteNode(long,LogEntryType):void;1;1;2;visible;
1535;LogManager::countObsoleteNodeInternal(UtilizationTracker,long,LogEntryType):void;2;1;2;visible;
1536;LogManager::countObsoleteNodes(TrackedFileSummary[]):void;1;1;2;visible;
1537;LogManager::countObsoleteNodesInternal(UtilizationTracker,TrackedFileSummary[]):void;4;1;2;visible;
1538;LogManager::countObsoleteINs(List):void;1;1;2;visible;
1539;LogManager::countObsoleteINsInternal(List):void;5;1;2;visible;
1540;LogManager::setReadHook(TestHook):void;2;1;1;visible;
1541;LatchedLogManager::logItem(LoggableObject,boolean,boolean,boolean,long,boolean,ByteBuffer,UtilizationTracker):LogResult;5;2;3;invisible;0;1;0;
1542;LatchedLogManager::flushInternal():void;6;1;1;visible;
1543;LatchedLogManager::getUnflushableTrackedSummary(long):TrackedFileSummary;5;1;2;visible;
1544;LatchedLogManager::countObsoleteNode(long,LogEntryType):void;6;1;2;visible;
1545;LatchedLogManager::countObsoleteNodes(TrackedFileSummary[]):void;6;1;2;visible;
1546;LatchedLogManager::countObsoleteINs(List):void;5;1;2;visible;
1547;LogBuffer::reinit():void;10;3;4;visible;
1548;LogBuffer::getFirstLsn():long;2;1;1;visible;
1549;LogBuffer::registerLsn(long):void;10;2;3;invisible;0;0;1;
1550;LogBuffer::hasRoom(int):boolean;2;1;1;visible;
1551;LogBuffer::getDataBuffer():ByteBuffer;2;1;1;visible;
1552;LogBuffer::getCapacity():int;2;1;1;visible;
1553;LogBuffer::containsLsn(long):boolean;13;2;3;invisible;0;0;1;
1554;LogBuffer::latchForWrite():void;2;1;2;visible;
1555;LogBuffer::release():void;2;1;2;visible;
1556;LogBuffer::getRewriteAllowed():boolean;2;1;2;visible;
1557;LogBuffer::setRewriteAllowed():void;2;1;2;visible;
1558;LogBuffer::getBytes(long):ByteBuffer;20;1;1;visible;
1559;LogBuffer::getBytes(long,int):ByteBuffer;5;1;1;visible;
1560;FileHeader::validate(string,long):boolean;4;1;1;visible;
1561;FileHeader::getLastEntryInPrevFileOffset():long;2;1;1;visible;
1562;FileHeader::getLogType():LogEntryType;2;1;1;visible;
1563;FileHeader::marshallOutsideWriteLatch():boolean;2;1;1;visible;
1564;FileHeader::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
1565;FileHeader::postLogWork(long):void;1;1;1;visible;
1566;FileHeader::getLogSize():int;2;1;1;visible;
1567;FileHeader::writeToLog(ByteBuffer):void;5;1;1;visible;
1568;FileHeader::readFromLog(ByteBuffer,byte):void;7;1;1;visible;
1569;FileHeader::dumpLog(StringBuffer,boolean):void;9;1;1;visible;
1570;FileHeader::logEntryIsTransactional():boolean;2;1;1;visible;
1571;FileHeader::getTransactionId():long;2;1;1;visible;
1572;FileHeader::toString():string;4;1;1;visible;
1573;PrintFileReader::processEntry(ByteBuffer):boolean;35;2;3;invisible;1;0;0;
1574;CleanerFileReader::addTargetType(byte,LogEntryType):void;2;1;1;visible;
1575;CleanerFileReader::initStartingPosition(long,Long):void;10;1;1;visible;
1576;CleanerFileReader::isTargetEntry(byte,byte):boolean;10;1;1;visible;
1577;CleanerFileReader::processEntry(ByteBuffer):boolean;3;1;1;visible;
1578;CleanerFileReader::isIN():boolean;2;1;1;visible;
1579;CleanerFileReader::isLN():boolean;2;1;1;visible;
1580;CleanerFileReader::isRoot():boolean;2;1;1;visible;
1581;CleanerFileReader::getLN():LN;2;1;1;visible;
1582;CleanerFileReader::getIN():IN;2;1;1;visible;
1583;CleanerFileReader::getDatabaseId():DatabaseId;7;1;1;visible;
1584;CleanerFileReader::getKey():byte[];2;1;1;visible;
1585;CleanerFileReader::getDupTreeKey():byte[];2;1;1;visible;
1586;DbChecksumException::DbChecksumException(EnvironmentImpl,string);2;1;1;visible;
1587;DbChecksumException::DbChecksumException(EnvironmentImpl,string,Throwable);2;1;1;visible;
1588;LastFileReader::LastFileReader(EnvironmentImpl,int);7;1;1;visible;
1589;LastFileReader::LastFileReader(EnvironmentImpl,int,Long);7;1;1;visible;
1590;StatsFileReader::StatsFileReader(EnvironmentImpl,int,long,long,string,string,boolean);9;1;1;visible;
1591;StatsFileReader::StatsFileReader.EntryInfo();6;1;1;visible;
1592;LogBufferPool::LogBufferPool(FileManager,EnvironmentImpl);12;2;3;invisible;1;0;0;
1593;ScavengerFileReader::ScavengerFileReader(EnvironmentImpl,int,long,long,long);9;1;1;visible;
1594;SearchFileReader::SearchFileReader(EnvironmentImpl,int,boolean,long,long,LogEntryType);4;1;1;visible;
1595;FileHandleSource::FileHandleSource(FileHandle,int,FileManager);3;1;1;visible;
1596;JEFileFilter::JEFileFilter(string[]);2;1;1;visible;
1597;FileReader::FileReader(EnvironmentImpl,int,boolean,long,Long,long,long);25;2;5;invisible;1;0;0;
1598;FSyncManager::FSyncManager(EnvironmentImpl);8;2;3;invisible;1;0;0;
1599;FSyncManager::FSyncManager.FSyncGroup(long,EnvironmentImpl);5;1;1;visible;
1600;INFileReader::INFileReader(EnvironmentImpl,int,long,long,boolean,boolean,long,Map);25;2;4;invisible;0;0;1;
1601;LogEntryType::LogEntryType(byte,byte);4;1;1;visible;
1602;LogEntryType::LogEntryType(byte,byte,string,LogEntry);6;1;1;visible;
1603;TraceLogHandler::TraceLogHandler(EnvironmentImpl);2;1;1;visible;
1604;FileHandle::FileHandle(RandomAccessFile,string,EnvironmentImpl,boolean);5;2;2;visible;
1605;LNFileReader::LNFileReader(EnvironmentImpl,int,long,boolean,long,long,Long);3;1;1;visible;
1606;FileManager::FileManager.FileMode(string);2;1;1;visible;
1607;FileManager::FileManager(EnvironmentImpl,File,boolean);34;6;8;invisible;1;0;0;
1608;FileManager::FileManager.FileCache(DbConfigManager);7;1;1;visible;
1609;ChecksumValidator::ChecksumValidator();2;1;1;visible;
1610;LogUtils::LogUtils.XidImpl(int,byte[],byte[]);4;1;1;visible;
1611;LogException::LogException(string);2;1;1;visible;
1612;LogException::LogException(string,Exception);2;1;1;visible;
1613;SyncedLogManager::SyncedLogManager(EnvironmentImpl,boolean);2;1;1;visible;
1614;FileSource::FileSource(RandomAccessFile,int,FileManager);4;1;1;visible;
1615;CheckpointFileReader::CheckpointFileReader(EnvironmentImpl,int,boolean,long,long,long);2;1;1;visible;
1616;DumpFileReader::DumpFileReader(EnvironmentImpl,int,long,long,string,string,boolean);23;2;3;visible;
1617;LogFileNotFoundException::LogFileNotFoundException(string);2;1;1;visible;
1618;CheckpointMonitor::CheckpointMonitor(EnvironmentImpl);8;1;1;visible;
1619;LogManager::LogManager(EnvironmentImpl,boolean);20;4;6;invisible;1;0;0;
1620;LogManager::LogManager.LogResult(long,boolean,boolean);6;3;5;visible;
1621;LatchedLogManager::LatchedLogManager(EnvironmentImpl,boolean);2;1;1;visible;
1622;LogBuffer::LogBuffer(int,EnvironmentImpl);8;4;4;visible;
1623;LogBuffer::LogBuffer(ByteBuffer,long);6;2;2;visible;
1624;FileHeader::FileHeader(long,long);6;1;1;visible;
1625;FileHeader::FileHeader();1;1;1;visible;
1626;PrintFileReader::PrintFileReader(EnvironmentImpl,int,long,long,string,string,boolean);2;1;1;visible;
1627;CleanerFileReader::CleanerFileReader(EnvironmentImpl,int,long,Long);25;2;3;invisible;1;0;0;
1628;CleanerFileReader::CleanerFileReader.EntryInfo(LogEntry,byte);3;1;1;visible;
1629;LogEntryType::isNodeType(byte,byte):boolean;2;1;1;visible;
1630;LogEntryType::findType(byte,byte):LogEntryType;4;1;1;visible;
1631;LogEntryType::getAllTypes():Set;5;1;1;visible;
1632;LogEntryType::setProvisional(byte):byte;2;1;1;visible;
1633;LogEntryType::clearProvisional(byte):byte;2;1;1;visible;
1634;LogEntryType::isProvisional(byte):boolean;2;1;1;visible;
1635;LogEntryType::isValidType(byte):boolean;2;1;1;visible;
1636;FileManager::listFiles(File,string[]):string[];4;1;1;visible;
1637;FileManager::getFileName(long,string):string;4;1;1;visible;
1638;FileManager::firstLogEntryOffset():int;2;1;1;visible;
1639;LogUtils::writeUnsignedInt(ByteBuffer,long):void;5;1;1;visible;
1640;LogUtils::getUnsignedInt(ByteBuffer):long;6;1;1;visible;
1641;LogUtils::writeShort(ByteBuffer,short):void;5;1;1;visible;
1642;LogUtils::readShort(ByteBuffer):short;2;1;1;visible;
1643;LogUtils::writeInt(ByteBuffer,int):void;9;1;1;visible;
1644;LogUtils::readInt(ByteBuffer):int;6;1;1;visible;
1645;LogUtils::getIntLogSize():int;2;1;1;visible;
1646;LogUtils::writeIntMSB(ByteBuffer,int):void;9;1;1;visible;
1647;LogUtils::readIntMSB(ByteBuffer):int;6;1;1;visible;
1648;LogUtils::writeLong(ByteBuffer,long):void;17;1;1;visible;
1649;LogUtils::readLong(ByteBuffer):long;10;1;1;visible;
1650;LogUtils::getLongLogSize():int;2;1;1;visible;
1651;LogUtils::writeByteArray(ByteBuffer,byte[]):void;6;1;1;visible;
1652;LogUtils::readByteArray(ByteBuffer):byte[];11;1;1;visible;
1653;LogUtils::getByteArrayLogSize(byte[]):int;2;1;1;visible;
1654;LogUtils::writeString(ByteBuffer,string):void;2;1;1;visible;
1655;LogUtils::readString(ByteBuffer):string;2;1;1;visible;
1656;LogUtils::getStringLogSize(string):int;2;1;1;visible;
1657;LogUtils::writeTimestamp(ByteBuffer,Timestamp):void;2;1;1;visible;
1658;LogUtils::readTimestamp(ByteBuffer):Timestamp;3;1;1;visible;
1659;LogUtils::getTimestampLogSize():int;2;1;1;visible;
1660;LogUtils::writeBoolean(ByteBuffer,boolean):void;3;1;1;visible;
1661;LogUtils::readBoolean(ByteBuffer):boolean;3;1;1;visible;
1662;LogUtils::getBooleanLogSize():int;2;1;1;visible;
1663;LogUtils::dumpBoolean(ByteBuffer,StringBuffer,string):boolean;12;1;1;visible;
1664;LogUtils::getXidSize(Xid):int;9;1;1;visible;
1665;LogUtils::writeXid(ByteBuffer,Xid):void;14;1;1;visible;
1666;LogUtils::readXid(ByteBuffer):Xid;13;1;1;visible;
1667;FileHeader::entrySize():int;6;1;1;visible;
1668;LockManager::envConfigUpdate(DbConfigManager):void;3;1;1;visible;
1669;LockManager::getLockTableIndex(Long):int;2;1;1;visible;
1670;LockManager::getLockTableIndex(long):int;2;1;1;visible;
1671;LockManager::lock(long,Locker,LockType,long,boolean,DatabaseImpl):LockGrantType;60;2;2;invisible;0;0;1;
1672;LockManager::attemptLock(Long,Locker,LockType,boolean):LockAttemptResult;1;1;1;visible;
1673;LockManager::attemptLockInternal(Long,Locker,LockType,boolean,int):LockAttemptResult;25;3;4;invisible;0;0;1;
1674;LockManager::makeTimeoutMsg(string,Locker,long,LockType,LockGrantType,Lock,long,long,long,DatabaseImpl):string;1;1;1;visible;
1675;LockManager::makeTimeoutMsgInternal(string,Locker,long,LockType,LockGrantType,Lock,long,long,long,DatabaseImpl):string;34;1;1;visible;
1676;LockManager::release(long,Locker):boolean;2;1;1;visible;
1677;LockManager::release(Lock,Locker):boolean;2;1;1;visible;
1678;LockManager::release(long,Lock,Locker,boolean):boolean;16;1;1;visible;
1679;LockManager::releaseAndFindNotifyTargets(long,Lock,Locker,boolean):Set;1;1;1;visible;
1680;LockManager::releaseAndFindNotifyTargetsInternal(long,Lock,Locker,boolean,int):Set;24;2;2;invisible;0;0;1;
1681;LockManager::transfer(long,Locker,Locker,boolean):void;1;1;1;visible;
1682;LockManager::transferInternal(long,Locker,Locker,boolean,int):void;8;1;1;visible;
1683;LockManager::transferMultiple(long,Locker,Locker[]):void;1;1;1;visible;
1684;LockManager::transferMultipleInternal(long,Locker,Locker[],int):void;7;1;1;visible;
1685;LockManager::demote(long,Locker):void;1;1;1;visible;
1686;LockManager::demoteInternal(long,Locker,int):void;5;1;1;visible;
1687;LockManager::isLocked(Long):boolean;1;1;1;visible;
1688;LockManager::isLockedInternal(Long,int):boolean;6;1;1;visible;
1689;LockManager::isOwner(Long,Locker,LockType):boolean;1;1;1;visible;
1690;LockManager::isOwnerInternal(Long,Locker,LockType,int):boolean;6;1;1;visible;
1691;LockManager::isWaiter(Long,Locker):boolean;1;1;1;visible;
1692;LockManager::isWaiterInternal(Long,Locker,int):boolean;6;1;1;visible;
1693;LockManager::nWaiters(Long):int;1;1;1;visible;
1694;LockManager::nWaitersInternal(Long,int):int;6;1;1;visible;
1695;LockManager::nOwners(Long):int;1;1;1;visible;
1696;LockManager::nOwnersInternal(Long,int):int;6;1;1;visible;
1697;LockManager::getWriteOwnerLocker(Long):Locker;1;1;1;visible;
1698;LockManager::getWriteOwnerLockerInternal(Long,int):Locker;10;1;1;visible;
1699;LockManager::validateOwnership(Long,Locker,LockType,boolean,MemoryBudget):boolean;1;1;1;visible;
1700;LockManager::validateOwnershipInternal(Long,Locker,LockType,boolean,MemoryBudget,int):boolean;8;1;1;visible;
1701;LockManager::lockStat(StatsConfig):LockStats;16;2;4;invisible;1;0;0;
1702;LockManager::dumpLockTable(LockStats):void;1;2;2;visible;
1703;LockManager::dumpLockTableInternal(LockStats,int):void;20;2;6;invisible;1;0;0;
1704;LockManager::dump():void;2;1;1;visible;
1705;LockManager::dumpToString():string;9;2;3;invisible;0;0;1;
1706;LockManager::dumpToStringNoLatch(StringBuffer,int):void;10;1;1;visible;
1707;LockManager::checkNoLatchesHeld(boolean):boolean;6;1;2;visible;
1708;LockManager::findDeadlock(Lock,Locker):StringBuffer;8;1;1;visible;
1709;LockManager::findDeadlock1(Set,Lock,Locker):StringBuffer;31;1;1;visible;
1710;SyncedLockManager::attemptLock(Long,Locker,LockType,boolean):LockAttemptResult;5;2;3;invisible;1;0;0;
1711;SyncedLockManager::makeTimeoutMsg(string,Locker,long,LockType,LockGrantType,Lock,long,long,long,DatabaseImpl):string;5;2;3;invisible;1;0;0;
1712;SyncedLockManager::releaseAndFindNotifyTargets(long,Lock,Locker,boolean):Set;8;2;3;invisible;1;0;0;
1713;SyncedLockManager::transfer(long,Locker,Locker,boolean):void;5;2;3;invisible;1;0;0;
1714;SyncedLockManager::transferMultiple(long,Locker,Locker[]):void;5;2;3;invisible;1;0;0;
1715;SyncedLockManager::demote(long,Locker):void;5;2;3;invisible;1;0;0;
1716;SyncedLockManager::isLocked(Long):boolean;5;2;3;invisible;1;0;0;
1717;SyncedLockManager::isOwner(Long,Locker,LockType):boolean;5;2;3;invisible;1;0;0;
1718;SyncedLockManager::isWaiter(Long,Locker):boolean;5;2;3;invisible;1;0;0;
1719;SyncedLockManager::nWaiters(Long):int;5;2;3;invisible;1;0;0;
1720;SyncedLockManager::nOwners(Long):int;5;2;3;invisible;1;0;0;
1721;SyncedLockManager::getWriteOwnerLocker(Long):Locker;5;2;3;invisible;1;0;0;
1722;SyncedLockManager::validateOwnership(Long,Locker,LockType,boolean,MemoryBudget):boolean;5;2;3;invisible;1;0;0;
1723;SyncedLockManager::dumpLockTable(LockStats):void;4;3;4;invisible;0;1;0;
1724;TxnCommit::getLogType():LogEntryType;2;1;1;visible;
1725;TxnCommit::getTagName():string;2;1;1;visible;
1726;LockInfo::setLocker(Locker):void;2;1;1;visible;
1727;LockInfo::getLocker():Locker;2;1;1;visible;
1728;LockInfo::setLockType(LockType):void;2;1;1;visible;
1729;LockInfo::getLockType():LockType;2;1;1;visible;
1730;LockInfo::clone():Object;2;1;1;visible;
1731;LockInfo::dump():void;2;1;1;visible;
1732;LockInfo::toString():string;13;1;1;visible;
1733;TxnAbort::getLogType():LogEntryType;2;1;1;visible;
1734;TxnAbort::getTagName():string;2;1;1;visible;
1735;LockConflict::getAllowed():boolean;2;1;1;visible;
1736;LockConflict::getRestart():boolean;2;1;1;visible;
1737;Txn::init(EnvironmentImpl,TransactionConfig):void;39;2;3;invisible;1;0;0;
1738;Txn::generateId(TxnManager):long;2;1;1;visible;
1739;Txn::getLastLsn():long;2;1;1;visible;
1740;Txn::setPrepared(boolean):void;5;1;1;visible;
1741;Txn::setSuspended(boolean):void;5;1;1;visible;
1742;Txn::isSuspended():boolean;2;1;1;visible;
1743;Txn::lockInternal(long,LockType,boolean,DatabaseImpl):LockResult;17;1;1;visible;
1744;Txn::prepare(Xid):int;14;1;1;visible;
1745;Txn::commit(Xid):void;4;1;1;visible;
1746;Txn::abort(Xid):void;4;1;1;visible;
1747;Txn::commit():long;2;1;1;visible;
1748;Txn::commit(byte):long;90;6;7;invisible;0;0;1;
1749;Txn::abort(boolean):long;2;1;1;visible;
1750;Txn::abortInternal(boolean,boolean):long;53;4;5;invisible;0;0;1;
1751;Txn::undo():void;36;5;5;invisible;0;1;0;
1752;Txn::clearWriteLocks():int;9;1;1;visible;
1753;Txn::clearReadLocks():int;10;1;1;visible;
1754;Txn::addLogInfo(long):void;9;1;1;visible;
1755;Txn::getFirstActiveLsn():long;3;1;1;visible;
1756;Txn::markDeleteAtTxnEnd(DatabaseImpl,boolean):void;12;2;5;invisible;0;0;1;
1757;Txn::setDeletedDatabaseState(boolean):void;7;1;2;visible;
1758;Txn::cleanupDatabaseImpls(boolean):void;12;1;2;visible;
1759;Txn::addLock(Long,Lock,LockType,LockGrantType):void;21;2;6;invisible;0;0;1;
1760;Txn::addReadLock(Lock):void;10;2;3;invisible;0;0;1;
1761;Txn::removeLock(long,Lock):void;13;2;3;invisible;0;0;1;
1762;Txn::moveWriteToReadLock(long,Lock):void;9;2;2;invisible;0;0;1;
1763;Txn::updateMemoryUsage(int):void;6;1;2;visible;
1764;Txn::getAccumulatedDelta():int;2;1;2;visible;
1765;Txn::createdNode(long):boolean;8;1;1;visible;
1766;Txn::getAbortLsn(long):long;9;1;1;visible;
1767;Txn::getWriteLockInfo(long):WriteLockInfo;6;1;1;visible;
1768;Txn::isTransactional():boolean;2;1;1;visible;
1769;Txn::isSerializableIsolation():boolean;2;1;1;visible;
1770;Txn::isReadCommittedIsolation():boolean;2;1;1;visible;
1771;Txn::getTxnLocker():Txn;2;1;1;visible;
1772;Txn::newNonTxnLocker():Locker;2;1;1;visible;
1773;Txn::releaseNonTxnLocks():void;1;1;1;visible;
1774;Txn::operationEnd():void;1;1;1;visible;
1775;Txn::operationEnd(boolean):void;1;1;1;visible;
1776;Txn::setHandleLockOwner(boolean,Database,boolean):void;22;1;1;visible;
1777;Txn::registerCursor(CursorImpl):void;7;1;1;visible;
1778;Txn::unRegisterCursor(CursorImpl):void;12;1;1;visible;
1779;Txn::isHandleLockTransferrable():boolean;2;1;1;visible;
1780;Txn::checkCursorsForClose():boolean;7;1;1;visible;
1781;Txn::collectStats(LockStats):LockStats;7;1;2;visible;
1782;Txn::setOnlyAbortable():void;3;1;1;visible;
1783;Txn::getOnlyAbortable():boolean;2;1;1;visible;
1784;Txn::checkState(boolean):void;13;1;1;visible;
1785;Txn::close(boolean):void;10;1;1;visible;
1786;Txn::getLogSize():int;3;1;1;visible;
1787;Txn::writeToLog(ByteBuffer):void;4;1;1;visible;
1788;Txn::readFromLog(ByteBuffer,byte):void;3;1;1;visible;
1789;Txn::dumpLog(StringBuffer,boolean):void;6;1;1;visible;
1790;Txn::getTransactionId():long;2;1;1;visible;
1791;Txn::logEntryIsTransactional():boolean;2;1;1;visible;
1792;Txn::transferHandleLockToHandleSet(Long,Set):void;16;1;1;visible;
1793;Txn::traceCommit(int,int):void;11;3;3;visible;
1794;Txn::getInMemorySize():int;2;1;1;visible;
1795;Locker::generateId(TxnManager):long;1;1;1;visible;
1796;Locker::getId():long;2;1;1;visible;
1797;Locker::getDefaultNoWait():boolean;2;1;1;visible;
1798;Locker::getLockTimeout():long;2;1;1;visible;
1799;Locker::setLockTimeout(long):void;2;1;1;visible;
1800;Locker::setTxnTimeout(long):void;3;1;1;visible;
1801;Locker::isReadUncommittedDefault():boolean;2;1;1;visible;
1802;Locker::getWaitingFor():Lock;2;1;1;visible;
1803;Locker::setWaitingFor(Lock):void;2;1;1;visible;
1804;Locker::setOnlyAbortable():void;2;1;1;visible;
1805;Locker::checkState(boolean):void;1;1;1;visible;
1806;Locker::lockInternal(long,LockType,boolean,DatabaseImpl):LockResult;1;1;1;visible;
1807;Locker::lock(long,LockType,boolean,DatabaseImpl):LockResult;7;1;1;visible;
1808;Locker::nonBlockingLock(long,LockType,DatabaseImpl):LockResult;2;1;1;visible;
1809;Locker::releaseLock(long):void;6;1;1;visible;
1810;Locker::demoteLock(long):void;4;1;1;visible;
1811;Locker::isTransactional():boolean;1;1;2;visible;
1812;Locker::isSerializableIsolation():boolean;1;1;1;visible;
1813;Locker::isReadCommittedIsolation():boolean;1;1;1;visible;
1814;Locker::getTxnLocker():Txn;1;1;2;visible;
1815;Locker::newNonTxnLocker():Locker;1;1;1;visible;
1816;Locker::releaseNonTxnLocks():void;1;1;1;visible;
1817;Locker::sharesLocksWith(Locker):boolean;6;1;1;visible;
1818;Locker::operationEnd():void;1;1;1;visible;
1819;Locker::operationEnd(boolean):void;1;1;1;visible;
1820;Locker::setHandleLockOwner(boolean,Database,boolean):void;1;1;1;visible;
1821;Locker::operationEnd(OperationStatus):void;2;1;1;visible;
1822;Locker::registerCursor(CursorImpl):void;1;1;1;visible;
1823;Locker::unRegisterCursor(CursorImpl):void;1;1;1;visible;
1824;Locker::getAbortLsn(long):long;1;1;1;visible;
1825;Locker::getWriteLockInfo(long):WriteLockInfo;1;1;1;visible;
1826;Locker::markDeleteAtTxnEnd(DatabaseImpl,boolean):void;1;1;2;visible;
1827;Locker::addDeleteInfo(BIN,Key):void;11;1;2;visible;
1828;Locker::addLock(Long,Lock,LockType,LockGrantType):void;1;1;1;visible;
1829;Locker::createdNode(long):boolean;1;1;1;visible;
1830;Locker::removeLock(long,Lock):void;1;1;1;visible;
1831;Locker::moveWriteToReadLock(long,Lock):void;1;1;1;visible;
1832;Locker::collectStats(LockStats):LockStats;1;1;2;visible;
1833;Locker::isTimedOut():boolean;6;1;1;visible;
1834;Locker::getTxnTimeOut():long;2;1;1;visible;
1835;Locker::getTxnStartMillis():long;2;1;1;visible;
1836;Locker::unregisterHandle(Database):void;7;1;1;visible;
1837;Locker::addToHandleMaps(Long,Database):void;17;1;1;visible;
1838;Locker::isHandleLockTransferrable():boolean;2;1;1;visible;
1839;Locker::transferHandleLockToHandle(Database):void;5;1;1;visible;
1840;Locker::transferHandleLock(Database,Locker,boolean):void;25;1;1;visible;
1841;Locker::rememberHandleWriteLock(Long):void;2;1;1;visible;
1842;Locker::toString():string;4;1;1;visible;
1843;Locker::dumpLockTable():void;2;1;1;visible;
1844;DummyLockManager::attemptLock(Long,Locker,LockType,boolean):LockAttemptResult;2;1;1;visible;
1845;DummyLockManager::makeTimeoutMsg(string,Locker,long,LockType,LockGrantType,Lock,long,long,long,DatabaseImpl):string;2;1;1;visible;
1846;DummyLockManager::releaseAndFindNotifyTargets(long,Lock,Locker,boolean):Set;2;1;1;visible;
1847;DummyLockManager::transfer(long,Locker,Locker,boolean):void;1;1;1;visible;
1848;DummyLockManager::transferMultiple(long,Locker,Locker[]):void;1;1;1;visible;
1849;DummyLockManager::demote(long,Locker):void;1;1;1;visible;
1850;DummyLockManager::isLocked(Long):boolean;2;1;1;visible;
1851;DummyLockManager::isOwner(Long,Locker,LockType):boolean;2;1;1;visible;
1852;DummyLockManager::isWaiter(Long,Locker):boolean;2;1;1;visible;
1853;DummyLockManager::nWaiters(Long):int;2;1;1;visible;
1854;DummyLockManager::nOwners(Long):int;2;1;1;visible;
1855;DummyLockManager::getWriteOwnerLocker(Long):Locker;2;1;1;visible;
1856;DummyLockManager::validateOwnership(Long,Locker,LockType,boolean,MemoryBudget):boolean;2;1;1;visible;
1857;DummyLockManager::dumpLockTable(LockStats):void;1;2;2;visible;
1858;TxnEnd::getId():long;2;1;1;visible;
1859;TxnEnd::getLastLsn():long;2;1;1;visible;
1860;TxnEnd::getTagName():string;1;1;1;visible;
1861;TxnEnd::getLogType():LogEntryType;1;1;1;visible;
1862;TxnEnd::marshallOutsideWriteLatch():boolean;2;1;1;visible;
1863;TxnEnd::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
1864;TxnEnd::postLogWork(long):void;1;1;1;visible;
1865;TxnEnd::getLogSize():int;3;1;1;visible;
1866;TxnEnd::writeToLog(ByteBuffer):void;4;1;1;visible;
1867;TxnEnd::readFromLog(ByteBuffer,byte):void;4;1;1;visible;
1868;TxnEnd::dumpLog(StringBuffer,boolean):void;7;1;1;visible;
1869;TxnEnd::logEntryIsTransactional():boolean;2;1;1;visible;
1870;TxnEnd::getTransactionId():long;2;1;1;visible;
1871;Lock::getNodeId():Long;2;1;1;visible;
1872;Lock::addWaiterToEndOfList(LockInfo,MemoryBudget,int):void;12;2;2;visible;
1873;Lock::addWaiterToHeadOfList(LockInfo,MemoryBudget,int):void;9;2;2;visible;
1874;Lock::getWaitersListClone():List;7;1;1;visible;
1875;Lock::flushWaiter(Locker,MemoryBudget,int):void;13;2;3;invisible;0;0;1;
1876;Lock::addOwner(LockInfo,MemoryBudget,int):void;9;2;2;visible;
1877;Lock::getOwnersClone():Set;10;1;1;visible;
1878;Lock::flushOwner(LockInfo,MemoryBudget,int):boolean;13;2;3;invisible;1;0;0;
1879;Lock::flushOwner(Locker,MemoryBudget,int):LockInfo;17;2;3;invisible;1;0;0;
1880;Lock::getOwnerLockInfo(Locker):LockInfo;10;1;1;visible;
1881;Lock::isOwner(Locker,LockType):boolean;10;1;1;visible;
1882;Lock::isOwnedWriteLock(Locker):boolean;3;1;1;visible;
1883;Lock::isWaiter(Locker):boolean;11;1;1;visible;
1884;Lock::nWaiters():int;7;1;1;visible;
1885;Lock::nOwners():int;7;1;1;visible;
1886;Lock::lock(LockType,Locker,boolean,MemoryBudget,int):LockGrantType;53;1;1;visible;
1887;Lock::release(Locker,MemoryBudget,int):Set;55;2;2;invisible;0;0;1;
1888;Lock::tryLock(LockInfo,boolean,MemoryBudget,int):LockGrantType;76;1;1;visible;
1889;Lock::rangeInsertConflict(Locker):boolean;19;1;1;visible;
1890;Lock::demote(Locker):void;6;1;1;visible;
1891;Lock::transfer(Locker,Locker,MemoryBudget,int):LockType;35;2;3;invisible;1;0;0;
1892;Lock::setNewLocker(LockInfo,Locker):LockType;4;1;1;visible;
1893;Lock::transferMultiple(Locker,Locker[],MemoryBudget,int):LockType;47;1;1;visible;
1894;Lock::cloneLockInfo(LockInfo,Locker,Locker[],MemoryBudget,int):LockInfo;13;1;1;visible;
1895;Lock::getWriteOwnerLocker():Locker;19;1;1;visible;
1896;Lock::validateRequest(Locker):boolean;11;1;1;visible;
1897;Lock::toString():string;20;1;1;visible;
1898;ReadCommittedLocker::newNonTxnLocker():Locker;2;1;1;visible;
1899;ReadCommittedLocker::lockInternal(long,LockType,boolean,DatabaseImpl):LockResult;5;1;1;visible;
1900;ReadCommittedLocker::releaseLock(long):void;3;1;1;visible;
1901;ReadCommittedLocker::createdNode(long):boolean;2;1;1;visible;
1902;ReadCommittedLocker::getAbortLsn(long):long;2;1;1;visible;
1903;ReadCommittedLocker::getWriteLockInfo(long):WriteLockInfo;2;1;1;visible;
1904;ReadCommittedLocker::addDeleteInfo(BIN,Key):void;2;1;2;visible;
1905;ReadCommittedLocker::registerCursor(CursorImpl):void;2;1;1;visible;
1906;ReadCommittedLocker::unRegisterCursor(CursorImpl):void;2;1;1;visible;
1907;ReadCommittedLocker::isTransactional():boolean;2;1;1;visible;
1908;ReadCommittedLocker::isReadCommittedIsolation():boolean;2;1;1;visible;
1909;BasicLocker::generateId(TxnManager):long;2;1;1;visible;
1910;BasicLocker::checkState(boolean):void;2;1;1;visible;
1911;BasicLocker::lockInternal(long,LockType,boolean,DatabaseImpl):LockResult;12;1;1;visible;
1912;BasicLocker::getWriteOwnerLocker(long):Locker;2;1;1;visible;
1913;BasicLocker::getOwnerAbortLsn(long):long;5;1;1;visible;
1914;BasicLocker::isTransactional():boolean;2;1;1;visible;
1915;BasicLocker::isSerializableIsolation():boolean;2;1;1;visible;
1916;BasicLocker::isReadCommittedIsolation():boolean;2;1;1;visible;
1917;BasicLocker::getTxnLocker():Txn;2;1;2;visible;
1918;BasicLocker::newNonTxnLocker():Locker;2;1;1;visible;
1919;BasicLocker::releaseNonTxnLocks():void;2;1;1;visible;
1920;BasicLocker::operationEnd():void;2;1;1;visible;
1921;BasicLocker::operationEnd(boolean):void;21;2;2;visible;
1922;BasicLocker::setHandleLockOwner(boolean,Database,boolean):void;6;1;1;visible;
1923;BasicLocker::registerCursor(CursorImpl):void;1;1;1;visible;
1924;BasicLocker::unRegisterCursor(CursorImpl):void;1;1;1;visible;
1925;BasicLocker::getAbortLsn(long):long;2;1;1;visible;
1926;BasicLocker::getWriteLockInfo(long):WriteLockInfo;2;1;1;visible;
1927;BasicLocker::markDeleteAtTxnEnd(DatabaseImpl,boolean):void;3;1;2;visible;
1928;BasicLocker::addLock(Long,Lock,LockType,LockGrantType):void;10;1;1;visible;
1929;BasicLocker::removeLock(long,Lock):void;5;1;1;visible;
1930;BasicLocker::createdNode(long):boolean;2;1;1;visible;
1931;BasicLocker::moveWriteToReadLock(long,Lock):void;1;1;1;visible;
1932;BasicLocker::collectStats(LockStats):LockStats;15;1;2;visible;
1933;LatchedLockManager::attemptLock(Long,Locker,LockType,boolean):LockAttemptResult;7;1;1;visible;
1934;LatchedLockManager::makeTimeoutMsg(string,Locker,long,LockType,LockGrantType,Lock,long,long,long,DatabaseImpl):string;7;1;1;visible;
1935;LatchedLockManager::releaseAndFindNotifyTargets(long,Lock,Locker,boolean):Set;10;1;1;visible;
1936;LatchedLockManager::transfer(long,Locker,Locker,boolean):void;7;1;1;visible;
1937;LatchedLockManager::transferMultiple(long,Locker,Locker[]):void;7;1;1;visible;
1938;LatchedLockManager::demote(long,Locker):void;7;1;1;visible;
1939;LatchedLockManager::isLocked(Long):boolean;7;1;1;visible;
1940;LatchedLockManager::isOwner(Long,Locker,LockType):boolean;7;1;1;visible;
1941;LatchedLockManager::isWaiter(Long,Locker):boolean;7;1;1;visible;
1942;LatchedLockManager::nWaiters(Long):int;7;1;1;visible;
1943;LatchedLockManager::nOwners(Long):int;7;1;1;visible;
1944;LatchedLockManager::getWriteOwnerLocker(Long):Locker;7;1;1;visible;
1945;LatchedLockManager::validateOwnership(Long,Locker,LockType,boolean,MemoryBudget):boolean;7;1;1;visible;
1946;LatchedLockManager::dumpLockTable(LockStats):void;6;2;3;invisible;0;1;0;
1947;WriteLockInfo::getAbortKnownDeleted():boolean;2;1;1;visible;
1948;WriteLockInfo::getAbortLsn():long;2;1;1;visible;
1949;TxnPrepare::getXid():Xid;2;1;1;visible;
1950;TxnPrepare::getLogType():LogEntryType;2;1;1;visible;
1951;TxnPrepare::getTagName():string;2;1;1;visible;
1952;TxnPrepare::getLogSize():int;5;1;1;visible;
1953;TxnPrepare::writeToLog(ByteBuffer):void;4;1;1;visible;
1954;TxnPrepare::readFromLog(ByteBuffer,byte):void;4;1;1;visible;
1955;TxnPrepare::dumpLog(StringBuffer,boolean):void;7;1;1;visible;
1956;AutoTxn::operationEnd(boolean):void;6;1;1;visible;
1957;AutoTxn::operationEnd():void;2;1;1;visible;
1958;AutoTxn::setHandleLockOwner(boolean,Database,boolean):void;5;1;1;visible;
1959;ThreadLocker::checkState(boolean):void;3;1;1;visible;
1960;ThreadLocker::newNonTxnLocker():Locker;3;1;1;visible;
1961;ThreadLocker::sharesLocksWith(Locker):boolean;7;1;1;visible;
1962;LockType::isWriteLock():boolean;2;1;1;visible;
1963;LockType::setCausesRestart():void;2;1;1;visible;
1964;LockType::getCausesRestart():boolean;2;1;1;visible;
1965;LockType::getConflict(LockType):LockConflict;2;1;1;visible;
1966;LockType::getUpgrade(LockType):LockUpgrade;4;1;1;visible;
1967;LockType::toString():string;2;1;1;visible;
1968;LockUpgrade::getIllegal():boolean;2;1;1;visible;
1969;LockUpgrade::getUpgrade():LockType;2;1;1;visible;
1970;LockUpgrade::getPromotion():boolean;2;1;1;visible;
1971;TxnManager::setLastTxnId(long):void;2;1;2;visible;
1972;TxnManager::getLastTxnId():long;2;1;2;visible;
1973;TxnManager::incTxnId():long;2;1;2;visible;
1974;TxnManager::txnBegin(Transaction,TransactionConfig):Txn;4;1;2;visible;
1975;TxnManager::getLockManager():LockManager;2;1;1;visible;
1976;TxnManager::registerTxn(Txn):void;8;2;4;visible;
1977;TxnManager::unRegisterTxn(Txn,boolean):void;17;3;7;invisible;1;0;0;
1978;TxnManager::registerXATxn(Xid,Txn,boolean):void;8;3;4;invisible;0;0;1;
1979;TxnManager::unRegisterXATxn(Xid,boolean):void;10;3;4;visible;
1980;TxnManager::getTxnFromXid(Xid):Txn;2;1;2;visible;
1981;TxnManager::setTxnForThread(Transaction):void;3;1;2;visible;
1982;TxnManager::unsetTxnForThread():Transaction;3;1;2;visible;
1983;TxnManager::getTxnForThread():Transaction;2;1;2;visible;
1984;TxnManager::XARecover():Xid[];5;1;2;visible;
1985;TxnManager::areOtherSerializableTransactionsActive(Locker):boolean;3;1;2;visible;
1986;TxnManager::getFirstActiveLsn():long;19;2;6;invisible;1;0;0;
1987;TxnManager::txnStat(StatsConfig):TransactionStats;28;2;6;invisible;1;0;0;
1988;TxnManager::lockStat(StatsConfig):LockStats;2;1;2;visible;
1989;BuddyLocker::getBuddy():Locker;2;1;1;visible;
1990;BuddyLocker::getTxnLocker():Txn;2;1;2;visible;
1991;BuddyLocker::newNonTxnLocker():Locker;2;1;1;visible;
1992;BuddyLocker::releaseNonTxnLocks():void;3;1;1;visible;
1993;BuddyLocker::sharesLocksWith(Locker):boolean;5;1;1;visible;
1994;LockGrantType::toString():string;2;1;1;visible;
1995;LockResult::getLN():LN;2;1;1;visible;
1996;LockResult::setLN(LN):void;2;1;1;visible;
1997;LockResult::getLockGrant():LockGrantType;2;1;1;visible;
1998;LockResult::setAbortLsn(long,boolean):void;2;1;1;visible;
1999;LockResult::setAbortLsn(long,boolean,boolean):void;2;1;1;visible;
2000;LockResult::setAbortLsnInternal(long,boolean,boolean):void;9;1;1;visible;
2001;LockManager::LockManager(EnvironmentImpl);22;4;8;invisible;1;0;0;
2002;LockManager::LockManager.LockAttemptResult(Lock,LockGrantType,boolean);4;1;1;visible;
2003;SyncedLockManager::SyncedLockManager(EnvironmentImpl);2;1;1;visible;
2004;TxnCommit::TxnCommit(long,long);2;1;1;visible;
2005;TxnCommit::TxnCommit();1;1;1;visible;
2006;LockInfo::LockInfo(Locker,LockType);5;1;1;visible;
2007;TxnAbort::TxnAbort(long,long);2;1;1;visible;
2008;TxnAbort::TxnAbort();1;1;1;visible;
2009;LockConflict::LockConflict(boolean,boolean);3;1;1;visible;
2010;Txn::Txn(EnvironmentImpl,TransactionConfig);5;1;1;visible;
2011;Txn::Txn(EnvironmentImpl,TransactionConfig,long);6;1;1;visible;
2012;Txn::Txn();2;1;1;visible;
2013;Txn::Txn.DatabaseCleanupInfo(DatabaseImpl,boolean);3;1;1;visible;
2014;Locker::Locker(EnvironmentImpl,boolean,boolean);21;1;1;visible;
2015;Locker::Locker();1;1;1;visible;
2016;DummyLockManager::DummyLockManager(EnvironmentImpl);2;1;1;visible;
2017;TxnEnd::TxnEnd(long,long);4;1;1;visible;
2018;TxnEnd::TxnEnd();2;1;1;visible;
2019;Lock::Lock(Long);2;1;1;visible;
2020;Lock::Lock();1;1;1;visible;
2021;ReadCommittedLocker::ReadCommittedLocker(EnvironmentImpl,Locker);6;2;2;visible;
2022;BasicLocker::BasicLocker(EnvironmentImpl);2;1;1;visible;
2023;LatchedLockManager::LatchedLockManager(EnvironmentImpl);2;1;1;visible;
2024;WriteLockInfo::WriteLockInfo(Lock);6;1;1;visible;
2025;WriteLockInfo::WriteLockInfo();6;1;1;visible;
2026;TxnPrepare::TxnPrepare(long,Xid);4;1;1;visible;
2027;TxnPrepare::TxnPrepare();1;1;1;visible;
2028;AutoTxn::AutoTxn(EnvironmentImpl,TransactionConfig);2;1;1;visible;
2029;ThreadLocker::ThreadLocker(EnvironmentImpl);2;1;1;visible;
2030;LockType::LockType(int,boolean,string);4;1;1;visible;
2031;LockUpgrade::LockUpgrade(LockType,boolean,boolean);4;1;1;visible;
2032;TxnManager::TxnManager(EnvironmentImpl);25;5;7;visible;
2033;BuddyLocker::BuddyLocker(EnvironmentImpl,Locker);3;1;1;visible;
2034;LockGrantType::LockGrantType(string);2;1;1;visible;
2035;LockResult::LockResult(LockGrantType,WriteLockInfo);3;1;1;visible;
2036;LockManager::setLockTableDump(boolean):void;2;1;1;visible;
2037;LockInfo::setDeadlockStackTrace(boolean):void;2;1;1;visible;
2038;LockInfo::getDeadlockStackTrace():boolean;2;1;1;visible;
2039;LockerFactory::getWritableLocker(Environment,Transaction,boolean):Locker;2;2;5;invisible;0;1;0;
2040;LockerFactory::getWritableLocker(Environment,Transaction,boolean,boolean,TransactionConfig):Locker;33;2;5;visible;
2041;LockerFactory::getReadableLocker(Environment,Transaction,boolean,boolean,boolean):Locker;16;2;6;invisible;1;0;0;
2042;LockerFactory::getReadableLocker(Environment,Database,Locker,boolean,boolean):Locker;16;2;5;invisible;1;0;0;
2043;LockerFactory::getReadableLocker(Environment,Locker,boolean,boolean):Locker;28;2;3;invisible;1;0;0;
2044;DBINReference::getKey():byte[];2;1;1;visible;
2045;DBINReference::getData():byte[];2;1;1;visible;
2046;DBINReference::toString():string;2;1;1;visible;
2047;SearchResult::toString():string;2;1;1;visible;
2048;IN::init(DatabaseImpl,byte[],int,int):void;20;3;4;invisible;1;0;0;
2049;IN::initMemorySize():void;2;1;2;visible;
2050;IN::getEqualityKey():long;4;1;1;visible;
2051;IN::equals(Object):boolean;5;1;1;visible;
2052;IN::hashCode():int;2;1;1;visible;
2053;IN::compareTo(Object):int;12;1;1;visible;
2054;IN::createNewInstance(byte[],int,int):IN;2;1;1;visible;
2055;IN::postFetchInit(DatabaseImpl,long):void;9;2;3;invisible;1;0;0;
2056;IN::postRecoveryInit(DatabaseImpl,long):void;5;2;2;visible;
2057;IN::setLastFullLsn(long):void;2;1;1;visible;
2058;IN::getLastFullVersion():long;2;1;1;visible;
2059;IN::latch(boolean):void;5;2;2;visible;
2060;IN::latchNoWait(boolean):boolean;7;2;2;invisible;0;0;1;
2061;IN::latch():void;2;1;2;visible;
2062;IN::latchNoWait():boolean;2;1;2;visible;
2063;IN::releaseLatch():void;2;1;2;visible;
2064;IN::releaseLatchIfOwner():void;2;1;2;visible;
2065;IN::isLatchOwner():boolean;2;1;2;visible;
2066;IN::getGeneration():long;2;1;1;visible;
2067;IN::setGeneration():void;2;1;1;visible;
2068;IN::setGeneration(long):void;2;1;1;visible;
2069;IN::getLevel():int;2;1;1;visible;
2070;IN::generateLevel(DatabaseId,int):int;5;1;1;visible;
2071;IN::getDirty():boolean;2;1;1;visible;
2072;IN::setDirty(boolean):void;2;1;1;visible;
2073;IN::isRoot():boolean;2;1;1;visible;
2074;IN::isDbRoot():boolean;2;1;1;visible;
2075;IN::setIsRoot(boolean):void;3;1;1;visible;
2076;IN::getIdentifierKey():byte[];2;1;1;visible;
2077;IN::setIdentifierKey(byte[]):void;3;1;1;visible;
2078;IN::getChildKey(IN):byte[];2;1;1;visible;
2079;IN::selectKey(byte[],byte[]):byte[];2;1;1;visible;
2080;IN::getDupKey():byte[];2;1;1;visible;
2081;IN::getDupTreeKey():byte[];2;1;1;visible;
2082;IN::getMainTreeKey():byte[];2;1;1;visible;
2083;IN::getDatabase():DatabaseImpl;2;1;1;visible;
2084;IN::setDatabase(DatabaseImpl):void;2;1;1;visible;
2085;IN::getDatabaseId():DatabaseId;2;1;1;visible;
2086;IN::setEntryInternal(int,int):void;15;1;1;visible;
2087;IN::clearEntry(int):void;5;1;1;visible;
2088;IN::getKey(int):byte[];2;1;1;visible;
2089;IN::setKey(int,byte[]):void;3;1;1;visible;
2090;IN::getMigrate(int):boolean;2;1;1;visible;
2091;IN::setMigrate(int,boolean):void;5;1;1;visible;
2092;IN::getState(int):byte;2;1;1;visible;
2093;IN::getTarget(int):Node;2;1;1;visible;
2094;IN::setTarget(int,Node):void;2;1;1;visible;
2095;IN::getLsn(int):long;10;1;1;visible;
2096;IN::setLsn(int,long):void;9;2;4;invisible;1;0;0;
2097;IN::getEntryLsnLongArray():long[];2;1;1;visible;
2098;IN::getEntryLsnByteArray():byte[];2;1;1;visible;
2099;IN::initEntryLsn(int):void;4;1;1;visible;
2100;IN::setLsnElement(int,long):void;34;1;1;visible;
2101;IN::mutateToLongArray(int,long):void;8;1;1;visible;
2102;IN::adjustFileNumbers(long):boolean;18;1;1;visible;
2103;IN::setFileNumberOffset(int,byte):void;2;1;1;visible;
2104;IN::getFileNumberOffset(int):byte;2;1;1;visible;
2105;IN::setFileOffset(int,int):void;2;1;1;visible;
2106;IN::getFileOffset(int):int;2;1;1;visible;
2107;IN::put3ByteInt(int,int):void;4;1;1;visible;
2108;IN::get3ByteInt(int):int;7;1;1;visible;
2109;IN::isEntryPendingDeleted(int):boolean;2;1;1;visible;
2110;IN::setPendingDeleted(int):void;3;1;1;visible;
2111;IN::clearPendingDeleted(int):void;3;1;1;visible;
2112;IN::isEntryKnownDeleted(int):boolean;2;1;1;visible;
2113;IN::setKnownDeleted(int):void;3;1;1;visible;
2114;IN::clearKnownDeleted(int):void;3;1;1;visible;
2115;IN::isDirty(int):boolean;2;1;1;visible;
2116;IN::getNEntries():int;2;1;1;visible;
2117;IN::getMaxEntries():int;2;1;1;visible;
2118;IN::fetchTarget(int):Node;26;2;2;invisible;0;0;1;
2119;IN::setEntry(int,Node,byte[],long,byte):void;19;2;5;invisible;1;0;0;
2120;IN::updateEntry(int,Node):void;7;2;3;visible;
2121;IN::updateEntry(int,Node,long):void;10;2;4;invisible;1;0;0;
2122;IN::updateEntry(int,Node,long,byte[]):void;11;2;4;invisible;1;0;0;
2123;IN::updateEntry(int,long):void;3;1;1;visible;
2124;IN::updateEntry(int,long,byte):void;4;1;1;visible;
2125;IN::updateEntry(int,long,long,long):void;5;2;4;visible;
2126;IN::updateEntryCompareKey(int,Node,long,byte[]):void;14;2;4;invisible;1;0;0;
2127;IN::verifyMemorySize():boolean;10;2;3;invisible;0;0;1;
2128;IN::getInMemorySize():long;2;1;2;visible;
2129;IN::getEntryInMemorySize(int):long;2;1;2;visible;
2130;IN::getEntryInMemorySize(byte[],Node):long;9;1;2;visible;
2131;IN::computeMemorySize():long;14;1;2;visible;
2132;IN::computeLsnOverhead():int;5;1;2;visible;
2133;IN::getMemoryOverhead(MemoryBudget):long;2;1;2;visible;
2134;IN::updateMemorySize(ChildReference,ChildReference):void;7;1;2;visible;
2135;IN::updateMemorySize(long,long):void;3;1;2;visible;
2136;IN::updateMemorySize(Node,Node):void;7;1;2;visible;
2137;IN::changeMemorySize(long):void;12;1;2;visible;
2138;IN::getAccumulatedDelta():int;2;1;2;visible;
2139;IN::setInListResident(boolean):void;2;1;2;visible;
2140;IN::isKeyInBounds(byte[]):boolean;17;1;1;visible;
2141;IN::findEntry(byte[],boolean,boolean):int;41;1;1;visible;
2142;IN::insertEntry(ChildReference):boolean;2;1;1;visible;
2143;IN::insertEntry1(ChildReference):int;36;2;4;invisible;0;0;1;
2144;IN::deleteEntry(byte[],boolean):boolean;8;1;1;visible;
2145;IN::deleteEntry(int,boolean):boolean;25;3;4;invisible;0;0;1;
2146;IN::setProhibitNextDelta():void;1;1;1;visible;
2147;IN::compress(BINReference,boolean):boolean;2;1;1;visible;
2148;IN::isCompressible():boolean;2;1;1;visible;
2149;IN::validateSubtreeBeforeDelete(int):boolean;15;2;4;invisible;0;0;1;
2150;IN::needsSplitting():boolean;5;1;1;visible;
2151;IN::entryZeroKeyComparesLow():boolean;2;1;1;visible;
2152;IN::split(IN,int,int):void;2;1;1;visible;
2153;IN::splitInternal(IN,int,int,int):void;117;5;11;invisible;1;0;0;
2154;IN::splitSpecial(IN,int,int,byte[],boolean):void;8;1;1;visible;
2155;IN::adjustCursors(IN,int,int):void;2;1;1;visible;
2156;IN::adjustCursorsForInsert(int):void;2;1;1;visible;
2157;IN::getKeyComparator():Comparator;2;1;1;visible;
2158;IN::shiftEntriesRight(int):void;5;1;1;visible;
2159;IN::shiftEntriesLeft(int):void;6;1;1;visible;
2160;IN::verify(byte[]):void;26;2;4;invisible;0;0;1;
2161;IN::rebuildINList(INList):void;13;2;3;invisible;1;0;0;
2162;IN::accountForSubtreeRemoval(INList,UtilizationTracker):void;16;2;5;invisible;1;0;0;
2163;IN::isValidForDelete():boolean;21;2;4;invisible;0;0;1;
2164;IN::findParent(SearchType,long,boolean,boolean,byte[],byte[],SearchResult,boolean,boolean,int,List,boolean):void;105;2;6;invisible;0;0;1;
2165;IN::descendOnParentSearch(SearchResult,boolean,boolean,long,Node,boolean):void;20;2;4;invisible;0;0;1;
2166;IN::isSoughtNode(long,boolean):boolean;8;2;2;invisible;0;0;1;
2167;IN::canBeAncestor(boolean):boolean;2;1;1;visible;
2168;IN::isEvictable():boolean;6;1;2;visible;
2169;IN::getEvictionType():int;5;1;2;visible;
2170;IN::isEvictionProhibited():boolean;2;1;2;visible;
2171;IN::hasNonLNChildren():boolean;2;1;1;visible;
2172;IN::getChildEvictionType():int;2;1;2;visible;
2173;IN::hasResidentChildren():boolean;5;1;1;visible;
2174;IN::accumulateStats(TreeWalkerStatsAccumulator):void;2;1;1;visible;
2175;IN::log(LogManager):long;6;1;1;visible;
2176;IN::log(LogManager,boolean,boolean):long;4;1;1;visible;
2177;IN::logProvisional(LogManager,IN):long;5;1;1;visible;
2178;IN::log(LogManager,boolean,boolean,boolean,IN):long;2;1;1;visible;
2179;IN::logInternal(LogManager,boolean,boolean,boolean,IN):long;16;1;1;visible;
2180;IN::trackProvisionalObsolete(IN,long,long):void;27;2;6;invisible;0;0;1;
2181;IN::flushProvisionalObsolete(LogManager):void;9;3;4;invisible;0;0;1;
2182;IN::getLogType():LogEntryType;2;1;1;visible;
2183;IN::getLogSize():int;26;1;1;visible;
2184;IN::writeToLog(ByteBuffer):void;39;1;1;visible;
2185;IN::readFromLog(ByteBuffer,byte):void;58;2;2;visible;
2186;IN::dumpLog(StringBuffer,boolean):void;34;1;1;visible;
2187;IN::logEntryIsTransactional():boolean;2;1;1;visible;
2188;IN::getTransactionId():long;2;1;1;visible;
2189;IN::dumpLogAdditional(StringBuffer):void;1;1;1;visible;
2190;IN::beginTag():string;2;1;1;visible;
2191;IN::endTag():string;2;1;1;visible;
2192;IN::dumpKeys():void;3;1;1;visible;
2193;IN::dumpString(int,boolean):string;67;1;1;visible;
2194;IN::toString():string;2;1;1;visible;
2195;IN::shortClassName():string;2;1;1;visible;
2196;IN::traceSplit(Level,IN,IN,long,long,long,int,int,int):void;27;2;3;visible;
2197;IN::traceDelete(Level,int):void;11;2;3;visible;
2198;MapLN::isDeleted():boolean;2;1;1;visible;
2199;MapLN::makeDeleted():void;4;1;1;visible;
2200;MapLN::getDatabase():DatabaseImpl;2;1;1;visible;
2201;MapLN::postFetchInit(DatabaseImpl,long):void;2;1;1;visible;
2202;MapLN::toString():string;2;1;1;visible;
2203;MapLN::beginTag():string;2;1;1;visible;
2204;MapLN::endTag():string;2;1;1;visible;
2205;MapLN::dumpString(int,boolean):string;10;1;1;visible;
2206;MapLN::getTransactionalLogType():LogEntryType;2;1;1;visible;
2207;MapLN::getLogType():LogEntryType;2;1;1;visible;
2208;MapLN::getLogSize():int;2;1;1;visible;
2209;MapLN::writeToLog(ByteBuffer):void;5;1;1;visible;
2210;MapLN::readFromLog(ByteBuffer,byte):void;4;1;1;visible;
2211;MapLN::dumpLogAdditional(StringBuffer,boolean):void;2;1;1;visible;
2212;Node::postFetchInit(DatabaseImpl,long):void;2;1;1;visible;
2213;Node::getNodeId():long;2;1;1;visible;
2214;Node::setNodeId(long):void;2;1;1;visible;
2215;Node::verify(byte[]):void;1;1;1;visible;
2216;Node::containsDuplicates():boolean;2;1;1;visible;
2217;Node::getLevel():int;2;1;1;visible;
2218;Node::matchLNByNodeId(TreeLocation,long):boolean;2;1;1;visible;
2219;Node::rebuildINList(INList):void;1;1;1;visible;
2220;Node::accountForSubtreeRemoval(INList,UtilizationTracker):void;1;2;2;visible;
2221;Node::isValidForDelete():boolean;1;1;1;visible;
2222;Node::isSoughtNode(long,boolean):boolean;1;1;1;visible;
2223;Node::canBeAncestor(boolean):boolean;1;1;1;visible;
2224;Node::getMemorySizeIncludedByParent():long;2;1;1;visible;
2225;Node::toString():string;2;1;1;visible;
2226;Node::beginTag():string;2;1;1;visible;
2227;Node::endTag():string;2;1;1;visible;
2228;Node::dump(int):void;2;1;1;visible;
2229;Node::dumpString(int,boolean):string;9;1;1;visible;
2230;Node::shortDescription():string;2;1;1;visible;
2231;Node::getType():string;2;1;1;visible;
2232;Node::getLogType():LogEntryType;1;1;1;visible;
2233;Node::marshallOutsideWriteLatch():boolean;2;1;1;visible;
2234;Node::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
2235;Node::postLogWork(long):void;1;1;1;visible;
2236;Node::getLogSize():int;2;1;1;visible;
2237;Node::writeToLog(ByteBuffer):void;2;1;1;visible;
2238;Node::readFromLog(ByteBuffer,byte):void;2;1;1;visible;
2239;Node::dumpLog(StringBuffer,boolean):void;4;1;1;visible;
2240;INDeleteInfo::getDeletedNodeId():long;2;1;1;visible;
2241;INDeleteInfo::getDeletedIdKey():byte[];2;1;1;visible;
2242;INDeleteInfo::getDatabaseId():DatabaseId;2;1;1;visible;
2243;INDeleteInfo::getLogType():LogEntryType;2;1;1;visible;
2244;INDeleteInfo::marshallOutsideWriteLatch():boolean;2;1;1;visible;
2245;INDeleteInfo::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
2246;INDeleteInfo::postLogWork(long):void;1;1;1;visible;
2247;INDeleteInfo::getLogSize():int;2;1;1;visible;
2248;INDeleteInfo::writeToLog(ByteBuffer):void;4;1;1;visible;
2249;INDeleteInfo::readFromLog(ByteBuffer,byte):void;4;1;1;visible;
2250;INDeleteInfo::dumpLog(StringBuffer,boolean):void;6;1;1;visible;
2251;INDeleteInfo::logEntryIsTransactional():boolean;2;1;1;visible;
2252;INDeleteInfo::getTransactionId():long;2;1;1;visible;
2253;TreeIterator::hasNext():boolean;15;2;3;invisible;0;0;1;
2254;TreeIterator::next():Object;15;2;3;invisible;0;0;1;
2255;TreeIterator::remove():void;2;1;1;visible;
2256;TreeIterator::advance():void;7;1;1;visible;
2257;TreeLocation::reset():void;5;1;1;visible;
2258;TreeLocation::toString():string;14;1;1;visible;
2259;LN::init(byte[],int,int,int,int):void;6;1;1;visible;
2260;LN::init(byte[],int,int):void;2;1;1;visible;
2261;LN::getData():byte[];2;1;1;visible;
2262;LN::copyData():byte[];5;1;1;visible;
2263;LN::isDeleted():boolean;2;1;1;visible;
2264;LN::makeDeleted():void;2;1;1;visible;
2265;LN::isValidForDelete():boolean;2;1;1;visible;
2266;LN::isSoughtNode(long,boolean):boolean;2;1;1;visible;
2267;LN::canBeAncestor(boolean):boolean;2;1;1;visible;
2268;LN::delete(DatabaseImpl,byte[],byte[],long,Locker):long;41;2;3;invisible;0;1;0;
2269;LN::modify(byte[],DatabaseImpl,byte[],long,Locker):long;6;1;1;visible;
2270;LN::addToDirtyMap(Map):void;1;1;1;visible;
2271;LN::rebuildINList(INList):void;2;1;1;visible;
2272;LN::accountForSubtreeRemoval(INList,UtilizationTracker):void;2;2;2;visible;
2273;LN::getMemorySizeIncludedByParent():long;5;1;2;visible;
2274;LN::beginTag():string;2;1;1;visible;
2275;LN::endTag():string;2;1;1;visible;
2276;LN::dumpString(int,boolean):string;18;1;1;visible;
2277;LN::logProvisional(EnvironmentImpl,DatabaseId,byte[],long):long;2;1;1;visible;
2278;LN::log(EnvironmentImpl,DatabaseId,byte[],long,Locker):long;2;1;1;visible;
2279;LN::log(EnvironmentImpl,DatabaseId,byte[],long,Locker,boolean):long;25;2;4;invisible;1;0;0;
2280;LN::getTransactionalLogType():LogEntryType;2;1;1;visible;
2281;LN::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
2282;LN::getLogType():LogEntryType;2;1;1;visible;
2283;LN::getLogSize():int;8;1;1;visible;
2284;LN::writeToLog(ByteBuffer):void;8;1;1;visible;
2285;LN::readFromLog(ByteBuffer,byte):void;5;1;1;visible;
2286;LN::dumpLog(StringBuffer,boolean):void;9;1;1;visible;
2287;LN::logEntryIsTransactional():boolean;2;1;1;visible;
2288;LN::getTransactionId():long;2;1;1;visible;
2289;LN::dumpLogAdditional(StringBuffer,boolean):void;1;1;1;visible;
2290;INDupDeleteInfo::getDeletedNodeId():long;2;1;1;visible;
2291;INDupDeleteInfo::getDeletedMainKey():byte[];2;1;1;visible;
2292;INDupDeleteInfo::getDeletedDupKey():byte[];2;1;1;visible;
2293;INDupDeleteInfo::getDatabaseId():DatabaseId;2;1;1;visible;
2294;INDupDeleteInfo::getLogType():LogEntryType;2;1;1;visible;
2295;INDupDeleteInfo::marshallOutsideWriteLatch():boolean;2;1;1;visible;
2296;INDupDeleteInfo::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
2297;INDupDeleteInfo::postLogWork(long):void;1;1;1;visible;
2298;INDupDeleteInfo::getLogSize():int;2;1;1;visible;
2299;INDupDeleteInfo::writeToLog(ByteBuffer):void;5;1;1;visible;
2300;INDupDeleteInfo::readFromLog(ByteBuffer,byte):void;5;1;1;visible;
2301;INDupDeleteInfo::dumpLog(StringBuffer,boolean):void;7;1;1;visible;
2302;INDupDeleteInfo::logEntryIsTransactional():boolean;2;1;1;visible;
2303;INDupDeleteInfo::getTransactionId():long;2;1;1;visible;
2304;FileSummaryLN::setTrackedSummary(TrackedFileSummary):void;3;1;1;visible;
2305;FileSummaryLN::getTrackedSummary():TrackedFileSummary;2;1;1;visible;
2306;FileSummaryLN::getBaseSummary():FileSummary;2;1;1;visible;
2307;FileSummaryLN::getObsoleteOffsets():PackedOffsets;2;1;1;visible;
2308;FileSummaryLN::hasStringKey(byte[]):boolean;5;1;1;visible;
2309;FileSummaryLN::getFileNumber(byte[]):long;9;1;1;visible;
2310;FileSummaryLN::postFetchInit(DatabaseImpl,long):void;4;1;1;visible;
2311;FileSummaryLN::toString():string;2;1;1;visible;
2312;FileSummaryLN::beginTag():string;2;1;1;visible;
2313;FileSummaryLN::endTag():string;2;1;1;visible;
2314;FileSummaryLN::dumpString(int,boolean):string;8;1;1;visible;
2315;FileSummaryLN::dumpLogAdditional(StringBuffer,boolean):void;5;1;1;visible;
2316;FileSummaryLN::getTransactionalLogType():LogEntryType;3;1;1;visible;
2317;FileSummaryLN::getLogType():LogEntryType;2;1;1;visible;
2318;FileSummaryLN::marshallOutsideWriteLatch():boolean;2;1;1;visible;
2319;FileSummaryLN::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
2320;FileSummaryLN::getLogSize():int;7;1;1;visible;
2321;FileSummaryLN::writeToLog(ByteBuffer):void;14;1;1;visible;
2322;FileSummaryLN::readFromLog(ByteBuffer,byte):void;7;1;1;visible;
2323;FileSummaryLN::getOffsets():void;6;1;1;visible;
2324;DBIN::createNewInstance(byte[],int,int):IN;2;1;1;visible;
2325;DBIN::generateLevel(DatabaseId,int):int;2;1;1;visible;
2326;DBIN::getKeyComparator():Comparator;2;1;1;visible;
2327;DBIN::getDupKey():byte[];2;1;1;visible;
2328;DBIN::getChildKey(IN):byte[];2;1;1;visible;
2329;DBIN::selectKey(byte[],byte[]):byte[];2;1;1;visible;
2330;DBIN::getDupTreeKey():byte[];2;1;1;visible;
2331;DBIN::getMainTreeKey():byte[];2;1;1;visible;
2332;DBIN::containsDuplicates():boolean;2;1;1;visible;
2333;DBIN::getBINDeltaType():LogEntryType;2;1;1;visible;
2334;DBIN::createReference():BINReference;2;1;1;visible;
2335;DBIN::computeMemorySize():long;7;1;2;visible;
2336;DBIN::getMemoryOverhead(MemoryBudget):long;2;1;2;visible;
2337;DBIN::canBeAncestor(boolean):boolean;2;1;1;visible;
2338;DBIN::hasNonLNChildren():boolean;2;1;1;visible;
2339;DBIN::getCursorBIN(CursorImpl):BIN;2;1;1;visible;
2340;DBIN::getCursorBINToBeRemoved(CursorImpl):BIN;2;1;1;visible;
2341;DBIN::getCursorIndex(CursorImpl):int;2;1;1;visible;
2342;DBIN::setCursorBIN(CursorImpl,BIN):void;2;1;1;visible;
2343;DBIN::setCursorIndex(CursorImpl,int):void;2;1;1;visible;
2344;DBIN::matchLNByNodeId(TreeLocation,long):boolean;11;1;1;visible;
2345;DBIN::accumulateStats(TreeWalkerStatsAccumulator):void;2;1;1;visible;
2346;DBIN::beginTag():string;2;1;1;visible;
2347;DBIN::endTag():string;2;1;1;visible;
2348;DBIN::dumpString(int,boolean):string;14;1;1;visible;
2349;DBIN::getLogType():LogEntryType;2;1;1;visible;
2350;DBIN::getLogSize():int;6;1;1;visible;
2351;DBIN::writeToLog(ByteBuffer):void;5;1;1;visible;
2352;DBIN::readFromLog(ByteBuffer,byte):void;5;1;1;visible;
2353;DBIN::dumpLogAdditional(StringBuffer):void;3;1;1;visible;
2354;DBIN::shortClassName():string;2;1;1;visible;
2355;ChildReference::init(Node,byte[],long,int):void;5;1;1;visible;
2356;ChildReference::getKey():byte[];2;1;1;visible;
2357;ChildReference::setKey(byte[]):void;3;1;1;visible;
2358;ChildReference::fetchTarget(DatabaseImpl,IN):Node;21;2;2;invisible;0;0;1;
2359;ChildReference::getState():byte;2;1;1;visible;
2360;ChildReference::getTarget():Node;2;1;1;visible;
2361;ChildReference::setTarget(Node):void;2;1;1;visible;
2362;ChildReference::clearTarget():void;2;1;1;visible;
2363;ChildReference::getLsn():long;2;1;1;visible;
2364;ChildReference::setLsn(long):void;3;1;1;visible;
2365;ChildReference::isPendingDeleted():boolean;2;1;1;visible;
2366;ChildReference::isKnownDeleted():boolean;2;1;1;visible;
2367;ChildReference::isDirty():boolean;2;1;1;visible;
2368;ChildReference::getMigrate():boolean;2;1;1;visible;
2369;ChildReference::setMigrate(boolean):void;5;1;1;visible;
2370;ChildReference::getLogSize():int;5;1;1;visible;
2371;ChildReference::writeToLog(ByteBuffer):void;8;1;1;visible;
2372;ChildReference::readFromLog(ByteBuffer,byte):void;8;1;1;visible;
2373;ChildReference::dumpLog(StringBuffer,boolean):void;7;1;1;visible;
2374;ChildReference::logEntryIsTransactional():boolean;2;1;1;visible;
2375;ChildReference::getTransactionId():long;2;1;1;visible;
2376;ChildReference::dumpString(int,boolean):string;27;1;1;visible;
2377;ChildReference::toString():string;2;1;1;visible;
2378;DupCountLN::getDupCount():int;2;1;1;visible;
2379;DupCountLN::incDupCount():int;4;1;1;visible;
2380;DupCountLN::decDupCount():int;4;1;1;visible;
2381;DupCountLN::setDupCount(int):void;2;1;1;visible;
2382;DupCountLN::containsDuplicates():boolean;2;1;1;visible;
2383;DupCountLN::isDeleted():boolean;2;1;1;visible;
2384;DupCountLN::getMemorySizeIncludedByParent():long;2;1;2;visible;
2385;DupCountLN::accumulateStats(TreeWalkerStatsAccumulator):void;2;1;2;visible;
2386;DupCountLN::toString():string;2;1;1;visible;
2387;DupCountLN::beginTag():string;2;1;1;visible;
2388;DupCountLN::endTag():string;2;1;1;visible;
2389;DupCountLN::dumpString(int,boolean):string;13;1;1;visible;
2390;DupCountLN::getTransactionalLogType():LogEntryType;2;1;1;visible;
2391;DupCountLN::getLogType():LogEntryType;2;1;1;visible;
2392;DupCountLN::getLogSize():int;2;1;1;visible;
2393;DupCountLN::writeToLog(ByteBuffer):void;4;1;1;visible;
2394;DupCountLN::readFromLog(ByteBuffer,byte):void;3;1;1;visible;
2395;DupCountLN::dumpLogAdditional(StringBuffer,boolean):void;3;1;1;visible;
2396;BIN::createReference():BINReference;2;1;1;visible;
2397;BIN::createNewInstance(byte[],int,int):IN;2;1;1;visible;
2398;BIN::getChildKey(IN):byte[];2;1;1;visible;
2399;BIN::getBINDeltaType():LogEntryType;2;1;1;visible;
2400;BIN::getLastDeltaVersion():long;2;1;1;visible;
2401;BIN::setProhibitNextDelta():void;2;1;1;visible;
2402;BIN::descendOnParentSearch(SearchResult,boolean,boolean,long,Node,boolean):void;40;2;5;invisible;0;0;1;
2403;BIN::canBeAncestor(boolean):boolean;3;1;1;visible;
2404;BIN::isEvictionProhibited():boolean;2;1;1;visible;
2405;BIN::hasNonLNChildren():boolean;7;1;1;visible;
2406;BIN::getChildEvictionType():int;12;3;4;invisible;0;0;1;
2407;BIN::entryZeroKeyComparesLow():boolean;2;1;1;visible;
2408;BIN::setKnownDeleted(int):void;11;2;3;invisible;1;0;0;
2409;BIN::setKnownDeletedLeaveTarget(int):void;6;1;1;visible;
2410;BIN::clearKnownDeleted(int):void;3;1;1;visible;
2411;BIN::getMemoryOverhead(MemoryBudget):long;2;1;2;visible;
2412;BIN::getCursorSet():Set;2;1;1;visible;
2413;BIN::addCursor(CursorImpl):void;4;2;2;visible;
2414;BIN::removeCursor(CursorImpl):void;4;2;2;visible;
2415;BIN::nCursors():int;2;1;1;visible;
2416;BIN::getCursorBIN(CursorImpl):BIN;2;1;1;visible;
2417;BIN::getCursorBINToBeRemoved(CursorImpl):BIN;2;1;1;visible;
2418;BIN::getCursorIndex(CursorImpl):int;2;1;1;visible;
2419;BIN::setCursorBIN(CursorImpl,BIN):void;2;1;1;visible;
2420;BIN::setCursorIndex(CursorImpl,int):void;2;1;1;visible;
2421;BIN::splitSpecial(IN,int,int,byte[],boolean):void;11;1;1;visible;
2422;BIN::adjustCursors(IN,int,int):void;85;2;2;visible;
2423;BIN::verifyCursors():void;8;1;2;visible;
2424;BIN::adjustCursorsForInsert(int):void;13;2;2;visible;
2425;BIN::adjustCursorsForMutation(int,DBIN,int,CursorImpl):void;13;2;2;visible;
2426;BIN::compress(BINReference,boolean):boolean;78;2;2;invisible;0;0;1;
2427;BIN::isCompressible():boolean;2;1;1;visible;
2428;BIN::evictLNs():long;19;4;6;invisible;0;1;0;
2429;BIN::evictLN(int):void;6;3;5;invisible;0;1;0;
2430;BIN::evictInternal(int,Cleaner):long;8;3;5;invisible;0;1;0;
2431;BIN::validateSubtreeBeforeDelete(int):boolean;2;1;1;visible;
2432;BIN::isValidForDelete():boolean;31;2;5;invisible;1;0;0;
2433;BIN::accumulateStats(TreeWalkerStatsAccumulator):void;2;1;1;visible;
2434;BIN::getKeyComparator():Comparator;2;1;1;visible;
2435;BIN::beginTag():string;2;1;1;visible;
2436;BIN::endTag():string;2;1;1;visible;
2437;BIN::getLogType():LogEntryType;2;1;1;visible;
2438;BIN::shortClassName():string;2;1;1;visible;
2439;BIN::logInternal(LogManager,boolean,boolean,boolean,IN):long;33;2;3;invisible;1;0;0;
2440;BIN::doDeltaLog(BINDelta):boolean;6;1;1;visible;
2441;DIN::generateLevel(DatabaseId,int):int;2;1;1;visible;
2442;DIN::createNewInstance(byte[],int,int):IN;2;1;1;visible;
2443;DIN::getDupKey():byte[];2;1;1;visible;
2444;DIN::getChildKey(IN):byte[];2;1;1;visible;
2445;DIN::selectKey(byte[],byte[]):byte[];2;1;1;visible;
2446;DIN::getDupTreeKey():byte[];2;1;1;visible;
2447;DIN::getMainTreeKey():byte[];2;1;1;visible;
2448;DIN::getDupCountLNRef():ChildReference;2;1;1;visible;
2449;DIN::getDupCountLN():DupCountLN;2;1;1;visible;
2450;DIN::setDupCountLN(ChildReference):void;4;2;2;visible;
2451;DIN::updateDupCountLN(Node):void;7;2;3;visible;
2452;DIN::updateDupCountLNRefAndNullTarget(long):void;10;2;4;invisible;1;0;0;
2453;DIN::updateDupCountLNRef(long):void;3;1;1;visible;
2454;DIN::containsDuplicates():boolean;2;1;1;visible;
2455;DIN::isDbRoot():boolean;2;1;1;visible;
2456;DIN::getKeyComparator():Comparator;2;1;1;visible;
2457;DIN::incrementDuplicateCount(LockResult,byte[],Locker,boolean):void;13;1;1;visible;
2458;DIN::computeMemorySize():long;9;1;2;visible;
2459;DIN::getMemoryOverhead(MemoryBudget):long;2;1;2;visible;
2460;DIN::matchLNByNodeId(TreeLocation,long):boolean;8;1;1;visible;
2461;DIN::accumulateStats(TreeWalkerStatsAccumulator):void;2;1;1;visible;
2462;DIN::getLogType():LogEntryType;2;1;1;visible;
2463;DIN::logInternal(LogManager,boolean,boolean,boolean,IN):long;7;2;2;visible;
2464;DIN::getLogSize():int;10;1;1;visible;
2465;DIN::writeToLog(ByteBuffer):void;10;1;1;visible;
2466;DIN::readFromLog(ByteBuffer,byte):void;11;1;1;visible;
2467;DIN::dumpLogAdditional(StringBuffer):void;5;1;1;visible;
2468;DIN::beginTag():string;2;1;1;visible;
2469;DIN::endTag():string;2;1;1;visible;
2470;DIN::dumpString(int,boolean):string;22;1;1;visible;
2471;DIN::toString():string;2;1;1;visible;
2472;DIN::shortClassName():string;2;1;1;visible;
2473;NameLN::isDeleted():boolean;2;1;1;visible;
2474;NameLN::makeDeleted():void;2;1;1;visible;
2475;NameLN::getId():DatabaseId;2;1;1;visible;
2476;NameLN::setId(DatabaseId):void;2;1;1;visible;
2477;NameLN::toString():string;2;1;1;visible;
2478;NameLN::beginTag():string;2;1;1;visible;
2479;NameLN::endTag():string;2;1;1;visible;
2480;NameLN::dumpString(int,boolean):string;13;1;1;visible;
2481;NameLN::getTransactionalLogType():LogEntryType;2;1;1;visible;
2482;NameLN::getLogType():LogEntryType;2;1;1;visible;
2483;NameLN::getLogSize():int;5;1;1;visible;
2484;NameLN::writeToLog(ByteBuffer):void;8;1;1;visible;
2485;NameLN::readFromLog(ByteBuffer,byte):void;7;1;1;visible;
2486;NameLN::dumpLogAdditional(StringBuffer,boolean):void;2;1;1;visible;
2487;BINReference::getNodeId():long;2;1;1;visible;
2488;BINReference::getDatabaseId():DatabaseId;2;1;1;visible;
2489;BINReference::getKey():byte[];2;1;1;visible;
2490;BINReference::getData():byte[];2;1;1;visible;
2491;BINReference::addDeletedKey(Key):void;4;1;1;visible;
2492;BINReference::addDeletedKeys(BINReference):void;5;1;1;visible;
2493;BINReference::removeDeletedKey(Key):void;5;1;1;visible;
2494;BINReference::hasDeletedKey(Key):boolean;2;1;1;visible;
2495;BINReference::deletedKeysExist():boolean;2;1;1;visible;
2496;BINReference::getDeletedKeyIterator():Iterator;5;1;1;visible;
2497;BINReference::equals(Object):boolean;6;1;1;visible;
2498;BINReference::hashCode():int;2;1;1;visible;
2499;BINReference::toString():string;2;1;1;visible;
2500;BINDelta::getNumDeltas():int;2;1;1;visible;
2501;BINDelta::getDbId():DatabaseId;2;1;1;visible;
2502;BINDelta::getLastFullLsn():long;2;1;1;visible;
2503;BINDelta::reconstituteBIN(EnvironmentImpl):BIN;47;2;5;invisible;1;0;0;
2504;BINDelta::getLogType():LogEntryType;2;1;1;visible;
2505;BINDelta::marshallOutsideWriteLatch():boolean;2;1;1;visible;
2506;BINDelta::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
2507;BINDelta::postLogWork(long):void;1;1;1;visible;
2508;BINDelta::readFromLog(ByteBuffer,byte):void;11;1;1;visible;
2509;BINDelta::getLogSize():int;10;1;1;visible;
2510;BINDelta::writeToLog(ByteBuffer):void;11;1;1;visible;
2511;BINDelta::dumpLog(StringBuffer,boolean):void;10;1;1;visible;
2512;BINDelta::logEntryIsTransactional():boolean;2;1;1;visible;
2513;BINDelta::getTransactionId():long;2;1;1;visible;
2514;Tree::init(DatabaseImpl):void;6;2;2;visible;
2515;Tree::setDatabase(DatabaseImpl):void;6;1;1;visible;
2516;Tree::getDatabase():DatabaseImpl;2;1;1;visible;
2517;Tree::setRoot(ChildReference,boolean):void;4;2;3;visible;
2518;Tree::makeRootChildReference(Node,byte[],long):ChildReference;2;1;1;visible;
2519;Tree::makeRootChildReference():ChildReference;2;1;1;visible;
2520;Tree::fetchTarget(DatabaseImpl,IN):Node;6;2;2;visible;
2521;Tree::setTarget(Node):void;4;2;2;visible;
2522;Tree::clearTarget():void;4;2;2;visible;
2523;Tree::setLsn(long):void;4;2;2;visible;
2524;Tree::getRootLsn():long;5;1;1;visible;
2525;Tree::getTreeStats():TreeStats;2;1;1;visible;
2526;Tree::getTreeStatsAccumulator():TreeWalkerStatsAccumulator;5;1;1;visible;
2527;Tree::setTreeStatsAccumulator(TreeWalkerStatsAccumulator):void;2;1;1;visible;
2528;Tree::withRootLatchedExclusive(WithRootLatched):IN;6;2;3;invisible;0;0;1;
2529;Tree::withRootLatchedShared(WithRootLatched):IN;6;2;3;invisible;0;0;1;
2530;Tree::delete(byte[],UtilizationTracker):void;71;4;9;invisible;1;0;0;
2531;Tree::releaseNodeLadderLatches(ArrayList):void;7;1;2;visible;
2532;Tree::logTreeRemoval(IN,UtilizationTracker):IN;25;3;3;visible;
2533;Tree::cascadeUpdates(ArrayList,BIN,int):boolean;26;2;2;invisible;0;0;1;
2534;Tree::deleteDup(byte[],byte[],UtilizationTracker):void;20;3;7;invisible;1;0;0;
2535;Tree::deleteDupSubtree(byte[],BIN,int):IN;62;3;4;invisible;0;0;1;
2536;Tree::getFirstNode():IN;3;1;1;visible;
2537;Tree::getLastNode():IN;3;1;1;visible;
2538;Tree::getFirstNode(DIN):DBIN;9;2;3;invisible;1;0;0;
2539;Tree::getLastNode(DIN):DBIN;9;2;3;invisible;1;0;0;
2540;Tree::getParentINForChildIN(IN,boolean,boolean):SearchResult;2;1;1;visible;
2541;Tree::getParentINForChildIN(IN,boolean,boolean,int,List):SearchResult;15;2;5;invisible;1;0;0;
2542;Tree::getParentINForChildIN(long,boolean,boolean,byte[],byte[],boolean,boolean,int,List,boolean):SearchResult;19;2;2;invisible;0;0;1;
2543;Tree::getParentBINForChildLN(TreeLocation,byte[],byte[],LN,boolean,boolean,boolean,boolean):boolean;77;2;3;invisible;0;0;1;
2544;Tree::searchDupTreeByNodeId(TreeLocation,Node,LN,boolean,boolean):boolean;16;2;2;invisible;0;0;1;
2545;Tree::searchDupTreeForDupCountLNParent(TreeLocation,byte[],Node):boolean;13;1;1;visible;
2546;Tree::searchDupTreeForDBIN(TreeLocation,byte[],DIN,LN,boolean,boolean,boolean,boolean,boolean):boolean;42;2;6;invisible;1;0;0;
2547;Tree::getNextBin(BIN,boolean):BIN;2;1;1;visible;
2548;Tree::getPrevBin(BIN,boolean):BIN;2;1;1;visible;
2549;Tree::getNextBinInternal(boolean,BIN,boolean):BIN;110;2;11;invisible;1;0;0;
2550;Tree::splitRoot():void;46;3;7;invisible;1;0;0;
2551;Tree::search(byte[],SearchType,long,BINBoundary,boolean):IN;7;1;1;visible;
2552;Tree::searchSplitsAllowed(byte[],long,boolean):IN;51;2;7;invisible;0;0;1;
2553;Tree::searchSubTree(IN,byte[],SearchType,long,BINBoundary,boolean):IN;67;2;7;invisible;1;0;0;
2554;Tree::searchDeletableSubTree(IN,byte[],ArrayList):void;52;2;5;invisible;1;0;0;
2555;Tree::searchSubTreeSplitsAllowed(IN,byte[],long,boolean):IN;19;1;1;visible;
2556;Tree::searchSubTreeUntilSplit(IN,byte[],long,boolean):IN;47;2;9;invisible;1;0;0;
2557;Tree::forceSplit(IN,byte[]):void;123;2;9;invisible;1;0;0;
2558;Tree::getRootIN(boolean):IN;11;2;4;invisible;1;0;0;
2559;Tree::insert(LN,byte[],boolean,CursorImpl,LockResult):boolean;117;3;7;invisible;1;0;0;
2560;Tree::insertDuplicate(byte[],BIN,LN,LogManager,INList,CursorImpl,LockResult,boolean):boolean;160;3;10;invisible;0;0;1;
2561;Tree::maybeSplitDuplicateRoot(BIN,int):boolean;37;3;4;invisible;0;0;1;
2562;Tree::createDuplicateTree(byte[],LogManager,INList,LN,CursorImpl):DIN;124;3;11;invisible;1;0;0;
2563;Tree::validateInsertArgs(boolean):void;3;1;1;visible;
2564;Tree::findBinForInsert(byte[],LogManager,INList,CursorImpl):BIN;92;2;11;invisible;1;0;0;
2565;Tree::accountForSubtreeRemoval(INList,IN,UtilizationTracker):void;8;4;6;invisible;0;1;0;
2566;Tree::getLogSize():int;7;1;1;visible;
2567;Tree::writeToLog(ByteBuffer):void;4;1;1;visible;
2568;Tree::readFromLog(ByteBuffer,byte):void;5;1;1;visible;
2569;Tree::dumpLog(StringBuffer,boolean):void;5;1;1;visible;
2570;Tree::logEntryIsTransactional():boolean;2;1;1;visible;
2571;Tree::getTransactionId():long;2;1;1;visible;
2572;Tree::rebuildINList():void;10;2;3;invisible;0;0;1;
2573;Tree::dump():void;2;1;1;visible;
2574;Tree::dumpString(int):string;17;1;1;visible;
2575;Tree::validateDelete(int):boolean;7;2;3;invisible;0;0;1;
2576;Tree::validateINList(IN):void;19;1;1;visible;
2577;Tree::setWaitHook(TestHook):void;2;1;1;visible;
2578;Tree::setSearchHook(TestHook):void;2;1;1;visible;
2579;Tree::setCkptHook(TestHook):void;2;1;1;visible;
2580;Tree::traceSplitRoot(Level,string,IN,long,IN,long):void;12;2;3;visible;
2581;Tree::traceMutate(Level,BIN,LN,LN,long,DupCountLN,long,DIN,long,DBIN,long):void;29;2;3;visible;
2582;Tree::traceInsert(Level,EnvironmentImpl,BIN,LN,long,int):void;16;2;3;visible;
2583;Tree::traceInsertDuplicate(Level,EnvironmentImpl,BIN,LN,long,long):void;17;2;3;visible;
2584;TrackingInfo::toString():string;2;1;1;visible;
2585;Key::getKey():byte[];2;1;1;visible;
2586;Key::compareTo(Object):int;5;1;1;visible;
2587;Key::equals(Object):boolean;2;1;1;visible;
2588;Key::hashCode():int;5;1;1;visible;
2589;DeltaInfo::getLogSize():int;4;1;1;visible;
2590;DeltaInfo::writeToLog(ByteBuffer):void;4;1;1;visible;
2591;DeltaInfo::readFromLog(ByteBuffer,byte):void;4;1;1;visible;
2592;DeltaInfo::dumpLog(StringBuffer,boolean):void;4;1;1;visible;
2593;DeltaInfo::logEntryIsTransactional():boolean;2;1;1;visible;
2594;DeltaInfo::getTransactionId():long;2;1;1;visible;
2595;DeltaInfo::getKey():byte[];2;1;1;visible;
2596;DeltaInfo::getState():byte;2;1;1;visible;
2597;DeltaInfo::isKnownDeleted():boolean;2;1;1;visible;
2598;DeltaInfo::getLsn():long;2;1;1;visible;
2599;DBINReference::DBINReference(long,DatabaseId,byte[],byte[]);3;1;1;visible;
2600;SearchResult::SearchResult();6;1;1;visible;
2601;IN::IN();3;1;1;visible;
2602;IN::IN(DatabaseImpl,byte[],int,int);5;2;2;visible;
2603;MapLN::MapLN(DatabaseImpl);4;1;1;visible;
2604;MapLN::MapLN();3;1;1;visible;
2605;NodeNotEmptyException::NodeNotEmptyException();1;1;1;visible;
2606;Node::Node(boolean);3;1;1;visible;
2607;INDeleteInfo::INDeleteInfo(long,byte[],DatabaseId);4;1;1;visible;
2608;INDeleteInfo::INDeleteInfo();2;1;1;visible;
2609;TreeIterator::TreeIterator(Tree);8;2;3;invisible;1;0;0;
2610;DuplicateEntryException::DuplicateEntryException();2;1;1;visible;
2611;DuplicateEntryException::DuplicateEntryException(string);2;1;1;visible;
2612;LN::LN();3;1;1;visible;
2613;LN::LN(byte[]);6;1;1;visible;
2614;LN::LN(DatabaseEntry);9;1;1;visible;
2615;SplitRequiredException::SplitRequiredException();1;1;1;visible;
2616;INDupDeleteInfo::INDupDeleteInfo(long,byte[],byte[],DatabaseId);5;1;1;visible;
2617;INDupDeleteInfo::INDupDeleteInfo();2;1;1;visible;
2618;FileSummaryLN::FileSummaryLN(FileSummary);6;1;1;visible;
2619;FileSummaryLN::FileSummaryLN();3;1;1;visible;
2620;DBIN::DBIN();2;1;1;visible;
2621;DBIN::DBIN(DatabaseImpl,byte[],int,byte[],int);3;1;1;visible;
2622;ChildReference::ChildReference();2;1;1;visible;
2623;ChildReference::ChildReference(Node,byte[],long);2;1;1;visible;
2624;ChildReference::ChildReference(Node,byte[],long,byte);2;1;1;visible;
2625;DupCountLN::DupCountLN(int);7;1;1;visible;
2626;DupCountLN::DupCountLN();3;1;1;visible;
2627;BIN::BIN();4;1;1;visible;
2628;BIN::BIN(DatabaseImpl,byte[],int,int);5;1;1;visible;
2629;DIN::DIN();4;1;1;visible;
2630;DIN::DIN(DatabaseImpl,byte[],int,byte[],ChildReference,int);7;2;2;visible;
2631;NameLN::NameLN(DatabaseId);4;1;1;visible;
2632;NameLN::NameLN();3;1;1;visible;
2633;BINReference::BINReference(long,DatabaseId,byte[]);4;1;1;visible;
2634;InconsistentNodeException::InconsistentNodeException();2;1;1;visible;
2635;InconsistentNodeException::InconsistentNodeException(string);2;1;1;visible;
2636;BINDelta::BINDelta(BIN);13;1;1;visible;
2637;BINDelta::BINDelta();4;1;1;visible;
2638;Tree::Tree.SearchType();1;1;1;visible;
2639;Tree::Tree(DatabaseImpl);3;1;1;visible;
2640;Tree::Tree();4;1;1;visible;
2641;Tree::Tree.RootChildReference();2;1;1;visible;
2642;Tree::Tree.RootChildReference(Node,byte[],long);2;1;1;visible;
2643;Tree::Tree.SplitInfo(IN,IN,int);4;1;1;visible;
2644;TrackingInfo::TrackingInfo(long,long);3;1;1;visible;
2645;CursorsExistException::CursorsExistException();1;1;1;visible;
2646;Key::Key(byte[]);6;1;1;visible;
2647;DeltaInfo::DeltaInfo(byte[],long,byte);4;1;1;visible;
2648;DeltaInfo::DeltaInfo();2;1;1;visible;
2649;IN::isStateKnownDeleted(byte):boolean;2;1;1;visible;
2650;IN::isStatePendingDeleted(byte):boolean;2;1;1;visible;
2651;IN::makeFetchErrorMsg(string,IN,long,byte):string;15;1;1;visible;
2652;IN::computeOverhead(DbConfigManager):long;4;1;2;visible;
2653;IN::computeArraysOverhead(DbConfigManager):long;6;1;2;visible;
2654;IN::dumpDeletedState(StringBuffer,byte):void;5;1;1;visible;
2655;Generation::getNextGeneration():long;2;1;1;visible;
2656;Node::setLastNodeId(long):void;3;1;1;visible;
2657;Node::getNextNodeId():long;2;1;1;visible;
2658;Node::getLastId():long;2;1;1;visible;
2659;FileSummaryLN::makePartialKey(long):byte[];5;1;1;visible;
2660;FileSummaryLN::makeFullKey(long,int):byte[];10;1;1;visible;
2661;DBIN::computeOverhead(DbConfigManager):long;4;1;2;visible;
2662;BIN::computeOverhead(DbConfigManager):long;4;1;2;visible;
2663;DIN::computeOverhead(DbConfigManager):long;4;1;2;visible;
2664;TreeUtils::indent(int):string;2;1;1;visible;
2665;TreeUtils::dumpByteArray(byte[]):string;13;1;1;visible;
2666;Key::makeKey(DatabaseEntry):byte[];8;1;1;visible;
2667;Key::compareKeys(byte[],byte[],Comparator):int;5;1;1;visible;
2668;Key::compareUnsignedBytes(byte[],byte[]):int;14;1;1;visible;
2669;Key::dumpString(byte[],int):string;19;1;1;visible;
2670;Key::getNoFormatString(byte[]):string;2;1;1;visible;
2672;DbStat::printUsage(string):void;4;1;1;visible;
2673;DbStat::parseArgs(string[]):void;26;1;1;visible;
2674;DbStat::stats(PrintStream):boolean;21;2;3;invisible;0;0;1;
2675;DbPrintLog::dump(File,string,string,long,long,boolean,boolean):void;17;1;1;visible;
2676;DbVerify::printUsage(string):void;4;1;1;visible;
2677;DbVerify::parseArgs(string[]):void;28;1;1;visible;
2678;DbVerify::openEnv():void;5;1;1;visible;
2679;DbVerify::closeEnv():void;5;1;1;visible;
2680;DbVerify::verify(PrintStream):boolean;40;2;3;invisible;0;0;1;
2681;DbSpace::printUsage(string):void;5;1;1;visible;
2682;DbSpace::parseArgs(string[]):void;24;1;1;visible;
2683;DbSpace::print(PrintStream):void;29;1;1;visible;
2684;DbSpace::compareTo(Object):int;3;1;1;visible;
2685;DbSpace::add(Summary):void;3;1;1;visible;
2686;DbSpace::print(PrintStream):void;12;1;1;visible;
2687;DbSpace::utilization():int;2;1;1;visible;
2688;DbSpace::pad(PrintStream,string,int,char):void;5;1;1;visible;
2689;DbDump::listDbs():void;7;1;1;visible;
2690;DbDump::printUsage(string):void;4;1;1;visible;
2691;DbDump::parseArgs(string[]):boolean;44;1;1;visible;
2692;DbDump::openEnv(boolean):void;7;1;1;visible;
2693;DbDump::dump():void;23;2;4;invisible;1;0;0;
2694;DbDump::printHeader(PrintStream,boolean,boolean):void;9;1;1;visible;
2695;DbDump::dumpOne(PrintStream,byte[],boolean):void;5;1;1;visible;
2696;DbLoad::setCommandLine(boolean):void;2;1;1;visible;
2697;DbLoad::setEnv(Environment):void;2;1;1;visible;
2698;DbLoad::setDbName(string):void;2;1;1;visible;
2699;DbLoad::setInputReader(BufferedReader):void;2;1;1;visible;
2700;DbLoad::setNoOverwrite(boolean):void;2;1;1;visible;
2701;DbLoad::setTextFileMode(boolean):void;2;1;1;visible;
2702;DbLoad::setIgnoreUnknownConfig(boolean):void;2;1;1;visible;
2703;DbLoad::setProgressInterval(long):void;2;1;1;visible;
2704;DbLoad::setTotalLoadBytes(long):void;2;1;1;visible;
2705;DbLoad::load():boolean;23;2;4;invisible;1;0;0;
2706;DbLoad::loadConfigLine(string):void;39;1;1;visible;
2707;DbLoad::loadHeader():void;7;1;1;visible;
2708;DbLoad::loadData(Database):void;35;1;1;visible;
2709;DbLoad::loadLine(string):byte[];12;1;1;visible;
2710;DbLoad::readPrintableLine(string):byte[];31;1;1;visible;
2711;DbStat::DbStat();1;1;1;visible;
2712;DbStat::DbStat(Environment,string);2;1;1;visible;
2713;DbVerify::DbVerify();1;1;1;visible;
2714;DbVerify::DbVerify(Environment,string,boolean);4;1;1;visible;
2715;DbSpace::DbSpace();1;1;1;visible;
2716;DbSpace::DbSpace(Environment,boolean,boolean,boolean);2;1;1;visible;
2717;DbSpace::DbSpace(EnvironmentImpl,boolean,boolean,boolean);5;1;1;visible;
2718;DbSpace::DbSpace.Summary();1;1;1;visible;
2719;DbSpace::DbSpace.Summary(Long,FileSummary);4;1;1;visible;
2720;DbDump::DbDump();1;1;1;visible;
2721;DbDump::DbDump(Environment,string,PrintStream,string,boolean);11;1;1;visible;
2722;DbLoad::DbLoad();1;1;1;visible;
2723;DbRecover::main(string[]):void;41;1;1;visible;
2724;DbRecover::usage():void;7;1;1;visible;
2725;DbCacheSize::main(string[]):void;80;1;1;visible;
2726;DbCacheSize::usage(string):void;5;1;1;visible;
2727;DbCacheSize::printCacheSizes(PrintStream,long,int,int,int,int,long):void;25;1;1;visible;
2728;DbCacheSize::calcInSize(int,int,int,boolean):int;13;1;1;visible;
2729;DbCacheSize::calcLnSize(int):int;2;1;1;visible;
2730;DbCacheSize::line(long,long,string):string;11;1;1;visible;
2731;DbCacheSize::column(StringBuffer,string):void;7;1;1;visible;
2732;DbCacheSize::measure(PrintStream,File,long,int,int,int,boolean):void;23;2;3;invisible;0;0;1;
2733;DbCacheSize::openEnvironment(File,boolean):Environment;5;1;1;visible;
2734;DbCacheSize::openDatabase(Environment,int,boolean):Database;5;1;1;visible;
2735;DbCacheSize::insertRecords(PrintStream,Environment,Database,long,int,int,boolean):void;37;2;2;invisible;0;0;1;
2736;DbCacheSize::preloadRecords(PrintStream,Database):void;14;1;1;visible;
2737;DbCacheSize::printStats(PrintStream,Environment,string):void;7;1;2;visible;
2738;DbStat::main(string[]):void;14;1;1;visible;
2739;DbRunAction::main(string[]):void;99;11;16;invisible;0;1;0;
2740;DbRunAction::removeAndClean(Environment,string):void;33;3;8;invisible;1;0;0;
2741;DbRunAction::getSecs(long,long):string;2;1;1;visible;
2742;DbRunAction::preload(Environment,string):void;15;1;1;visible;
2743;DbRunAction::usage():void;6;1;1;visible;
2744;DbPrintLog::main(string[]):void;53;1;1;visible;
2745;DbPrintLog::usage():void;12;1;1;visible;
2746;DbVerify::main(string[]):void;18;1;1;visible;
2747;DbSpace::main(string[]):void;16;1;1;visible;
2748;DbDump::main(string[]):void;16;1;1;visible;
2749;DbLoad::main(string[]):void;6;1;1;visible;
2750;DbLoad::printUsage(string):void;4;1;1;visible;
2751;DbLoad::parseArgs(string[]):DbLoad;69;1;1;visible;
2752;LatchImpl::setName(string):void;2;1;1;visible;
2753;LatchImpl::acquire():void;38;2;4;invisible;0;0;1;
2754;LatchImpl::acquireNoWait():boolean;19;2;4;invisible;0;0;1;
2755;LatchImpl::releaseIfOwner():void;2;1;1;visible;
2756;LatchImpl::release():void;3;1;1;visible;
2757;LatchImpl::doRelease(boolean):boolean;22;2;2;invisible;0;0;1;
2758;LatchImpl::isOwner():boolean;2;1;1;visible;
2759;LatchImpl::owner():Thread;2;1;1;visible;
2760;LatchImpl::nWaiters():int;2;1;1;visible;
2761;LatchImpl::getLatchStats():LatchStats;6;1;2;visible;
2762;LatchImpl::toString():string;2;1;1;visible;
2763;LatchImpl::getNameString():string;2;1;1;visible;
2764;LatchImpl::noteLatch():boolean;2;1;1;visible;
2765;LatchImpl::unNoteLatch(boolean):boolean;7;1;1;visible;
2766;LatchImpl::toString():string;2;1;1;visible;
2767;Java5LatchImpl::getOwner():Thread;2;1;1;visible;
2768;Java5LatchImpl::setName(string):void;2;1;1;visible;
2769;Java5LatchImpl::acquire():void;15;2;3;invisible;0;0;1;
2770;Java5LatchImpl::acquireNoWait():boolean;16;2;4;invisible;0;0;1;
2771;Java5LatchImpl::releaseIfOwner():void;2;1;1;visible;
2772;Java5LatchImpl::release():void;3;1;1;visible;
2773;Java5LatchImpl::doRelease(boolean):boolean;11;2;2;invisible;0;0;1;
2774;Java5LatchImpl::isOwner():boolean;2;1;1;visible;
2775;Java5LatchImpl::owner():Thread;2;1;1;visible;
2776;Java5LatchImpl::nWaiters():int;2;1;1;visible;
2777;Java5LatchImpl::getLatchStats():LatchStats;6;1;2;visible;
2778;Java5LatchImpl::toString():string;2;1;1;visible;
2779;Java5LatchImpl::noteLatch():boolean;2;1;1;visible;
2780;Java5LatchImpl::unNoteLatch(boolean):boolean;7;1;1;visible;
2781;Java5SharedLatchImpl::setName(string):void;2;1;1;visible;
2782;Java5SharedLatchImpl::setNoteLatch(boolean):void;2;1;1;visible;
2783;Java5SharedLatchImpl::acquireExclusive():void;8;1;1;visible;
2784;Java5SharedLatchImpl::acquireExclusiveNoWait():boolean;9;1;1;visible;
2785;Java5SharedLatchImpl::acquireShared():void;6;1;1;visible;
2786;Java5SharedLatchImpl::release():void;11;1;1;visible;
2787;Java5SharedLatchImpl::noteLatch():boolean;2;1;1;visible;
2788;Java5SharedLatchImpl::unNoteLatch():boolean;2;1;1;visible;
2789;LatchStats::toString():string;10;1;1;visible;
2790;LatchStats::clone():Object;2;1;1;visible;
2791;LatchTable::noteLatch(Object):boolean;8;1;1;visible;
2792;LatchTable::unNoteLatch(Object,string):boolean;7;1;1;visible;
2793;LatchTable::countLatchesHeld():int;7;1;1;visible;
2794;LatchTable::latchesHeldToString():string;9;1;1;visible;
2795;LatchTable::clearNotes():void;2;1;1;visible;
2796;LatchTable::getNameString(string):string;5;1;1;visible;
2797;LatchTable::toString(string,Object,List,int):string;14;1;1;visible;
2798;SharedLatchImpl::setName(string):void;2;1;1;visible;
2799;SharedLatchImpl::setNoteLatch(boolean):void;2;1;1;visible;
2800;SharedLatchImpl::acquireExclusive():void;23;2;3;invisible;0;0;1;
2801;SharedLatchImpl::acquireExclusiveNoWait():boolean;19;2;2;invisible;0;0;1;
2802;SharedLatchImpl::acquireShared():void;19;2;2;invisible;0;0;1;
2803;SharedLatchImpl::release():void;16;2;2;invisible;0;0;1;
2804;SharedLatchImpl::indexOf(Thread):int;7;1;1;visible;
2805;SharedLatchImpl::firstWriter():int;7;1;1;visible;
2806;SharedLatchImpl::getNameString():string;2;1;1;visible;
2807;SharedLatchImpl::noteLatch():boolean;2;1;1;visible;
2808;SharedLatchImpl::unNoteLatch():boolean;2;1;1;visible;
2809;SharedLatchImpl::isWriteLockedByCurrentThread():boolean;6;1;1;visible;
2810;LatchNotHeldException::LatchNotHeldException();2;1;1;visible;
2811;LatchNotHeldException::LatchNotHeldException(string);2;1;1;visible;
2812;LatchImpl::LatchImpl(string,EnvironmentImpl);3;1;1;visible;
2813;LatchImpl::LatchImpl(EnvironmentImpl);3;1;1;visible;
2814;LatchImpl::LatchImpl.LatchWaiter(Thread);3;1;1;visible;
2815;Java5LatchImpl::Java5LatchImpl.JEReentrantLock(boolean);2;1;1;visible;
2816;Java5LatchImpl::Java5LatchImpl();2;1;1;visible;
2817;Java5SharedLatchImpl::Java5SharedLatchImpl();2;1;1;visible;
2818;LatchTable::LatchTable(string);3;1;1;visible;
2819;SharedLatchImpl::SharedLatchImpl(string,EnvironmentImpl);3;1;1;visible;
2820;SharedLatchImpl::SharedLatchImpl.Owner(Thread,int);3;1;1;visible;
2821;LatchException::LatchException();2;1;1;visible;
2822;LatchException::LatchException(string);2;1;1;visible;
2823;LatchSupport::getJava5LatchClass():Class;2;1;1;visible;
2824;LatchSupport::makeLatch(string,EnvironmentImpl):Latch;11;1;1;visible;
2825;LatchSupport::makeLatch(EnvironmentImpl):Latch;9;1;1;visible;
2826;LatchSupport::makeSharedLatch(string,EnvironmentImpl):SharedLatch;11;1;1;visible;
2827;LatchSupport::countLatchesHeld():int;2;1;1;visible;
2828;LatchSupport::dumpLatchesHeld():void;2;1;1;visible;
2829;LatchSupport::latchesHeldToString():string;2;1;1;visible;
2830;LatchSupport::clearNotes():void;2;1;1;visible;
2831;LongConfigParam::validate(Long):void;8;1;1;visible;
2832;LongConfigParam::validateValue(string):void;4;1;1;visible;
2833;LongConfigParam::getExtraDescription():string;9;1;1;visible;
2834;IntConfigParam::validate(Integer):void;8;1;1;visible;
2835;IntConfigParam::validateValue(string):void;4;1;1;visible;
2836;IntConfigParam::getExtraDescription():string;9;1;1;visible;
2837;ShortConfigParam::validate(Short):void;8;1;1;visible;
2838;ShortConfigParam::validateValue(string):void;4;1;1;visible;
2839;ShortConfigParam::getExtraDescription():string;9;1;1;visible;
2840;BooleanConfigParam::validateValue(string):void;3;1;1;visible;
2841;ConfigParam::getName():string;2;1;1;visible;
2842;ConfigParam::getDescription():string;2;1;1;visible;
2843;ConfigParam::getExtraDescription():string;3;1;1;visible;
2844;ConfigParam::getDefault():string;2;1;1;visible;
2845;ConfigParam::isMutable():boolean;2;1;1;visible;
2846;ConfigParam::validate():void;3;1;1;visible;
2847;ConfigParam::validateName(string):void;3;1;1;visible;
2848;ConfigParam::validateValue(string):void;1;1;1;visible;
2849;ConfigParam::toString():string;2;1;1;visible;
2850;LongConfigParam::LongConfigParam(string,Long,Long,Long,boolean,string);5;1;1;visible;
2851;IntConfigParam::IntConfigParam(string,Integer,Integer,Integer,boolean,string);5;1;1;visible;
2852;ShortConfigParam::ShortConfigParam(string,Short,Short,Short,boolean,string);5;1;1;visible;
2853;BooleanConfigParam::BooleanConfigParam(string,boolean,boolean,string);3;1;1;visible;
2854;ConfigParam::ConfigParam(string,string,boolean,string);10;1;1;visible;
2855;EnvironmentParams::main(string[]):void;19;1;1;visible;
2856;EnvironmentParams::addSupportedParam(ConfigParam):void;2;1;1;visible;
2857;INCompressor::toString():string;4;1;1;visible;
2858;INCompressor::clearEnv():void;2;1;1;visible;
2859;INCompressor::verifyCursors():void;20;2;3;invisible;0;0;1;
2860;INCompressor::addToQueue(Object):void;2;1;1;visible;
2861;INCompressor::getBinRefQueueSize():int;5;1;1;visible;
2862;INCompressor::addBinKeyToQueue(BIN,Key,boolean):void;5;1;1;visible;
2863;INCompressor::addBinRefToQueue(BINReference,boolean):void;5;1;1;visible;
2864;INCompressor::addMultipleBinRefsToQueue(Collection,boolean):void;8;1;1;visible;
2865;INCompressor::addBinRefToQueueAlreadyLatched(BINReference):void;7;1;1;visible;
2866;INCompressor::addBinKeyToQueueAlreadyLatched(BIN,Key):void;11;1;1;visible;
2867;INCompressor::exists(long):boolean;4;1;1;visible;
2868;INCompressor::removeCompressibleBinReference(long):BINReference;13;1;1;visible;
2869;INCompressor::loadStats(StatsConfig,EnvironmentStats):void;22;1;2;visible;
2870;INCompressor::nDeadlockRetries():int;2;1;1;visible;
2871;INCompressor::onWakeup():void;7;2;3;invisible;1;0;0;
2872;INCompressor::doCompress():void;80;6;12;invisible;0;1;0;
2873;INCompressor::compressBin(DatabaseImpl,BIN,BINReference,UtilizationTracker):boolean;34;4;7;invisible;1;0;0;
2874;INCompressor::pruneBIN(DatabaseImpl,BINReference,byte[],boolean,byte[],UtilizationTracker):boolean;28;3;7;invisible;0;1;0;
2875;INCompressor::checkForRelocatedSlots(DatabaseImpl,BINReference,UtilizationTracker):void;15;2;3;invisible;0;1;0;
2876;INCompressor::isRunnable():boolean;2;1;1;visible;
2877;INCompressor::searchForBIN(DatabaseImpl,BINReference):BIN;2;1;1;visible;
2878;INCompressor::searchForBIN(DatabaseImpl,byte[],byte[]):BIN;53;2;6;invisible;1;0;0;
2879;INCompressor::resetPerRunCounters():void;6;1;2;visible;
2880;INCompressor::accumulatePerRunCounters():void;6;1;2;visible;
2881;INCompressor::lazyCompress(IN):void;34;3;6;invisible;1;0;0;
2882;INCompressor::findDBAndBIN(BINSearch,BINReference,DbTree,Map):boolean;23;5;8;invisible;1;0;0;
2883;INCompressor::INCompressor(EnvironmentImpl,long,string);6;1;1;visible;
2884;PackedOffsets::iterator():Iterator;2;1;1;visible;
2885;PackedOffsets::pack(long[]):void;15;1;1;visible;
2886;PackedOffsets::toArray():long[];8;1;1;visible;
2887;PackedOffsets::append(short[],int,long):int;11;1;1;visible;
2888;PackedOffsets::hasNext():boolean;2;1;1;visible;
2889;PackedOffsets::next():long;11;1;1;visible;
2890;PackedOffsets::getLogSize():int;2;1;1;visible;
2891;PackedOffsets::writeToLog(ByteBuffer):void;8;1;1;visible;
2892;PackedOffsets::readFromLog(ByteBuffer,byte):void;7;1;1;visible;
2893;PackedOffsets::dumpLog(StringBuffer,boolean):void;13;1;1;visible;
2894;PackedOffsets::getTransactionId():long;2;1;1;visible;
2895;PackedOffsets::logEntryIsTransactional():boolean;2;1;1;visible;
2896;PackedOffsets::toString():string;4;1;1;visible;
2897;Cleaner::envConfigUpdate(DbConfigManager):void;37;3;3;visible;
2898;Cleaner::getUtilizationTracker():UtilizationTracker;2;1;1;visible;
2899;Cleaner::getUtilizationProfile():UtilizationProfile;2;1;1;visible;
2900;Cleaner::runOrPause(boolean):void;5;1;2;visible;
2901;Cleaner::wakeup():void;4;1;1;visible;
2902;Cleaner::requestShutdown():void;4;1;2;visible;
2903;Cleaner::shutdown():void;6;1;2;visible;
2904;Cleaner::getNWakeupRequests():int;6;1;2;visible;
2905;Cleaner::areThreadsRunning():boolean;5;1;1;visible;
2906;Cleaner::doClean(boolean,boolean):int;4;1;1;visible;
2907;Cleaner::loadStats(StatsConfig,EnvironmentStats):void;43;1;2;visible;
2908;Cleaner::deleteSafeToDeleteFiles():void;60;4;6;invisible;0;0;1;
2909;Cleaner::traceFileNotDeleted(Exception,long):void;3;2;2;visible;
2910;Cleaner::getFilesAtCheckpointStart():Set[];4;1;1;visible;
2911;Cleaner::updateFilesAtCheckpointEnd(Set[]):void;3;1;1;visible;
2912;Cleaner::updateReadOnlyFileCollections():void;5;2;2;visible;
2913;Cleaner::processPending():void;26;4;4;invisible;0;0;1;
2914;Cleaner::processPendingLN(LN,DatabaseImpl,byte[],byte[],TreeLocation):void;99;6;11;invisible;0;1;0;
2915;Cleaner::isEvictable(BIN,int):boolean;11;1;2;visible;
2916;Cleaner::lazyMigrateLNs(BIN,boolean):void;35;1;1;visible;
2918;Cleaner::lazyMigrateDupCountLN(DIN,ChildReference,boolean):void;11;1;1;visible;
2919;Cleaner::shouldMigrateLN(boolean,boolean,boolean,boolean,long):boolean;35;2;4;invisible;0;0;1;
2920;Cleaner::migrateLN(DatabaseImpl,long,BIN,int,boolean,boolean,long,string):void;119;3;8;invisible;0;0;1;
2921;Cleaner::migrateDupCountLN(DatabaseImpl,long,DIN,ChildReference,boolean,boolean,long,string):void;90;3;6;invisible;0;0;1;
2922;Cleaner::getLNMainKey(BIN,int):byte[];5;1;1;visible;
2923;Cleaner::getLNDupKey(BIN,int,LN):byte[];14;1;1;visible;
2924;Cleaner::addPendingDB(DatabaseImpl):void;6;2;3;invisible;0;0;1;
2925;Cleaner::trace(Level,string,Node,long,boolean,boolean,boolean):void;17;2;3;visible;
2926;OffsetList::add(long,boolean):boolean;10;1;1;visible;
2927;OffsetList::size():int;2;1;1;visible;
2928;OffsetList::merge(OffsetList):boolean;19;1;1;visible;
2929;OffsetList::toArray():long[];10;1;1;visible;
2930;OffsetList::contains(long):boolean;6;1;1;visible;
2931;OffsetList::add(long):Segment;16;1;1;visible;
2932;OffsetList::get(int):long;2;1;1;visible;
2933;OffsetList::next():Segment;2;1;1;visible;
2934;OffsetList::setNext(Segment):void;2;1;1;visible;
2935;OffsetList::size():int;2;1;1;visible;
2936;LNInfo::getLN():LN;2;1;1;visible;
2937;LNInfo::getDbId():DatabaseId;2;1;1;visible;
2938;LNInfo::getKey():byte[];2;1;1;visible;
2939;LNInfo::getDupKey():byte[];2;1;1;visible;
2940;LNInfo::getMemorySize():int;9;1;1;visible;
2941;FileProcessor::clearEnv():void;5;1;1;visible;
2942;FileProcessor::nDeadlockRetries():int;2;1;1;visible;
2943;FileProcessor::addToQueue(Object):void;2;1;1;visible;
2944;FileProcessor::onWakeup():void;5;1;1;visible;
2945;FileProcessor::doClean(boolean,boolean,boolean):int;65;4;8;invisible;0;0;1;
2946;FileProcessor::processFile(Long):boolean;144;8;25;invisible;1;0;0;
2947;FileProcessor::processLN(Long,TreeLocation,Long,LNInfo,LookAheadCache,Map):void;100;6;14;invisible;0;0;1;
2948;FileProcessor::processFoundLN(LNInfo,long,long,BIN,int,DIN):void;103;3;5;invisible;0;0;1;
2949;FileProcessor::processIN(IN,DatabaseImpl,long):void;40;5;11;invisible;1;0;0;
2950;FileProcessor::findINInTree(Tree,DatabaseImpl,IN,long):IN;42;2;3;invisible;1;0;0;
2951;FileProcessor::doWork(ChildReference):IN;9;1;1;visible;
2952;FileProcessor::isRoot(Tree,DatabaseImpl,IN,long):IN;3;1;1;visible;
2953;FileProcessor::resetPerRunCounters():void;14;1;2;visible;
2954;FileProcessor::accumulatePerRunCounters():void;13;1;2;visible;
2955;FileProcessor::toString():string;4;1;1;visible;
2956;FileProcessor::isEmpty():boolean;2;1;1;visible;
2957;FileProcessor::isFull():boolean;2;1;1;visible;
2958;FileProcessor::nextOffset():Long;2;1;1;visible;
2959;FileProcessor::add(Long,LNInfo):void;6;2;2;visible;
2960;FileProcessor::remove(Long):LNInfo;8;2;2;invisible;0;0;1;
2961;FileSelector::selectFileForCleaning(UtilizationProfile,boolean,boolean,int):Long;28;1;1;visible;
2962;FileSelector::isFileCleaningInProgress(Long):boolean;2;1;1;visible;
2963;FileSelector::putBackFileForCleaning(Long):void;3;1;1;visible;
2964;FileSelector::addCleanedFile(Long):void;3;1;1;visible;
2965;FileSelector::getLowUtilizationFiles():Set;3;1;1;visible;
2966;FileSelector::getMustBeCleanedFiles():Set;4;1;1;visible;
2967;FileSelector::getBacklog():int;2;1;1;visible;
2968;FileSelector::getFilesAtCheckpointStart():Set[];6;2;3;invisible;0;1;0;
2969;FileSelector::updateFilesAtCheckpointEnd(Set[]):void;14;1;1;visible;
2970;FileSelector::addPendingLN(LN,DatabaseId,byte[],byte[]):boolean;5;1;1;visible;
2971;FileSelector::getPendingLNs():LNInfo[];7;1;1;visible;
2972;FileSelector::removePendingLN(long):void;3;1;1;visible;
2973;FileSelector::addPendingDB(DatabaseId):boolean;4;1;2;visible;
2974;FileSelector::getPendingDBs():DatabaseId[];7;1;2;visible;
2975;FileSelector::removePendingDB(DatabaseId):void;3;1;2;visible;
2976;FileSelector::copySafeToDeleteFiles():Set;5;1;1;visible;
2977;FileSelector::removeDeletedFile(Long):void;2;1;1;visible;
2978;FileSelector::updateProcessedFiles():void;4;2;3;invisible;1;0;0;
2979;VerifyUtils::processLSN(long,LogEntryType):void;2;1;1;visible;
2980;VerifyUtils::getLsns():Set;2;1;1;visible;
2981;UtilizationProfile::envConfigUpdate(DbConfigManager):void;4;1;1;visible;
2982;UtilizationProfile::isRMWFixEnabled():boolean;2;1;1;visible;
2983;UtilizationProfile::getNumberOfFiles():int;3;1;1;visible;
2984;UtilizationProfile::getCheapestFileToClean(SortedSet):Long;16;1;1;visible;
2985;UtilizationProfile::getBestFileForCleaning(FileSelector,boolean,Set):Long;59;1;1;visible;
2986;UtilizationProfile::estimateUPObsoleteSize(FileSummary):int;23;1;1;visible;
2987;UtilizationProfile::getFileSummary(Long):FileSummary;19;1;1;visible;
2988;UtilizationProfile::isForceCleanFile(long):boolean;8;1;1;visible;
2989;UtilizationProfile::parseForceCleanFiles(string):void;41;1;1;visible;
2990;UtilizationProfile::countAndLogSummaries(TrackedFileSummary[]):void;12;1;1;visible;
2991;UtilizationProfile::getFileSummaryMap(boolean):SortedMap;19;1;1;visible;
2992;UtilizationProfile::clearCache():void;7;2;2;visible;
2993;UtilizationProfile::removeFile(Long):void;11;2;2;invisible;0;0;1;
2994;UtilizationProfile::deleteFileSummary(Long):void;39;3;3;invisible;0;0;1;
2995;UtilizationProfile::flushFileSummary(TrackedFileSummary):void;3;1;1;visible;
2996;UtilizationProfile::putFileSummary(TrackedFileSummary):PackedOffsets;39;2;2;invisible;0;0;1;
2997;UtilizationProfile::getObsoleteDetail(Long,PackedOffsets,boolean):TrackedFileSummary;72;4;4;invisible;0;0;1;
2998;UtilizationProfile::populateCache():boolean;100;5;11;invisible;1;0;0;
2999;UtilizationProfile::getFirstFSLN(CursorImpl,long,DatabaseEntry,DatabaseEntry,LockType):boolean;13;1;1;visible;
3000;UtilizationProfile::openFileSummaryDatabase():boolean;22;3;5;invisible;1;0;0;
3001;UtilizationProfile::insertFileSummary(FileSummaryLN,long,int):void;22;3;4;invisible;0;0;1;
3002;UtilizationProfile::verifyFileSummaryDatabase():boolean;39;3;3;invisible;0;0;1;
3003;UtilizationProfile::verifyLsnIsObsolete(long):boolean;45;3;5;invisible;1;0;0;
3004;TrackedFileSummary::getAllowFlush():boolean;2;1;1;visible;
3005;TrackedFileSummary::setAllowFlush(boolean):void;2;1;1;visible;
3006;TrackedFileSummary::getFileNumber():long;2;1;1;visible;
3007;TrackedFileSummary::getMemorySize():int;2;1;2;visible;
3008;TrackedFileSummary::reset():void;8;2;3;invisible;1;0;0;
3009;TrackedFileSummary::trackObsolete(long):void;16;2;6;invisible;1;0;0;
3010;TrackedFileSummary::addTrackedSummary(TrackedFileSummary):void;16;2;2;invisible;0;0;1;
3011;TrackedFileSummary::getObsoleteOffsets():long[];5;1;1;visible;
3012;TrackedFileSummary::containsObsoleteOffset(long):boolean;5;1;1;visible;
3013;TrackedFileSummary::updateMemoryBudget(int):void;3;1;2;visible;
3014;FileSummary::isEmpty():boolean;2;1;1;visible;
3015;FileSummary::getObsoleteLNSize():int;9;1;1;visible;
3016;FileSummary::getObsoleteINSize():int;9;1;1;visible;
3017;FileSummary::getObsoleteSize():int;13;1;1;visible;
3018;FileSummary::getEntriesCounted():int;2;1;1;visible;
3019;FileSummary::getNonObsoleteCount():int;2;1;1;visible;
3020;FileSummary::reset():void;9;1;1;visible;
3021;FileSummary::add(FileSummary):void;9;1;1;visible;
3022;FileSummary::getLogSize():int;2;1;1;visible;
3023;FileSummary::writeToLog(ByteBuffer):void;9;1;1;visible;
3024;FileSummary::readFromLog(ByteBuffer,byte):void;14;1;1;visible;
3025;FileSummary::dumpLog(StringBuffer,boolean):void;18;1;1;visible;
3026;FileSummary::getTransactionId():long;2;1;1;visible;
3027;FileSummary::logEntryIsTransactional():boolean;2;1;1;visible;
3028;FileSummary::toString():string;4;1;1;visible;
3029;UtilizationTracker::getEnvironment():EnvironmentImpl;2;1;1;visible;
3030;UtilizationTracker::evictMemory():long;38;3;10;invisible;1;0;0;
3031;UtilizationTracker::activateCleaner():void;3;1;1;visible;
3032;UtilizationTracker::getTrackedFiles():TrackedFileSummary[];2;1;1;visible;
3033;UtilizationTracker::getTrackedFile(long):TrackedFileSummary;8;1;1;visible;
3034;UtilizationTracker::countNewLogEntry(long,LogEntryType,int):boolean;13;1;1;visible;
3035;UtilizationTracker::countObsoleteNode(long,LogEntryType):void;4;1;1;visible;
3036;UtilizationTracker::countObsoleteNodeInexact(long,LogEntryType):void;3;1;1;visible;
3037;UtilizationTracker::countOneNode(TrackedFileSummary,LogEntryType):void;6;1;1;visible;
3038;UtilizationTracker::addSummary(long,TrackedFileSummary):void;3;1;1;visible;
3039;UtilizationTracker::getUnflushableTrackedSummary(long):TrackedFileSummary;4;1;1;visible;
3040;UtilizationTracker::getFile(long):TrackedFileSummary;14;1;1;visible;
3041;UtilizationTracker::resetFile(TrackedFileSummary):void;4;1;1;visible;
3042;UtilizationTracker::takeSnapshot():void;6;1;1;visible;
3043;UtilizationTracker::inArray(Object,Object[]):boolean;5;1;1;visible;
3044;PackedOffsets::PackedOffsets();1;1;1;visible;
3045;PackedOffsets::PackedOffsets.Iterator();1;1;1;visible;
3046;Cleaner::Cleaner(EnvironmentImpl,string);15;1;1;visible;
3047;OffsetList::OffsetList();3;1;1;visible;
3048;OffsetList::OffsetList.Segment();2;1;1;visible;
3049;LNInfo::LNInfo(LN,DatabaseId,byte[],byte[]);5;1;1;visible;
3050;FileProcessor::FileProcessor(string,EnvironmentImpl,Cleaner,UtilizationProfile,FileSelector);6;1;1;visible;
3051;FileProcessor::FileProcessor.RootDoWork(DatabaseImpl,IN,long);4;1;1;visible;
3052;FileProcessor::FileProcessor.LookAheadCache(int);5;2;2;visible;
3053;FileSelector::FileSelector();12;2;3;invisible;1;0;0;
3054;UtilizationProfile::UtilizationProfile(EnvironmentImpl,UtilizationTracker);9;1;1;visible;
3055;TrackedFileSummary::TrackedFileSummary(UtilizationTracker,long,boolean);4;1;1;visible;
3056;FileSummary::FileSummary();1;1;1;visible;
3057;UtilizationTracker::UtilizationTracker(EnvironmentImpl);2;1;1;visible;
3058;UtilizationTracker::UtilizationTracker(EnvironmentImpl,Cleaner);7;1;1;visible;
3059;VerifyUtils::checkLsns(Database):void;53;1;1;visible;
3060;UtilizationProfile::utilization(long,long):int;5;1;1;visible;
3061;Evictor::toString():string;4;1;1;visible;
3062;Evictor::addToQueue(Object):void;2;1;2;visible;
3063;Evictor::loadStats(StatsConfig,EnvironmentStats):void;13;1;2;visible;
3064;Evictor::clearEnv():void;2;1;1;visible;
3065;Evictor::nDeadlockRetries():int;2;1;2;visible;
3066;Evictor::alert():void;3;1;1;visible;
3067;Evictor::onWakeup():void;4;1;2;visible;
3068;Evictor::doEvict(string):void;3;1;1;visible;
3069;Evictor::doEvict(string,boolean):void;16;1;1;visible;
3070;Evictor::doCriticalEviction():void;13;2;3;visible;
3071;Evictor::evictBatch(string,long):long;74;6;12;invisible;1;0;0;
3072;Evictor::isRunnable(string):boolean;49;3;11;invisible;1;0;0;
3073;Evictor::selectIN(INList,ScanIterator):IN;84;3;6;invisible;1;0;0;
3074;Evictor::normalizeLevel(IN,int):int;5;1;1;visible;
3075;Evictor::evict(INList,IN,ScanIterator):long;52;4;4;invisible;0;0;1;
3076;Evictor::evictIN(IN,IN,int,INList,ScanIterator,boolean):long;58;4;8;invisible;1;0;0;
3077;Evictor::getNextNode():IN;2;1;1;visible;
3078;Evictor::setRunnableHook(TestHook):void;2;1;1;visible;
3079;Evictor::count(IN):boolean;3;1;1;visible;
3080;Evictor::getCandidates():List;2;1;1;visible;
3081;Evictor::clear():boolean;3;1;1;visible;
3082;Evictor::reset(IN):void;2;1;1;visible;
3083;Evictor::mark():IN;6;1;1;visible;
3084;Evictor::resetToMark():void;2;1;1;visible;
3085;Evictor::hasNext():boolean;2;1;1;visible;
3086;Evictor::next():IN;2;1;1;visible;
3087;Evictor::remove():void;2;1;1;visible;
3088;Evictor::Evictor(EnvironmentImpl,string);15;2;3;invisible;1;0;0;
3089;Evictor::Evictor.ScanIterator(IN,INList);3;1;1;visible;
3090;Adler32::update(int):void;6;1;1;visible;
3091;Adler32::update(byte[],int,int):void;13;1;1;visible;
3092;Adler32::reset():void;2;1;1;visible;
3093;Adler32::getValue():long;2;1;1;visible;
3094;EventTrace::toString():string;2;1;1;visible;
3095;EventTrace::toString():string;2;1;1;visible;
3096;TinyHashSet::size():int;7;1;1;visible;
3097;TinyHashSet::remove(Object):boolean;12;1;1;visible;
3098;TinyHashSet::add(Object):boolean;12;1;1;visible;
3099;TinyHashSet::copy():Set;9;1;1;visible;
3100;TinyHashSet::iterator():Iterator;6;1;1;visible;
3101;TinyHashSet::hasNext():boolean;2;1;1;visible;
3102;TinyHashSet::next():Object;5;1;1;visible;
3103;TinyHashSet::remove():void;4;1;1;visible;
3104;DbScavenger::setDumpCorruptedBounds(boolean):void;2;1;1;visible;
3105;DbScavenger::dump():void;26;1;1;visible;
3106;DbScavenger::scavengeDbTree(long,long):void;15;1;1;visible;
3108;DbScavenger::reportProgress(long,long):long;8;1;1;visible;
3109;DbScavenger::checkProcessEntry(LogEntry,LogEntryType,boolean):boolean;42;2;4;invisible;1;0;0;
3110;DbScavenger::processDbTreeEntry(LogEntry,LogEntryType):void;20;1;1;visible;
3111;DbScavenger::scavenge(long,long):void;13;1;1;visible;
3113;DbScavenger::processRegularEntry(LogEntry,LogEntryType):void;15;1;1;visible;
3114;DbScavenger::getOutputStream(Integer):PrintStream;17;1;1;visible;
3115;DbScavenger::closeOutputStreams():void;6;1;1;visible;
3116;Tracer::getMessage():string;2;1;2;visible;
3117;Tracer::getCurrentTimestamp():Timestamp;3;1;2;visible;
3118;Tracer::getLogType():LogEntryType;2;1;2;visible;
3119;Tracer::marshallOutsideWriteLatch():boolean;2;1;2;visible;
3120;Tracer::countAsObsoleteWhenLogged():boolean;2;1;2;visible;
3121;Tracer::postLogWork(long):void;1;1;2;visible;
3122;Tracer::getLogSize():int;2;1;2;visible;
3123;Tracer::writeToLog(ByteBuffer):void;4;1;2;visible;
3124;Tracer::readFromLog(ByteBuffer,byte):void;4;1;2;visible;
3125;Tracer::dumpLog(StringBuffer,boolean):void;8;1;2;visible;
3126;Tracer::logEntryIsTransactional():boolean;2;1;2;visible;
3127;Tracer::getTransactionId():long;2;1;2;visible;
3128;Tracer::toString():string;2;1;2;visible;
3129;Tracer::hashCode():int;2;1;2;visible;
3130;Tracer::equals(Object):boolean;11;1;2;visible;
3131;DaemonThread::getThread():Thread;2;1;1;visible;
3132;DaemonThread::runOrPause(boolean):void;11;1;1;visible;
3133;DaemonThread::requestShutdown():void;2;1;1;visible;
3134;DaemonThread::shutdown():void;11;1;1;visible;
3135;DaemonThread::toString():string;4;1;1;visible;
3136;DaemonThread::addToQueue(Object):void;7;2;3;visible;
3137;DaemonThread::getQueueSize():int;8;2;4;invisible;1;0;0;
3138;DaemonThread::addToQueueAlreadyLatched(Collection):void;2;1;1;visible;
3139;DaemonThread::wakeup():void;4;1;1;visible;
3140;DaemonThread::run():void;51;2;3;invisible;0;0;1;
3141;DaemonThread::nDeadlockRetries():int;2;1;1;visible;
3142;DaemonThread::onWakeup():void;1;1;1;visible;
3143;DaemonThread::isShutdownRequested():boolean;2;1;1;visible;
3144;DaemonThread::isRunning():boolean;2;1;1;visible;
3145;DaemonThread::getNWakeupRequests():int;2;1;1;visible;
3146;DbLsn::logEntryIsTransactionalX():boolean;2;1;1;visible;
3147;DbLsn::getTransactionIdX():long;2;1;1;visible;
3148;LevelOrderedINMap::putIN(IN):void;7;1;1;visible;
3149;BitMap::set(long):void;8;1;1;visible;
3150;BitMap::get(long):boolean;8;1;1;visible;
3151;BitMap::getBitSet(long,boolean):BitSet;8;1;1;visible;
3152;BitMap::getIntIndex(long):int;2;1;1;visible;
3153;BitMap::getNumSegments():int;2;1;1;visible;
3154;BitMap::cardinality():int;7;1;1;visible;
3155;EventTrace::EventTrace(string);2;1;1;visible;
3156;EventTrace::EventTrace();2;1;1;visible;
3157;EventTrace::EventTrace.ExceptionEventTrace();2;1;1;visible;
3158;TinyHashSet::TinyHashSet.SingleElementIterator(Object,TinyHashSet);4;1;1;visible;
3159;DbScavenger::DbScavenger(Environment,PrintStream,string,boolean,boolean,boolean);7;1;1;visible;
3160;Tracer::Tracer(string);3;1;2;visible;
3161;Tracer::Tracer();1;1;2;visible;
3162;DaemonThread::DaemonThread(long,string,EnvironmentImpl);7;2;2;visible;
3163;DbLsn::DbLsn();1;1;1;visible;
3164;BitMap::BitMap();2;1;1;visible;
3165;NotImplementedYetException::NotImplementedYetException();2;1;1;visible;
3166;NotImplementedYetException::NotImplementedYetException(string);2;1;1;visible;
3167;InternalException::InternalException();2;1;1;visible;
3168;InternalException::InternalException(string);2;1;1;visible;
3169;Adler32::makeChecksum():Checksum;5;1;1;visible;
3170;CmdUtil::getArg(string[],int):string;5;1;1;visible;
3171;CmdUtil::readLongNumber(string):long;5;1;1;visible;
3172;CmdUtil::formatEntry(StringBuffer,byte[],boolean):void;20;1;1;visible;
3173;CmdUtil::isPrint(int):boolean;2;1;1;visible;
3174;CmdUtil::makeUtilityEnvironment(File,boolean):EnvironmentImpl;17;4;5;invisible;1;0;0;
3175;CmdUtil::getJavaCommand(Class):string;4;1;1;visible;
3176;EventTrace::addEvent(EventTrace):void;6;1;1;visible;
3177;EventTrace::addEvent(string):void;4;1;1;visible;
3178;EventTrace::dumpEvents():void;15;1;1;visible;
3179;HexFormatter::formatLong(long):string;6;1;1;visible;
3180;PropUtil::getBoolean(Properties,string):boolean;6;1;1;visible;
3181;PropUtil::validateProps(Properties,Set,string):Properties;10;1;1;visible;
3182;PropUtil::validateProp(string,Set,string):void;3;1;1;visible;
3183;PropUtil::microsToMillis(long):long;2;1;1;visible;
3184;JarMain::main(string[]):void;10;1;1;visible;
3185;JarMain::usage(string):void;4;1;1;visible;
3186;Tracer::trace(Level,EnvironmentImpl,string):void;3;2;2;visible;
3187;Tracer::trace(EnvironmentImpl,string,string,string,Throwable):void;5;2;3;visible;
3188;Tracer::parseLevel(EnvironmentImpl,ConfigParam):Level;7;1;1;visible;
3189;Tracer::getStackTrace(Throwable):string;7;1;1;visible;
3190;TestHookExecute::doHookIfSet(TestHook):boolean;4;1;1;visible;
3191;DbLsn::makeLsn(long,long):long;2;1;1;visible;
3192;DbLsn::longToLsn(Long):long;4;1;1;visible;
3193;DbLsn::getFileNumber(long):long;2;1;1;visible;
3194;DbLsn::getFileOffset(long):long;2;1;1;visible;
3195;DbLsn::compareLong(long,long):int;7;1;1;visible;
3196;DbLsn::compareTo(long,long):int;9;1;1;visible;
3197;DbLsn::toString(long):string;2;1;1;visible;
3198;DbLsn::getNoFormatString(long):string;2;1;1;visible;
3199;DbLsn::dumpString(long,int):string;5;1;1;visible;
3200;DbLsn::getNoCleaningDistance(long,long,long):long;15;1;1;visible;
3201;DbLsn::getWithCleaningDistance(long,FileManager,long,long):long;20;1;1;visible;
3202;DbLsn::calcDiff(long,long,long,long):long;5;1;1;visible;
3203;CheckpointEnd::getLogType():LogEntryType;2;1;1;visible;
3204;CheckpointEnd::marshallOutsideWriteLatch():boolean;2;1;1;visible;
3205;CheckpointEnd::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
3206;CheckpointEnd::postLogWork(long):void;1;1;1;visible;
3207;CheckpointEnd::getLogSize():int;14;1;1;visible;
3208;CheckpointEnd::writeToLog(ByteBuffer):void;14;2;3;invisible;1;0;0;
3209;CheckpointEnd::readFromLog(ByteBuffer,byte):void;14;2;3;invisible;1;0;0;
3210;CheckpointEnd::dumpLog(StringBuffer,boolean):void;22;2;3;invisible;1;0;0;
3211;CheckpointEnd::logEntryIsTransactional():boolean;2;1;1;visible;
3212;CheckpointEnd::getTransactionId():long;2;1;1;visible;
3213;CheckpointEnd::toString():string;15;2;3;invisible;1;0;0;
3214;CheckpointEnd::getCheckpointStartLsn():long;2;1;1;visible;
3215;CheckpointEnd::getRootLsn():long;2;1;1;visible;
3216;CheckpointEnd::getFirstActiveLsn():long;2;1;1;visible;
3217;CheckpointEnd::getLastNodeId():long;2;1;1;visible;
3218;CheckpointEnd::getLastDbId():int;2;1;1;visible;
3219;CheckpointEnd::getLastTxnId():long;2;1;2;visible;
3220;CheckpointEnd::getId():long;2;1;1;visible;
3221;CheckpointStart::getLogType():LogEntryType;2;1;1;visible;
3222;CheckpointStart::marshallOutsideWriteLatch():boolean;2;1;1;visible;
3223;CheckpointStart::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
3224;CheckpointStart::postLogWork(long):void;1;1;1;visible;
3225;CheckpointStart::getLogSize():int;2;1;1;visible;
3226;CheckpointStart::writeToLog(ByteBuffer):void;4;1;1;visible;
3227;CheckpointStart::readFromLog(ByteBuffer,byte):void;4;1;1;visible;
3228;CheckpointStart::dumpLog(StringBuffer,boolean):void;5;1;1;visible;
3229;CheckpointStart::logEntryIsTransactional():boolean;2;1;1;visible;
3230;CheckpointStart::getTransactionId():long;2;1;1;visible;
3231;Checkpointer::getHighestFlushLevel():int;2;1;1;visible;
3232;Checkpointer::setCheckpointId(long):void;2;1;1;visible;
3233;Checkpointer::toString():string;4;1;2;visible;
3234;Checkpointer::loadStats(StatsConfig,EnvironmentStats):void;13;1;2;visible;
3235;Checkpointer::getFirstActiveLsn():long;2;1;1;visible;
3236;Checkpointer::setFirstActiveLsn(long):void;2;1;1;visible;
3237;Checkpointer::clearEnv():void;2;1;2;visible;
3238;Checkpointer::nDeadlockRetries():int;2;1;2;visible;
3239;Checkpointer::onWakeup():void;5;1;2;visible;
3240;Checkpointer::isRunnable(CheckpointConfig):boolean;54;7;15;invisible;0;1;0;
3241;Checkpointer::doCheckpoint(CheckpointConfig,boolean,string):void;107;8;26;invisible;1;0;0;
3242;Checkpointer::trace(EnvironmentImpl,string,boolean):void;11;2;5;invisible;1;0;0;
3243;Checkpointer::flushUtilizationInfo():void;8;1;2;visible;
3244;Checkpointer::flushDirtyNodes(SortedMap,boolean,boolean,boolean,long):void;25;4;4;invisible;0;0;1;
3245;Checkpointer::selectDirtyINs(boolean,boolean):SortedMap;52;4;13;invisible;1;0;0;
3246;Checkpointer::flushIN(CheckpointReference,Map,int,boolean,boolean,long):void;76;3;3;invisible;0;0;1;
3247;Checkpointer::checkParentChildRelationship(SearchResult,int):boolean;27;1;1;visible;
3248;Checkpointer::dumpParentChildInfo(SearchResult,IN,long,int,Tree):string;9;1;1;visible;
3249;Checkpointer::logTargetAndUpdateParent(IN,IN,int,boolean,long,boolean):boolean;42;4;8;invisible;1;0;0;
3250;Checkpointer::doWork(ChildReference):IN;18;2;4;invisible;1;0;0;
3251;Checkpointer::getFlushed():boolean;2;1;1;visible;
3252;Checkpointer::stillRoot():boolean;2;1;1;visible;
3253;Checkpointer::addToDirtyMap(Map,IN):void;10;1;1;visible;
3254;Checkpointer::resetPerRunCounters():void;4;1;2;visible;
3255;Checkpointer::equals(Object):boolean;5;1;1;visible;
3256;Checkpointer::hashCode():int;2;1;1;visible;
3257;RecoveryManager::recover(boolean):RecoveryInfo;78;7;9;invisible;0;0;1;
3258;RecoveryManager::findEndOfLog(boolean):void;25;2;2;visible;
3259;RecoveryManager::findLastCheckpoint():void;45;1;1;visible;
3260;RecoveryManager::buildTree():void;137;4;32;invisible;1;0;0;
3261;RecoveryManager::readINsAndTrackIds(long):void;44;3;6;invisible;1;0;0;
3262;RecoveryManager::readINs(long,boolean,LogEntryType,LogEntryType,LogEntryType,boolean):int;39;1;1;visible;
3263;RecoveryManager::replayOneIN(INFileReader,DatabaseImpl,boolean):void;35;2;2;invisible;0;0;1;
3264;RecoveryManager::undoLNs(RecoveryInfo,Set):void;74;8;13;invisible;0;1;0;
3265;RecoveryManager::redoLNs(RecoveryInfo,Set):void;74;5;9;invisible;0;1;0;
3266;RecoveryManager::rebuildINList():void;14;1;1;visible;
3267;RecoveryManager::equals(Object):boolean;6;1;1;visible;
3268;RecoveryManager::hashCode():int;2;1;1;visible;
3269;RecoveryManager::toString():string;2;1;1;visible;
3270;RecoveryManager::replaceOrInsert(DatabaseImpl,IN,long,long,boolean):void;25;3;3;invisible;0;0;1;
3271;RecoveryManager::printTrackList(List):string;12;1;1;visible;
3272;RecoveryManager::replayINDelete(DatabaseImpl,long,boolean,byte[],byte[],long):void;31;4;4;invisible;0;0;1;
3273;RecoveryManager::doWork(ChildReference):IN;3;1;1;visible;
3274;RecoveryManager::replaceOrInsertRoot(DatabaseImpl,IN,long):void;15;2;2;invisible;0;0;1;
3275;RecoveryManager::doWork(ChildReference):IN;17;2;3;invisible;1;0;0;
3276;RecoveryManager::updateDone():boolean;2;1;1;visible;
3277;RecoveryManager::getInserted():boolean;2;1;1;visible;
3278;RecoveryManager::getReplaced():boolean;2;1;1;visible;
3279;RecoveryManager::getOriginalLsn():long;2;1;1;visible;
3280;RecoveryManager::replaceOrInsertDuplicateRoot(DatabaseImpl,DIN,long):void;40;3;3;invisible;0;0;1;
3281;RecoveryManager::replaceOrInsertChild(DatabaseImpl,IN,long,long,List,boolean):void;48;3;3;invisible;0;0;1;
3282;RecoveryManager::redo(DatabaseImpl,TreeLocation,LN,byte[],byte[],long,RecoveryInfo):long;68;4;4;invisible;0;0;1;
3283;RecoveryManager::redoUtilizationInfo(long,long,long,boolean,LN,TxnNodeId,Set):void;42;2;7;invisible;0;1;0;
3284;RecoveryManager::undoUtilizationInfo(LN,long,long,boolean,TxnNodeId,Map,Set):void;23;2;7;invisible;0;1;0;
3285;RecoveryManager::passStartHeader(int):string;2;1;1;visible;
3286;RecoveryManager::passEndHeader(int,long,long):string;2;1;1;visible;
3287;RecoveryManager::traceINDeleteReplay(long,long,boolean,boolean,int,boolean):void;13;2;3;visible;
3288;RecoveryManager::traceAndThrowException(long,string,Exception):void;6;2;3;invisible;1;0;0;
3289;RecoveryInfo::toString():string;25;2;3;invisible;1;0;0;
3290;RecoveryInfo::appendLsn(StringBuffer,string,long):void;3;1;1;visible;
3291;RecoveryException::RecoveryException(EnvironmentImpl,string,Throwable);2;1;1;visible;
3292;RecoveryException::RecoveryException(EnvironmentImpl,string);2;1;1;visible;
3293;CheckpointEnd::CheckpointEnd(string,long,long,long,long,int,long,long);23;2;4;invisible;1;0;0;
3294;CheckpointEnd::CheckpointEnd();4;1;1;visible;
3295;CheckpointStart::CheckpointStart(long,string);8;1;1;visible;
3296;CheckpointStart::CheckpointStart();1;1;1;visible;
3297;Checkpointer::Checkpointer(EnvironmentImpl,long,string);16;5;11;invisible;1;0;0;
3298;Checkpointer::Checkpointer.RootFlusher(DatabaseImpl,LogManager,long);6;1;1;visible;
3299;Checkpointer::Checkpointer.CheckpointReference(DatabaseImpl,long,boolean,boolean,byte[],byte[]);7;1;1;visible;
3300;RecoveryManager::RecoveryManager(EnvironmentImpl);16;3;4;invisible;1;0;0;
3301;RecoveryManager::RecoveryManager.TxnNodeId(long,long);3;1;1;visible;
3302;RecoveryManager::RecoveryManager.RootDeleter(Tree);2;1;1;visible;
3303;RecoveryManager::RecoveryManager.RootUpdater(Tree,IN,long);4;1;1;visible;
3304;Checkpointer::getWakeupPeriod(DbConfigManager):long;14;4;7;invisible;0;1;0;
3305;RecoveryManager::undo(Level,DatabaseImpl,TreeLocation,LN,byte[],byte[],long,long,boolean,RecoveryInfo,boolean):void;70;5;8;invisible;1;0;0;
3306;RecoveryManager::insertRecovery(DatabaseImpl,TreeLocation,long):boolean;30;1;1;visible;
3307;RecoveryManager::trace(Level,DatabaseImpl,string,boolean,Node,long,IN,boolean,boolean,boolean,long,long,int):void;32;2;3;visible;
3308;RecoveryManager::traceRootDeletion(Level,DatabaseImpl):void;10;2;3;visible;
3309;LNLogEntry::readEntry(ByteBuffer,int,byte,boolean):void;33;2;2;invisible;0;0;1;
3310;LNLogEntry::dumpEntry(StringBuffer,boolean):StringBuffer;16;2;6;invisible;1;0;0;
3311;LNLogEntry::getMainItem():Object;2;1;1;visible;
3312;LNLogEntry::clone():Object;2;1;1;visible;
3313;LNLogEntry::isTransactional():boolean;2;1;2;visible;
3314;LNLogEntry::getTransactionId():long;5;1;2;visible;
3315;LNLogEntry::getNodeId():long;2;1;1;visible;
3316;LNLogEntry::getLogType():LogEntryType;2;1;1;visible;
3317;LNLogEntry::marshallOutsideWriteLatch():boolean;2;1;1;visible;
3318;LNLogEntry::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
3319;LNLogEntry::postLogWork(long):void;4;2;2;visible;
3320;LNLogEntry::getLogSize():int;10;2;3;invisible;1;0;0;
3321;LNLogEntry::writeToLog(ByteBuffer):void;12;2;2;visible;
3322;LNLogEntry::getLN():LN;2;1;1;visible;
3323;LNLogEntry::getDbId():DatabaseId;2;1;1;visible;
3324;LNLogEntry::getKey():byte[];2;1;1;visible;
3325;LNLogEntry::getDupKey():byte[];5;1;1;visible;
3326;LNLogEntry::getAbortLsn():long;2;1;1;visible;
3327;LNLogEntry::getAbortKnownDeleted():boolean;2;1;1;visible;
3328;LNLogEntry::getTxnId():Long;5;1;2;visible;
3329;LNLogEntry::getUserTxn():Txn;5;1;2;visible;
3330;SingleItemLogEntry::readEntry(ByteBuffer,int,byte,boolean):void;6;1;1;visible;
3331;SingleItemLogEntry::dumpEntry(StringBuffer,boolean):StringBuffer;3;1;1;visible;
3332;SingleItemLogEntry::getMainItem():Object;2;1;1;visible;
3333;SingleItemLogEntry::clone():Object;2;1;1;visible;
3334;SingleItemLogEntry::isTransactional():boolean;2;1;1;visible;
3335;SingleItemLogEntry::getTransactionId():long;2;1;1;visible;
3336;SingleItemLogEntry::getNewInstance():LogEntry;5;1;1;visible;
3337;INLogEntry::readEntry(ByteBuffer,int,byte,boolean):void;37;1;1;visible;
3338;INLogEntry::getObsoleteLsn():long;2;1;1;visible;
3339;INLogEntry::dumpEntry(StringBuffer,boolean):StringBuffer;4;1;1;visible;
3340;INLogEntry::getMainItem():Object;2;1;1;visible;
3341;INLogEntry::clone():Object;2;1;1;visible;
3342;INLogEntry::isTransactional():boolean;2;1;1;visible;
3343;INLogEntry::getTransactionId():long;2;1;1;visible;
3344;INLogEntry::getLogType():LogEntryType;2;1;1;visible;
3345;INLogEntry::marshallOutsideWriteLatch():boolean;2;1;1;visible;
3346;INLogEntry::countAsObsoleteWhenLogged():boolean;2;1;1;visible;
3347;INLogEntry::postLogWork(long):void;1;1;1;visible;
3348;INLogEntry::getLogSize():int;2;1;1;visible;
3349;INLogEntry::writeToLog(ByteBuffer):void;4;1;1;visible;
3350;INLogEntry::getIN(EnvironmentImpl):IN;2;1;1;visible;
3351;INLogEntry::getNodeId():long;2;1;1;visible;
3352;INLogEntry::getDbId():DatabaseId;2;1;1;visible;
3353;INLogEntry::getLsnOfIN(long):long;2;1;1;visible;
3354;DeletedDupLNLogEntry::readEntry(ByteBuffer,int,byte,boolean):void;8;1;1;visible;
3355;DeletedDupLNLogEntry::dumpEntry(StringBuffer,boolean):StringBuffer;4;1;1;visible;
3356;DeletedDupLNLogEntry::getLogSize():int;2;1;1;visible;
3357;DeletedDupLNLogEntry::writeToLog(ByteBuffer):void;3;1;1;visible;
3358;DeletedDupLNLogEntry::getDupKey():byte[];2;1;1;visible;
3359;BINDeltaLogEntry::getIN(EnvironmentImpl):IN;3;1;1;visible;
3360;BINDeltaLogEntry::getDbId():DatabaseId;3;1;1;visible;
3361;BINDeltaLogEntry::getLsnOfIN(long):long;3;1;1;visible;
3362;LNLogEntry::LNLogEntry(Class,boolean);4;2;2;visible;
3363;LNLogEntry::LNLogEntry(LogEntryType,LN,DatabaseId,byte[],long,boolean,Txn);12;2;3;visible;
3364;SingleItemLogEntry::SingleItemLogEntry(Class);2;1;1;visible;
3365;INLogEntry::INLogEntry(Class);2;1;1;visible;
3366;INLogEntry::INLogEntry(IN);6;1;1;visible;
3367;DeletedDupLNLogEntry::DeletedDupLNLogEntry(boolean);2;1;1;visible;
3368;DeletedDupLNLogEntry::DeletedDupLNLogEntry(LogEntryType,LN,DatabaseId,byte[],byte[],long,boolean,Txn);3;2;3;invisible;0;1;0;
3369;BINDeltaLogEntry::BINDeltaLogEntry(Class);2;1;1;visible;
