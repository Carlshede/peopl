no;methodName;statements;involvedModules;fragments;visibility;baseSplit;fineGrained;nested;
1;toString():String;2;1;2;visible;
2;toString(String[]):String;2;1;2;visible;
3;setChildren(Object...):void;8;1;1;visible;
4;setChildren(Node[]):void;2;1;1;visible;
5;getChildren():Node[];2;1;1;visible;
6;simplify():void;3;1;1;visible;
7;clone():Node;1;1;1;visible;
8;equals(Object):boolean;15;1;1;visible;
9;eliminate(Class<? extends Node>...):Node;2;1;1;visible;
10;eliminate(List<Class<? extends Node>>):Node;5;1;1;visible;
11;clausify():Node;2;1;1;visible;
12;fuseWithSimilarChildren():void;14;1;1;visible;
13;chooseKofN(Node[],int,boolean):Node[];38;1;1;visible;
14;toCNF():Node;8;1;2;visible;
15;toCNFprintln():Node;15;1;2;visible;
16;collectChildren(Node,List<Node>):void;6;1;1;visible;
17;simplify():void;8;1;1;visible;
18;clone():Node;2;1;1;visible;
19;eliminate(List<Class<? extends Node>>):Node;6;1;1;visible;
20;clone():Node;2;1;1;visible;
21;eliminate(List<Class<? extends Node>>):Node;6;1;1;visible;
22;clone():Node;2;1;1;visible;
23;eliminate(List<Class<? extends Node>>):Node;5;1;1;visible;
24;clone():Node;2;1;1;visible;
25;eliminate(List<Class<? extends Node>>):Node;5;1;1;visible;
26;clone():Node;2;1;1;visible;
27;eliminate(List<Class<? extends Node>>):Node;5;1;1;visible;
28;equals(Object):boolean;5;1;1;visible;
29;clone():Node;2;1;1;visible;
30;eliminate(List<Class<? extends Node>>):Node;31;1;1;visible;
31;clone():Node;2;1;1;visible;
32;stringToNode(String):Node;5;1;1;visible;
33;stringToNode(String,List<String>):Node;11;1;1;visible;
34;getErrorMessage():String;2;1;1;visible;
35;isWellFormed(String):boolean;3;1;1;visible;
36;isWellFormed(String,List<String>):boolean;4;1;1;visible;
37;getNode(String):Node;16;1;1;visible;
38;wellformed(String):boolean;71;1;1;visible;
39;activateShortSymbols():void;6;1;1;visible;
40;activateTextualSymbols():void;6;1;1;visible;
41;activateLogicalSymbols():void;6;1;1;visible;
42;flip():void;2;1;1;visible;
43;eliminate(List<Class<? extends Node>>):Node;3;1;1;visible;
44;clausify():Node;3;1;1;visible;
45;simplify():void;2;1;1;visible;
46;clone():Node;2;1;1;visible;
47;equals(Object):boolean;4;1;1;visible;
48;clausify():Node;8;1;1;visible;
49;createCNF(Node[]):Node;12;1;1;visible;
50;updateClauses(LinkedList<LinkedList<Node>>,LinkedList<Node[]>):LinkedList<LinkedList<Node>>;17;1;1;visible;
51;add(LinkedList<LinkedList<Node>>,LinkedList<Node>):void;5;1;1;visible;
52;containedIn(LinkedList<Node>,LinkedList<Node>):boolean;5;1;1;visible;
53;containedIn(Node[],LinkedList<Node>):boolean;5;1;1;visible;
54;collectChildren(Node,List<Node>):void;6;1;1;visible;
55;simplify():void;8;1;1;visible;
56;clone():Node;2;1;1;visible;
57;testTautology1():void;2;1;1;visible;
58;testTautology2():void;2;1;1;visible;
59;testTautology3():void;2;1;1;visible;
60;testTautology4():void;2;1;1;visible;
61;testTautology5():void;2;1;1;visible;
62;testTautology6():void;2;1;1;visible;
63;testTautology7():void;2;1;1;visible;
64;testTautology8():void;2;1;1;visible;
65;testTautology9():void;2;1;1;visible;
66;testTautology10():void;2;1;1;visible;
67;testTautology11():void;2;1;1;visible;
68;testTautology12():void;2;1;1;visible;
69;testTautology13():void;2;1;1;visible;
70;testTautology14():void;2;1;1;visible;
71;testTautology15():void;2;1;1;visible;
72;testTautology16():void;2;1;1;visible;
73;testTautologyImplies():void;2;1;1;visible;
74;testDelphi():void;7;1;1;visible;
75;taut(Object,Object):void;2;1;1;visible;
76;taut(Node):void;2;1;1;visible;
77;isTautology(Node):boolean;2;1;1;visible;
78;testSolutionCounting1():void;2;1;1;visible;
79;testSolutionCounting2():void;2;1;1;visible;
80;testSolutionCounting3():void;2;1;1;visible;
81;solutions(int,Node):void;2;1;1;visible;
82;testArrayIndexOutOfBounds1():void;13;1;1;visible;
83;testArrayIndexOutOfBounds2():void;9;1;1;visible;
84;testArrayIndexOutOfBounds3():void;10;1;1;visible;
85;testBinom():void;10;1;1;visible;
86;testChoose():void;8;1;1;visible;
87;testReaderByObject(String,Node):void;3;1;1;visible;
88;testReaderLiteral():void;3;1;1;visible;
89;testReaderLiteralWithBrackets():void;3;1;1;visible;
90;testReaderNot():void;4;1;1;visible;
91;testReaderAnd():void;4;1;1;visible;
92;testReaderOr():void;4;1;1;visible;
93;testReaderImplies():void;4;1;1;visible;
94;testReaderIff():void;4;1;1;visible;
95;testReaderWithoutBrackets1():void;4;1;1;visible;
96;testReaderWithoutBrackets2():void;4;1;1;visible;
97;testReaderWithoutBrackets3():void;4;1;1;visible;
98;testReaderWithBrackets1():void;4;1;1;visible;
99;testReaderWithBrackets2():void;4;1;1;visible;
100;testReaderWithBrackets3():void;4;1;1;visible;
101;testReaderWithBracketsAndSpaces1():void;4;1;1;visible;
102;testReaderWithBracketsAndSpaces2():void;4;1;1;visible;
103;testReaderWithBrackets5():void;4;1;1;visible;
104;testReaderWithBrackets6():void;3;1;1;visible;
105;testReaderFeatureNameContainsOperator():void;4;1;1;visible;
106;testReaderEmptyString():void;3;1;1;visible;
107;testValidatorWithFeatureNames1():void;5;1;1;visible;
108;testValidatorWithFeatureNames2():void;5;1;1;visible;
109;testValidatorWithFeatureNames3():void;5;1;1;visible;
110;testValidatorWithFeatureNames4():void;5;1;1;visible;
111;testValidatorWithFeatureNames5():void;5;1;1;visible;
112;testValidatorWithFeatureNames6():void;5;1;1;visible;
113;testValidatorWithFeatureNames7():void;5;1;1;visible;
114;testValidatorWithFeatureNames8():void;5;1;1;visible;
115;testValidatorWithFeatureNames9():void;5;1;1;visible;
116;testValidatorWithFeatureNames10():void;5;1;1;visible;
117;testValidatorWithFeatureNames11():void;5;1;1;visible;
118;testValidatorWithFeatureNames12():void;5;1;1;visible;
119;testValidatorWithFeatureNames13():void;5;1;1;visible;
120;testValidatorWithFeatureNames14():void;5;1;1;visible;
121;testValidatorWithFeatureNames(String,String[]):boolean;3;1;1;visible;
122;testValidatorWithoutFeatureNames(String):boolean;3;1;1;visible;
123;testSimplify1():void;8;1;1;visible;
124;testSimplify2():void;8;1;1;visible;
125;testSimplify3():void;8;1;1;visible;
126;testSimplify4():void;8;1;1;visible;
127;testSat4J():void;8;1;1;visible;
128;readVars(Node):void;9;1;1;visible;
129;initSolver(Node,long):void;6;1;1;visible;
130;addClauses(Node):void;9;1;1;visible;
131;addClause(Node):void;12;1;1;visible;
132;getIntOfLiteral(Node):int;15;1;1;visible;
133;knownValues():List<Literal>;12;1;1;visible;
134;isSatisfiable():boolean;2;1;1;visible;
135;isSatisfiable(Node[]):boolean;8;1;1;visible;
136;isSatisfiable(List<Node>):boolean;8;1;1;visible;
137;isSatisfiable(Node):boolean;21;1;1;visible;
138;countSolutions():long;9;1;1;visible;
139;getSolutions(int):String;28;1;1;visible;
140;getSolution():String;12;1;1;visible;
141;And(Object...);2;1;1;visible;
142;And(Node[]);2;1;1;visible;
143;AtLeast(int,Object...);3;1;1;visible;
144;AtLeast(int,Node[]);3;1;1;visible;
145;AtMost(int,Object...);3;1;1;visible;
146;AtMost(int,Node[]);3;1;1;visible;
147;Choose(int,Object...);3;1;1;visible;
148;Choose(int,Node[]);3;1;1;visible;
149;Equals(Object,Object);2;1;1;visible;
150;Implies(Object,Object);2;1;1;visible;
151;Not(Object);2;1;1;visible;
152;NodeReader();4;1;1;visible;
153;Literal(Object,boolean);3;1;1;visible;
154;Literal(Object);3;1;1;visible;
155;Or(Object...);2;1;1;visible;
156;Or(Node[]);2;1;1;visible;
157;SatSolver(Node,long);5;1;1;visible;
158;clone(Node[]):Node[];6;1;1;visible;
159;clone(LinkedList<Node>):LinkedList<Node>;5;1;1;visible;
160;getNode(Object):Node;2;1;1;visible;
161;binom(int,int):int;9;1;1;visible;
162;negateNodes(Node[]):void;3;1;1;visible;
163;stringToNodeRec(String,String[],LinkedList<String>):Node;26;1;1;visible;
164;isIntNumber(String):boolean;5;1;1;visible;
165;insertWhitespacesAtBrackets(String):String;4;1;1;visible;
166;reduceWhiteSpaces(String):String;9;1;1;visible;
167;nodeToString(Node):String;2;1;1;visible;
168;nodeToString(Node,String[]):String;2;1;1;visible;
169;nodeToString(Node,String[],boolean):String;2;1;1;visible;
170;nodeToString(Node,String[],boolean,Class<? extends Node>):String;6;1;1;visible;
171;multipleNodeToString(Node,String[],boolean,Class<? extends Node>):String;24;1;1;visible;
172;order(Class<? extends Node>):int;16;1;1;visible;
173;getSeparator(Node,String[]):String;16;1;1;visible;
174;suite():Test;2;1;1;visible;
