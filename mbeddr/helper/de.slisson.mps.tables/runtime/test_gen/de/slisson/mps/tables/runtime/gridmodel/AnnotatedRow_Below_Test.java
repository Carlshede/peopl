package de.slisson.mps.tables.runtime.gridmodel;

/*Generated by MPS */

import junit.framework.TestCase;
import junit.framework.Assert;

public class AnnotatedRow_Below_Test extends TestCase {
  private Grid row0;
  private Grid row1;
  private Grid row2;
  private Grid annotatedRow1;
  private Grid gridMain;
  private GridLeaf annotation;
  public void test_sizeX() throws Exception {
    Assert.assertEquals(3, gridMain.getSizeX());
  }
  public void test_sizeY() throws Exception {
    Assert.assertEquals(4, gridMain.getSizeY());
  }
  public void test_annotation_position() throws Exception {
    Assert.assertSame(annotation, gridMain.getElement(0, 2));
  }
  public void test_annotation_spanning() throws Exception {
    Assert.assertEquals(3, annotation.getSpanX());
    Assert.assertEquals(SpannedPosition.class, gridMain.getElement(1, 2).getClass());
    Assert.assertEquals(SpannedPosition.class, gridMain.getElement(2, 2).getClass());
  }
  public void setUp() {
    row0 = new Grid();
    row1 = new Grid();
    row2 = new Grid();

    row0.setElement(0, 0, new GridLeaf("R0C0"));
    row0.setElement(1, 0, new GridLeaf("R0C1"));
    row0.setElement(2, 0, new GridLeaf("R0C2"));

    row1.setElement(0, 0, new GridLeaf("R1C0"));
    row1.setElement(1, 0, new GridLeaf("R1C1"));
    row1.setElement(2, 0, new GridLeaf("R1C2"));

    row2.setElement(0, 0, new GridLeaf("R2C0"));
    row2.setElement(1, 0, new GridLeaf("R2C1"));
    row2.setElement(2, 0, new GridLeaf("R2C2"));

    annotation = new GridLeaf("Annotation");
    annotatedRow1 = new Grid();
    annotatedRow1.setElement(0, 1, annotation);
    annotatedRow1.setElement(0, 0, row1);

    gridMain = new Grid();
    gridMain.setElement(0, 0, row0);
    gridMain.setElement(0, 1, annotatedRow1);
    gridMain.setElement(0, 2, row2);

    gridMain.flatten();
  }
}
