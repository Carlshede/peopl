package de.slisson.mps.tables.runtime.gridmodel;

/*Generated by MPS */

import junit.framework.TestCase;
import junit.framework.Assert;
import java.util.List;
import java.util.ArrayList;

public class DemoStateMachine_Test extends TestCase {
  private Grid main;
  private int transitionSequence = 0;
  public void test_sizeX() throws Exception {
    Assert.assertEquals(5, main.getSizeX());
  }
  public void test_sizeY() throws Exception {
    Assert.assertEquals(16, main.getSizeY());
  }
  public void setUp() {
    main = buildGrid();
    main.flatten();
  }

  public Grid buildTransition(HeaderReference state, HeaderReference event) {
    Grid grid = new Grid();
    grid.setElement(0, 0, new GridLeaf("T" + transitionSequence++));
    grid.setColumnHeader(0, 0, event.clone());
    grid.setRowHeader(0, 0, state.clone());
    return grid;
  }

  public Grid buildTransitions(HeaderReference state, HeaderReference event, int count) {
    Grid grid = new Grid();
    for (int i = 0; i < count; i++) {
      grid.setElement(0, i, buildTransition(state, event));
    }
    return grid;
  }

  public Grid buildGrid() {
    Grid grid = new Grid();
    List<HeaderReference> states = new ArrayList<HeaderReference>();
    List<HeaderReference> events = new ArrayList<HeaderReference>();
    for (int i = 0; i < 5; i++) {
      states.add(new StringHeaderReference("State" + i));
      grid.setRowHeader(0, i, states.get(i));
    }
    for (int i = 0; i < 5; i++) {
      events.add(new StringHeaderReference("Event" + i));
      grid.setColumnHeader(i, 0, events.get(i));
    }

    for (int y = 0; y < states.size(); y++) {
      for (int x = 0; x < events.size(); x++) {
        grid.setElement(x, y, buildTransitions(states.get(y), events.get(x), Math.abs(x - y)));
      }
    }

    return grid;
  }
}
