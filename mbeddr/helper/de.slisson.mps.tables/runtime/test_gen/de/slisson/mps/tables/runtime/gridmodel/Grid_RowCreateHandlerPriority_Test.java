package de.slisson.mps.tables.runtime.gridmodel;

/*Generated by MPS */

import junit.framework.TestCase;
import junit.framework.Assert;

public class Grid_RowCreateHandlerPriority_Test extends TestCase {
  private Grid gridMain;
  private Grid gridA;
  private GridLeaf leafB;
  private GridLeaf leafC;
  private GridLeaf leafD;
  private IRowCreateHandler handlerA;
  private IRowCreateHandler handlerB;
  private IRowCreateHandler handlerC;
  private IRowCreateHandler handlerD;
  public void test_all_equal_unflatened() throws Exception {
    Assert.assertSame(handlerA, gridMain.getLeftRowCreateHandler(0));
    Assert.assertSame(handlerB, gridA.getLeftRowCreateHandler(0));
  }
  public void test_all_equal_flat() throws Exception {
    gridMain.flatten();
    // the higher the distance from the root the higher the priority if the explicit priority is equal 
    Assert.assertSame(handlerB, gridMain.getLeftRowCreateHandler(0));
  }
  public void test_highest_on_different_level_unflat() throws Exception {
    leafB.setLeftRowCreateHandler(handlerB, 1);
    Assert.assertSame(handlerA, gridMain.getLeftRowCreateHandler(0));
  }
  public void test_highest_on_different_level_flat() throws Exception {
    leafB.setLeftRowCreateHandler(handlerB, 1);
    gridMain.flatten();
    Assert.assertSame(handlerB, gridMain.getLeftRowCreateHandler(0));
  }
  public void test_highest_not_first_on_row_unflat() throws Exception {
    leafD.setLeftRowCreateHandler(handlerD, 1);
    Assert.assertSame(handlerD, gridMain.getLeftRowCreateHandler(0));
  }
  public void test_highest_not_first_on_row_flat() throws Exception {
    leafD.setLeftRowCreateHandler(handlerD, 1);
    gridMain.flatten();
    Assert.assertSame(handlerD, gridMain.getLeftRowCreateHandler(0));
  }
  public void test_highest_not_first_on_row_flat_2() throws Exception {
    leafC.setLeftRowCreateHandler(handlerC, 1);
    gridMain.flatten();
    Assert.assertSame(handlerC, gridMain.getLeftRowCreateHandler(0));
  }
  public void setUp() {
    gridMain = new Grid();
    gridA = new Grid();
    leafB = new GridLeaf("leafB");
    leafC = new GridLeaf("leafC");
    leafD = new GridLeaf("leafD");
    handlerA = new DoNothingRowCreateHandler();
    handlerB = new DoNothingRowCreateHandler();
    handlerC = new DoNothingRowCreateHandler();
    handlerD = new DoNothingRowCreateHandler();

    gridA.setLeftRowCreateHandler(handlerA);
    leafB.setLeftRowCreateHandler(handlerB);
    leafC.setLeftRowCreateHandler(handlerC);
    leafD.setLeftRowCreateHandler(handlerD);
    gridA.setElement(0, 0, leafB);
    gridA.setElement(1, 0, leafC);
    gridMain.setElement(0, 0, gridA);
    gridMain.setElement(1, 0, leafD);
  }
}
