package de.slisson.mps.tables.runtime.gridmodel;

/*Generated by MPS */

import junit.framework.TestCase;
import junit.framework.Assert;

public class Grid_Span_Test extends TestCase {
  private Grid gridMain;
  private GridLeaf leafA;
  private GridLeaf leafB;
  private GridLeaf leafC;
  public void test_size() throws Exception {
    Assert.assertEquals(4, gridMain.getSizeX());
    Assert.assertEquals(3, gridMain.getSizeY());
  }
  public void test_reject_overwrite_spanned_space() throws Exception {
    try {
      gridMain.setElement(2, 0, new GridLeaf("overwriteA"));
      Assert.fail();
    } catch (Exception e) {
      // expected exception 
    }
    try {
      gridMain.setElement(0, 2, new GridLeaf("overwriteB"));
      Assert.fail();
    } catch (Exception e) {
      // expected exception 
    }
  }
  public void test_replace_spanning_element() throws Exception {
    Assert.assertTrue(gridMain.isSpanned(2, 0));
    gridMain.setElement(1, 0, new GridLeaf("replacing"));
    Assert.assertFalse(gridMain.isSpanned(2, 0));
  }
  public void test_consistency_check_x() throws Exception {
    gridMain.checkSpanningConsistencyThrow();
    leafA.setSpanX(2);
    try {
      gridMain.checkSpanningConsistencyThrow();
      Assert.fail();
    } catch (Exception e) {
      // expected exception 
    }
  }
  public void test_consistency_check_y() throws Exception {
    gridMain.checkSpanningConsistencyThrow();
    leafA.setSpanY(2);
    try {
      gridMain.checkSpanningConsistencyThrow();
      Assert.fail();
    } catch (Exception e) {
      // expected exception 
    }
  }
  public void setUp() {
    leafA = new GridLeaf("leafA");
    leafB = new GridLeaf("leafB");
    leafC = new GridLeaf("leafC");
    leafB.setSpanX(3);
    leafC.setSpanX(2);
    leafC.setSpanY(2);
    gridMain = new Grid();
    gridMain.setElement(0, 0, leafA);
    gridMain.setElement(1, 0, leafB);
    gridMain.setElement(0, 1, leafC);
  }
}
