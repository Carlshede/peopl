package de.slisson.mps.tables.runtime.gridmodel;

/*Generated by MPS */

import junit.framework.TestCase;
import junit.framework.Assert;

public class Statemachine_with_Group_Headers_Test extends TestCase {
  private Grid main;
  private Grid g00;
  private Grid g01;
  private Grid g10;
  private Grid g11;
  private HeaderReference event0;
  private HeaderReference event1;
  private HeaderReference state0;
  private HeaderReference state1;
  private GridLeaf transition00;
  private GridLeaf transition01;
  private GridLeaf transition10;
  private GridLeaf transition11;
  private HeaderReference eventGroup;
  private HeaderReference stateGroup;
  private Grid gTransitions;
  public void test_sizeX() throws Exception {
    Assert.assertEquals(2, main.getSizeX());
  }
  public void test_sizeY() throws Exception {
    Assert.assertEquals(2, main.getSizeY());
  }
  public void test_transitions() throws Exception {
    Assert.assertSame(transition00, main.getElement(0, 0));
    Assert.assertSame(transition01, main.getElement(0, 1));
    Assert.assertSame(transition10, main.getElement(1, 0));
    Assert.assertSame(transition11, main.getElement(1, 1));
  }
  public void test_column_headers_sizeX() throws Exception {
    Assert.assertEquals(2, main.getColumnHeadersSizeX());
  }
  public void test_column_headers_sizeY() throws Exception {
    Assert.assertEquals(2, main.getColumnHeadersSizeY());
  }
  public void test_row_headers_sizeX() throws Exception {
    Assert.assertEquals(2, main.getRowHeadersSizeX());
  }
  public void test_row_headers_sizeY() throws Exception {
    Assert.assertEquals(2, main.getRowHeadersSizeY());
  }
  public void test_column_headers() throws Exception {
    Assert.assertEquals(eventGroup, main.getColumnHeader(0, 0));
    Assert.assertEquals(eventGroup, main.getColumnHeader(1, 0));
    Assert.assertEquals(event0, main.getColumnHeader(0, 1));
    Assert.assertEquals(event1, main.getColumnHeader(1, 1));
  }
  public void test_row_headers() throws Exception {
    Assert.assertEquals(stateGroup, main.getRowHeader(0, 0));
    Assert.assertEquals(stateGroup, main.getRowHeader(0, 1));
    Assert.assertEquals(state0, main.getRowHeader(1, 0));
    Assert.assertEquals(state1, main.getRowHeader(1, 1));
  }
  public void setUp() {
    main = new Grid();
    g00 = new Grid();
    g01 = new Grid();
    g10 = new Grid();
    g11 = new Grid();
    gTransitions = new Grid();
    event0 = new StringHeaderReference("Event0");
    event1 = new StringHeaderReference("Event1");
    state0 = new StringHeaderReference("State0");
    state1 = new StringHeaderReference("State1");
    transition00 = new GridLeaf("Transition00");
    transition01 = new GridLeaf("Transition01");
    transition10 = new GridLeaf("Transition10");
    transition11 = new GridLeaf("Transition11");

    g00.setElement(0, 0, transition00);
    g00.setColumnHeader(0, 0, event0);
    g00.setRowHeader(0, 0, state0);

    g10.setElement(0, 0, transition10);
    g10.setColumnHeader(0, 0, event1);
    g10.setRowHeader(0, 0, state0);

    g01.setElement(0, 0, transition01);
    g01.setColumnHeader(0, 0, event0);
    g01.setRowHeader(0, 0, state1);

    g11.setElement(0, 0, transition11);
    g11.setColumnHeader(0, 0, event1);
    g11.setRowHeader(0, 0, state1);

    gTransitions.setElement(0, 0, g00);
    gTransitions.setElement(1, 0, g10);
    gTransitions.setElement(0, 1, g01);
    gTransitions.setElement(1, 1, g11);
    gTransitions.setColumnHeader(0, 0, event0);
    gTransitions.setColumnHeader(1, 0, event1);
    gTransitions.setRowHeader(0, 0, state0);
    gTransitions.setRowHeader(0, 1, state1);

    eventGroup = new StringHeaderReference("Events");
    stateGroup = new StringHeaderReference("States");
    main.setElement(0, 0, gTransitions);
    main.setColumnHeader(0, 0, eventGroup);
    main.setRowHeader(0, 0, stateGroup);
    main.flatten();
  }

}
