package de.slisson.mps.tables.runtime.gridmodel;

/*Generated by MPS */

import junit.framework.TestCase;
import junit.framework.Assert;

public class Column_RightAnnotatedRow_Test extends TestCase {
  private Grid main;
  private Grid row1;
  private Grid row2;
  private Grid annotatedRow;
  private GridLeaf leaf1A;
  private GridLeaf leaf1B;
  private GridLeaf leaf2A;
  private GridLeaf leaf2B;
  private GridLeaf annotation;
  private HeaderReference headerA;
  private HeaderReference headerB;
  private HeaderReference annotationHeader;
  public void test_sizeX() throws Exception {
    Assert.assertEquals(3, main.getSizeX());
  }
  public void test_sizeY() throws Exception {
    Assert.assertEquals(2, main.getSizeY());
  }
  public void test_annotation_position() throws Exception {
    Assert.assertSame(annotation, main.getElement(2, 0));
  }
  public void test_row1_position() throws Exception {
    Assert.assertSame(leaf1A, main.getElement(0, 0));
    Assert.assertSame(leaf1B, main.getElement(1, 0));
  }
  public void test_row2_position() throws Exception {
    Assert.assertSame(leaf2A, main.getElement(0, 1));
    Assert.assertSame(leaf2B, main.getElement(1, 1));
  }
  public void test_annotation_column_other_row() throws Exception {
    Assert.assertEquals(UnusedPosition.class, main.getElement(2, 1).getClass());
  }
  public void test_headerSizeX() throws Exception {
    Assert.assertEquals(3, main.getColumnHeadersSizeX());
  }
  public void test_headerSizeY() throws Exception {
    Assert.assertEquals(1, main.getColumnHeadersSizeY());
  }
  public void test_annotation_header() throws Exception {
    Assert.assertEquals(annotationHeader, main.getColumnHeader(2, 0));
  }
  public void test_other_headers() throws Exception {
    Assert.assertEquals(headerA, main.getColumnHeader(0, 0));
    Assert.assertEquals(headerB, main.getColumnHeader(1, 0));
  }
  public void setUp() {
    main = new Grid();

    row1 = new Grid();
    row2 = new Grid();

    leaf1A = new GridLeaf("1A");
    leaf1B = new GridLeaf("1B");
    leaf2A = new GridLeaf("2A");
    leaf2B = new GridLeaf("2B");

    headerA = new StringHeaderReference("HeaderA");
    headerB = new StringHeaderReference("HeaderB");
    annotationHeader = new StringHeaderReference("@Annotation");

    row1.setElement(0, 0, leaf1A);
    row1.setElement(1, 0, leaf1B);
    row1.setColumnHeader(0, 0, headerA);
    row1.setColumnHeader(1, 0, headerB);
    row1.setSpanToSize();

    row2.setElement(0, 0, leaf2A);
    row2.setElement(1, 0, leaf2B);
    row2.setColumnHeader(0, 0, headerA);
    row2.setColumnHeader(1, 0, headerB);
    row2.setSpanToSize();

    annotation = new GridLeaf("Annotation");
    annotatedRow = new Grid();
    annotatedRow.setElement(0, 0, row1);
    annotatedRow.setElement(row1.getSpanX(), 0, annotation);
    annotatedRow.setColumnHeader(row1.getSpanX(), 0, annotationHeader);
    annotatedRow.setSpanToSize();

    main.setElement(0, 0, annotatedRow);
    main.setElement(0, 1, row2);

    main.flatten();
  }
}
