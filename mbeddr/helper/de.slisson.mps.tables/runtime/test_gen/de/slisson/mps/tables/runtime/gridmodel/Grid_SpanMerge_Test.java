package de.slisson.mps.tables.runtime.gridmodel;

/*Generated by MPS */

import junit.framework.TestCase;
import junit.framework.Assert;
import de.slisson.mps.tables.runtime.simplegrid.GridPosition;

public class Grid_SpanMerge_Test extends TestCase {
  private Grid gridMain;
  private Grid gridA;
  private GridLeaf leafA;
  private GridLeaf leafB;
  private GridLeaf leafC;
  public void test_main_size() throws Exception {
    Assert.assertEquals(3, gridMain.getSizeX());
    Assert.assertEquals(2, gridMain.getSizeY());
  }
  public void test_elements_in_main() throws Exception {
    Assert.assertEquals(UnusedPosition.class, gridMain.getElement(0, 0).getClass());
    Assert.assertEquals(UnusedPosition.class, gridMain.getElement(0, 1).getClass());
    Assert.assertEquals(gridA, gridMain.getElement(1, 0));
    Assert.assertEquals(UnusedPosition.class, gridMain.getElement(2, 0).getClass());
    Assert.assertEquals(leafB, gridMain.getElement(1, 1));
    Assert.assertEquals(leafC, gridMain.getElement(2, 1));
  }
  public void test_elements_in_gridA() throws Exception {
    Assert.assertEquals(3, gridA.getSizeX());
    Assert.assertEquals(1, gridA.getSizeY());
    Assert.assertSame(leafA, gridA.getElement(0, 0));

    Assert.assertEquals(SpannedPosition.class, gridA.getElement(1, 0).getClass());
    Assert.assertEquals(SpannedPosition.class, gridA.getElement(2, 0).getClass());
  }
  public void test_span_info_before_merge() throws Exception {
    Assert.assertSame(leafA, ((SpannedPosition) gridA.getElement(1, 0)).getSpanningElement());
    Assert.assertSame(leafA, ((SpannedPosition) gridA.getElement(2, 0)).getSpanningElement());

    Assert.assertEquals(new GridPosition(0, 0), ((SpannedPosition) gridA.getElement(1, 0)).getSpanningStart());
    Assert.assertEquals(new GridPosition(0, 0), ((SpannedPosition) gridA.getElement(2, 0)).getSpanningStart());
  }
  public void test_size_after_merge() throws Exception {
    gridMain.flatten();
    Assert.assertEquals(5, gridMain.getSizeX());
    Assert.assertEquals(2, gridMain.getSizeY());
  }
  public void test_elements_after_merge() throws Exception {
    gridMain.flatten();
    Assert.assertSame(leafA, gridMain.getElement(1, 0));
    Assert.assertSame(leafB, gridMain.getElement(1, 1));
    Assert.assertSame(leafC, gridMain.getElement(4, 1));
  }
  public void test_span_info_after_merge() throws Exception {
    gridMain.flatten();
    Assert.assertEquals(UnusedPosition.class, gridMain.getElement(0, 0).getClass());
    Assert.assertSame(leafA, gridMain.getElement(1, 0));
    Assert.assertEquals(SpannedPosition.class, gridMain.getElement(2, 0).getClass());
    Assert.assertEquals(SpannedPosition.class, gridMain.getElement(3, 0).getClass());

    Assert.assertSame(leafA, ((SpannedPosition) gridMain.getElement(2, 0)).getSpanningElement());
    Assert.assertSame(leafA, ((SpannedPosition) gridMain.getElement(3, 0)).getSpanningElement());

    Assert.assertEquals(new GridPosition(1, 0), ((SpannedPosition) gridMain.getElement(2, 0)).getSpanningStart());
    Assert.assertEquals(new GridPosition(1, 0), ((SpannedPosition) gridMain.getElement(3, 0)).getSpanningStart());
  }
  public void test_span_consistent() throws Exception {
    gridMain.checkSpanningConsistencyThrow();
  }
  public void setUp() {
    leafA = new GridLeaf("leafA");
    leafB = new GridLeaf("leafB");
    leafC = new GridLeaf("leafC");
    gridMain = new Grid();
    gridA = new Grid();
    leafA.setSpanX(3);
    gridA.setElement(0, 0, leafA);
    gridMain.setElement(1, 0, gridA);
    gridMain.setElement(1, 1, leafB);
    gridMain.setElement(2, 1, leafC);
  }
}
